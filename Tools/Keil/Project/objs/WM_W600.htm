<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\objs\WM_W600.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\objs\WM_W600.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Jul 12 11:42:05 2018
<BR><P>
<H3>Maximum Stack Usage =       4368 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
eap_wsc_process &rArr; wps_process_msg &rArr; wps_enrollee_process_msg &rArr; wps_process_wsc_msg &rArr; wps_process_m2 &rArr; wps_derive_keys &rArr; dh5_derive_shared &rArr; dh_derive_shared &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; tls_crypto_exptmod &rArr; mp_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[470]">lwip_send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46f]">lwip_sendto</a><BR>
 <LI><a href="#[40f]">netconn_drain</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40f]">netconn_drain</a><BR>
 <LI><a href="#[8a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8a]">NMI_Handler</a><BR>
 <LI><a href="#[8b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8b]">HardFault_Handler</a><BR>
 <LI><a href="#[8c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8c]">MemManage_Handler</a><BR>
 <LI><a href="#[8d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8d]">BusFault_Handler</a><BR>
 <LI><a href="#[8e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8e]">UsageFault_Handler</a><BR>
 <LI><a href="#[90]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[90]">DebugMon_Handler</a><BR>
 <LI><a href="#[a6]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a6]">ADC_IRQHandler</a><BR>
 <LI><a href="#[960]">eapol_sm_notify_lower_layer_success</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[954]">eapol_sm_step</a><BR>
 <LI><a href="#[8fa]">inc_byte_array</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8fa]">inc_byte_array</a><BR>
 <LI><a href="#[a58]">sm_WPA_PTK_DISCONNECT_Enter</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a4c]">wpa_sta_disconnect</a><BR>
 <LI><a href="#[a4b]">sm_WPA_PTK_PTKINITDONE_Enter</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a4c]">wpa_sta_disconnect</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[a6]">ADC_IRQHandler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[8d]">BusFault_Handler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[b9]">CRYPTION_IRQHandler</a> from wm_common.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[1f0]">DHCPS_RecvCb</a> from dhcp_server.o(.text) referenced from dhcp_server.o(.text)
 <LI><a href="#[a4]">DMA_BRUST_IRQHandler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[9f]">DMA_Channel0_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[a0]">DMA_Channel1_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[a1]">DMA_Channel2_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[a2]">DMA_Channel3_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[a3]">DMA_Channel4_7_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[201]">DNSS_RecvCb</a> from dns_server.o(.text) referenced from dns_server.o(.text)
 <LI><a href="#[90]">DebugMon_Handler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[b4]">FLASH_IRQHandler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[ab]">GPIOA_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[ba]">GPIOB_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[8b]">HardFault_Handler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[a5]">I2C_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[b6]">I2S_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[c3]">KeyScanTimerProc</a> from wm_wifi.o(.text) referenced from wm_wifi.o(.text)
 <LI><a href="#[be]">LCD_display</a> from wm_lcd.o(.text) referenced from wm_console_task.o(.text)
 <LI><a href="#[8c]">MemManage_Handler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[8a]">NMI_Handler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[92]">OS_CPU_SysTickHandler</a> from wm_rtos.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[9d]">PMU_GPIO_WAKE_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[b3]">PMU_IRQHandler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[b7]">PMU_RTC_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[9e]">PMU_SDIO_WAKE_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[9c]">PMU_TIMER0_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[9b]">PMU_TIMER1_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[b5]">PWM_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[91]">PendSV_Handler</a> from wm_rtos.o(.emb_text) referenced from startup_venus.o(RESET)
 <LI><a href="#[b8]">RSA_IRQHandler</a> from wm_common.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[bd]">Relay_control</a> from wm_relay.o(.text) referenced from wm_console_task.o(.text)
 <LI><a href="#[cb]">ResetTimerProc</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[89]">Reset_Handler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[95]">SDIO_RX_CMD_IRQHandler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[93]">SDIO_RX_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[96]">SDIO_TX_CMD_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[94]">SDIO_TX_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[a8]">SPI_HS_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[a7]">SPI_LS_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[8f]">SVC_Handler</a> from wm_rtos.o(.emb_text) referenced from startup_venus.o(RESET)
 <LI><a href="#[c5]">SockRcvTaskProc</a> from wm_wifi.o(.text) referenced from wm_wifi.o(.text)
 <LI><a href="#[ac]">TIM0_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[ad]">TIM1_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[ae]">TIM2_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[af]">TIM3_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[b0]">TIM4_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[b1]">TIM5_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[a9]">UART0_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[aa]">UART1_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[bb]">UART2_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[11b]">Uart0Init</a> from wm_driver.o(.text) referenced from startup_venus.o(.text)
 <LI><a href="#[c1]">Uart1RxCb</a> from wm_uart1.o(.text) referenced from wm_uart1.o(.text)
 <LI><a href="#[c0]">Uart1TaskProc</a> from wm_uart1.o(.text) referenced from wm_console_task.o(.text)
 <LI><a href="#[8e]">UsageFault_Handler</a> from startup_venus.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[c2]">UserWlanStatusChangedEvent</a> from wm_wifi.o(.text) referenced from wm_wifi.o(.text)
 <LI><a href="#[b2]">WDG_IRQHandler</a> from wm_driver.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[c4]">WifiTaskProc</a> from wm_wifi.o(.text) referenced from wm_wifi.o(.text)
 <LI><a href="#[c6]">_DhcpTickHandle</a> from dhcp_server.o(.text) referenced 2 times from dhcp_server.o(.text)
 <LI><a href="#[11c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_venus.o(.text)
 <LI><a href="#[14a]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[14b]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[149]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[14f]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[14e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[f3]">accept_function</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[121]">adc_dma_isr</a> from wm_driver.o(.text) referenced from wm_driver.o(.text)
 <LI><a href="#[ca]">airkiss_lan_task</a> from wm_oneshot_airkiss.o(.text) referenced from wm_oneshot_airkiss.o(.text)
 <LI><a href="#[10d]">alg_input</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[102]">alg_timer</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[26]">aolm_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[8e9]">ap_handle_timer</a> from hostapd_sta_info.o(.text) referenced 7 times from hostapd_sta_info.o(.text)
 <LI><a href="#[132]">ap_sta_disassoc_cb_timeout</a> from hostapd_sta_info.o(.text) referenced from hostapd_sta_info.o(.text)
 <LI><a href="#[29]">atlt_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[24]">atm_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[2e]">atpt_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[25]">atrm_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[19]">brdssid_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[142]">bss_release</a> from tls_wl_bss.o(.text) referenced 2 times from tls_wl_bss.o(.text)
 <LI><a href="#[18]">bssid_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[1b]">chl_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[1c]">chll_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[34]">cmdm_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[1a]">cntparam_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[63]">custdata_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[103]">cyclic_timer</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[2f]">dbg_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[2b]">ddns_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[157]">dhcp_coarse_tmr</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.constdata)
 <LI><a href="#[158]">dhcp_fine_tmr</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.constdata)
 <LI><a href="#[104]">dhcp_recv</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[521]">dhcp_start</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[520]">dhcp_stop</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[2d]">dname_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[2a]">dns_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[11a]">dns_recv</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[15a]">dns_tmr</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.constdata)
 <LI><a href="#[ff]">do_close_connect</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[fe]">do_create_connect</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[1]">e_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[13e]">eap_wsc_deinit</a> from eap_wsc.o(.text) referenced from eap_wsc.o(.text)
 <LI><a href="#[13d]">eap_wsc_init</a> from eap_wsc.o(.text) referenced from eap_wsc.o(.text)
 <LI><a href="#[13f]">eap_wsc_process</a> from eap_wsc.o(.text) referenced from eap_wsc.o(.text)
 <LI><a href="#[141]">eapol_port_timers_tick</a> from eapol_supp_sm.o(.text) referenced 2 times from eapol_supp_sm.o(.text)
 <LI><a href="#[80]">eapol_sm_get_bool</a> from eapol_supp_sm.o(.text) referenced 2 times from eapol_supp_sm.o(.data)
 <LI><a href="#[7f]">eapol_sm_get_config</a> from eapol_supp_sm.o(.text) referenced 2 times from eapol_supp_sm.o(.data)
 <LI><a href="#[86]">eapol_sm_get_config_blob</a> from eapol_supp_sm.o(.text) referenced 2 times from eapol_supp_sm.o(.data)
 <LI><a href="#[84]">eapol_sm_get_eapReqData</a> from eapol_supp_sm.o(.text) referenced 2 times from eapol_supp_sm.o(.data)
 <LI><a href="#[82]">eapol_sm_get_int</a> from eapol_supp_sm.o(.text) referenced 2 times from eapol_supp_sm.o(.data)
 <LI><a href="#[88]">eapol_sm_notify_cert</a> from eapol_supp_sm.o(.text) referenced 2 times from eapol_supp_sm.o(.data)
 <LI><a href="#[87]">eapol_sm_notify_pending</a> from eapol_supp_sm.o(.text) referenced 2 times from eapol_supp_sm.o(.data)
 <LI><a href="#[81]">eapol_sm_set_bool</a> from eapol_supp_sm.o(.text) referenced 2 times from eapol_supp_sm.o(.data)
 <LI><a href="#[85]">eapol_sm_set_config_blob</a> from eapol_supp_sm.o(.text) referenced 2 times from eapol_supp_sm.o(.data)
 <LI><a href="#[83]">eapol_sm_set_int</a> from eapol_supp_sm.o(.text) referenced 2 times from eapol_supp_sm.o(.data)
 <LI><a href="#[140]">eapol_sm_step_timeout</a> from eapol_supp_sm.o(.text) referenced 2 times from eapol_supp_sm.o(.text)
 <LI><a href="#[12c]">eloop_timeout</a> from wpa_supplicant.o(.text) referenced from wpa_supplicant.o(.text)
 <LI><a href="#[17]">encry_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[a]">entm_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[2]">ents_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[ed]">err_tcp</a> from lwip2.0.3.o(.text) referenced 2 times from lwip2.0.3.o(.text)
 <LI><a href="#[30]">espc_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[31]">espt_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[526]">etharp_output</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[156]">etharp_tmr</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.constdata)
 <LI><a href="#[108]">ethernet_input</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[106]">ethernetif_igmp_mac_filter</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[52d]">ethernetif_init</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[10c]">ethernetif_input</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[f5]">event_callback</a> from lwip2.0.3.o(.text) referenced 2 times from lwip2.0.3.o(.text)
 <LI><a href="#[bf]">exrtc_save</a> from wm_exrtc.o(.text) referenced from wm_console_task.o(.text)
 <LI><a href="#[41]">flsr_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[42]">flsw_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[14d]">fputc</a> from retarget.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[64c]">fwup_request_complete</a> from wm_common.o(.text) referenced from wm_common.o(.text)
 <LI><a href="#[122]">fwup_scheduler</a> from wm_common.o(.text) referenced from wm_common.o(.text)
 <LI><a href="#[ce]">hostif_default_socket_err</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[cc]">hostif_default_socket_setup</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[cf]">hostif_default_socket_state_changed</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[cd]">hostif_socket_recv</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[d1]">hostif_socket_rpt</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[d0]">hostif_socket_rpt_handle</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[d3]">hostif_socket_state_changed_ATCMD</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[d2]">hostif_socket_state_changed_RICMD</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[26f]">hostif_wscan_cmplt</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[d5]">hspi_rx_cmd</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[d6]">hspi_rx_data</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[db]">hspi_send_tx_msg</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[d7]">hspi_tx</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[124]">http_client_rx</a> from wm_http_compile.o(.text) referenced from wm_http_compile.o(.text)
 <LI><a href="#[38]">httpc_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[45]">hwv_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[9b0]">ieee80211_bss_timeout</a> from tls_wl_bss.o(.text) referenced from tls_wl_bss.o(.text)
 <LI><a href="#[9f0]">ieee80211_sta_timer</a> from tls_wl_mlme.o(.text) referenced from tls_wl_mlme.o(.text)
 <LI><a href="#[133]">ieee80211_tkip_countermeasures_stop</a> from tkip_countermeasures.o(.text) referenced from tkip_countermeasures.o(.text)
 <LI><a href="#[159]">igmp_tmr</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.constdata)
 <LI><a href="#[5]">ioc_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[33]">iom_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[109]">ip4_input</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[155]">ip_reass_tmr</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.constdata)
 <LI><a href="#[e9]">ipfrag_free_pbuf_custom</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[14c]">isspace</a> from isspace_o.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[16]">key_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[9]">lkstt_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[105]">low_level_output</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[47]">lpchl_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[54]">lpchlr_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[51]">lpchrs_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[4f]">lppstp_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[4e]">lppstr_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[56]">lpragc_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[50]">lprfps_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[57]">lprsr_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[4c]">lprstp_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[4b]">lprstr_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[4d]">lprstt_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[55]">lpstpr_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[53]">lpstpt_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[52]">lptbd_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[49]">lptstp_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[48]">lptstr_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[4a]">lptstt_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[f1]">lwip_getsockopt_callback</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[419]">lwip_netconn_do_accepted</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[423]">lwip_netconn_do_bind</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[117]">lwip_netconn_do_close</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[43b]">lwip_netconn_do_connect</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[ef]">lwip_netconn_do_connected</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[410]">lwip_netconn_do_delconn</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[43e]">lwip_netconn_do_disconnect</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[f6]">lwip_netconn_do_dns_found</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[416]">lwip_netconn_do_getaddr</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[493]">lwip_netconn_do_gethostbyname</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[433]">lwip_netconn_do_join_leave_group</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[455]">lwip_netconn_do_listen</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[47a]">lwip_netconn_do_newconn</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[459]">lwip_netconn_do_recv</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[46c]">lwip_netconn_do_send</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[460]">lwip_netconn_do_write</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[f0]">lwip_setsockopt_callback</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[44]">mac_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[bc]">main</a> from wm_main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[116]">mem_free</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[152]">memcmp</a> from memcmp.o(.text) referenced from wm_oneshot_airkiss.o(.constdata)
 <LI><a href="#[151]">memcpy</a> from memmove.o(.text) referenced from wm_oneshot_airkiss.o(.constdata)
 <LI><a href="#[150]">memset</a> from memseta.o(.text) referenced from wm_oneshot_airkiss.o(.constdata)
 <LI><a href="#[76f]">mp_reduce</a> from libtommath.o(.text) referenced from libtommath.o(.text)
 <LI><a href="#[76b]">mp_reduce_2k_l</a> from libtommath.o(.text) referenced from libtommath.o(.text)
 <LI><a href="#[100]">net_do_send</a> from lwip2.0.3.o(.text) referenced 2 times from lwip2.0.3.o(.text)
 <LI><a href="#[101]">net_do_write</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[fc]">net_tcp_accept_cb</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[fb]">net_tcp_connect_cb</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[f8]">net_tcp_err_cb</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[f7]">net_tcp_poll_cb</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[fa]">net_tcp_recv_cb</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[fd]">net_udp_recv_cb</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[10f]">netif_set_default</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[114]">netif_set_down</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[113]">netif_set_up</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[110]">netif_status_changed</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[10e]">netif_status_changed2</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[10a]">netifapi_do_netif_add</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[107]">netifapi_do_netif_common</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[112]">netifapi_do_netif_set_addr</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[23]">nip_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[153]">oneshot_airkiss_printf</a> from wm_oneshot_airkiss.o(.text) referenced from wm_oneshot_airkiss.o(.constdata)
 <LI><a href="#[36]">oneshot_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[35]">pass_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[115]">pbuf_free_int</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[e8]">pbuf_free_ooseq_callback</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[61]">ping_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[127]">ping_test_abort_timeout</a> from ping.o(.text) referenced from ping.o(.text)
 <LI><a href="#[126]">ping_test_stop_timeout</a> from ping.o(.text) referenced from ping.o(.text)
 <LI><a href="#[125]">ping_test_task</a> from ping.o(.text) referenced from ping.o(.text)
 <LI><a href="#[4]">pmtf_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[ec]">poll_tcp</a> from lwip2.0.3.o(.text) referenced 2 times from lwip2.0.3.o(.text)
 <LI><a href="#[27]">portm_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[e7]">prvIdleTask</a> from wm_rtos.o(.text) referenced from wm_rtos.o(.text)
 <LI><a href="#[e6]">prvTimerTask</a> from wm_rtos.o(.text) referenced from wm_rtos.o(.text)
 <LI><a href="#[39]">qmac_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[3a]">qver_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[f9]">raw_sk_free_pbuf_custom_fn</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[118]">recv_raw</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[ee]">recv_tcp</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[119]">recv_udp</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[3d]">regr_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[3e]">regw_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[3f]">rfr_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[40]">rfw_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[3]">rstf_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[eb]">sent_tcp</a> from lwip2.0.3.o(.text) referenced 2 times from lwip2.0.3.o(.text)
 <LI><a href="#[d]">skcls_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[b]">skct_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[13]">skghbn_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[10]">skrcv_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[11]">skrptm_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[e]">sksdf_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[f]">sksnd_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[12]">sksrcip_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[c]">skstt_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[58]">slist_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[5e]">softap_chl_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[5c]">softap_encry_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[5d]">softap_key_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[59]">softap_lkstt_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[60]">softap_nip_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[5b]">softap_qmac_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[5a]">softap_ssid_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[5f]">softap_wbgr_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[11f]">spi_complete</a> from wm_driver.o(.text) referenced from wm_driver.o(.text)
 <LI><a href="#[120]">spi_scheduler</a> from wm_driver.o(.text) referenced from wm_driver.o(.text)
 <LI><a href="#[46]">spif_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[15]">ssid_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[143]">sta_info_release</a> from tls_wl_sta_info.o(.text) referenced from tls_wl_sta_info.o(.text)
 <LI><a href="#[7f4]">standby_timeout</a> from tls_wl_core.o(.text) referenced from tls_wl_core.o(.text)
 <LI><a href="#[71]">supplicant_event_assoc</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[77]">supplicant_event_beacon_done</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[72]">supplicant_event_disassoc</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[74]">supplicant_event_mic_err</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[7c]">supplicant_event_net_down</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[7d]">supplicant_event_net_up</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[75]">supplicant_event_rx_eapol</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[7b]">supplicant_event_rx_from_unknown</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[76]">supplicant_event_rx_mgmt</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[78]">supplicant_event_rx_ps</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[79]">supplicant_event_rx_pspoll</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[73]">supplicant_event_scan_completed</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[7a]">supplicant_event_sta_active</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[7e]">supplicant_event_update_stat</a> from wpa_supplicant.o(.text) referenced 2 times from wpa_supplicant.o(.data)
 <LI><a href="#[128]">supplicant_ps_pkt_timer_expire</a> from wpa_supplicant.o(.text) referenced from ap.o(.text)
 <LI><a href="#[11d]">sys_net_status_changed</a> from tls_sys.o(.text) referenced from tls_sys.o(.text)
 <LI><a href="#[568]">task_start</a> from wm_main.o(.text) referenced from wm_main.o(.text)
 <LI><a href="#[123]">task_thread</a> from wm_common.o(.text) referenced from wm_common.o(.text)
 <LI><a href="#[f2]">tcp_accept_null</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[f4]">tcp_recv_null</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[154]">tcp_tmr</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.constdata)
 <LI><a href="#[531]">tcpip_input</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[52c]">tcpip_output</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[ea]">tcpip_tcp_timer</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[10b]">tcpip_thread</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[68]">tls_freq_error_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[314]">tls_hostif_http_client_err_callback</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[313]">tls_hostif_http_client_recv_callback</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[d4]">tls_hostif_net_status_changed</a> from wm_cmd.o(.text) referenced 3 times from wm_cmd.o(.text)
 <LI><a href="#[302]">tls_hostif_tx_timeout</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[d8]">tls_hspi_rx_cmd_cb</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[d9]">tls_hspi_rx_data_cb</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[da]">tls_hspi_tx_data_cb</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[601]">tls_i2s_tx_dma_callback</a> from wm_driver.o(.text) referenced 2 times from wm_driver.o(.text)
 <LI><a href="#[c9]">tls_oneshot_handshake_timeout</a> from wm_wifi_oneshot.o(.text) referenced from wm_wifi_oneshot.o(.text)
 <LI><a href="#[238]">tls_oneshot_scan_result_cb</a> from wm_wifi_oneshot.o(.text) referenced from wm_wifi_oneshot.o(.text)
 <LI><a href="#[c8]">tls_oneshot_switch_channel_tim_start</a> from wm_wifi_oneshot.o(.text) referenced from wm_wifi_oneshot.o(.text)
 <LI><a href="#[239]">tls_oneshot_task_handle</a> from wm_wifi_oneshot.o(.text) referenced from wm_wifi_oneshot.o(.text)
 <LI><a href="#[69]">tls_rf_vcg_ctrl_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[65]">tls_rx_wave</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[6e]">tls_spifls_drv_chip_erase</a> from wm_driver.o(.text) referenced 2 times from wm_driver.o(.data)
 <LI><a href="#[6d]">tls_spifls_drv_erase</a> from wm_driver.o(.text) referenced 2 times from wm_driver.o(.data)
 <LI><a href="#[6b]">tls_spifls_drv_fast_read</a> from wm_driver.o(.text) referenced 2 times from wm_driver.o(.data)
 <LI><a href="#[6c]">tls_spifls_drv_page_write</a> from wm_driver.o(.text) referenced 2 times from wm_driver.o(.data)
 <LI><a href="#[6f]">tls_spifls_drv_probe</a> from wm_driver.o(.text) referenced 2 times from wm_driver.o(.data)
 <LI><a href="#[6a]">tls_spifls_drv_read</a> from wm_driver.o(.text) referenced 2 times from wm_driver.o(.data)
 <LI><a href="#[70]">tls_spifls_drv_remove</a> from wm_driver.o(.text) referenced 2 times from wm_driver.o(.data)
 <LI><a href="#[7e4]">tls_supplicant_task</a> from wpa_supplicant.o(.text) referenced from wpa_supplicant.o(.text)
 <LI><a href="#[7d3]">tls_supplicant_timer_task</a> from wpa_supplicant.o(.text) referenced from wpa_supplicant.o(.text)
 <LI><a href="#[578]">tls_sys_task</a> from tls_sys.o(.text) referenced from tls_sys.o(.text)
 <LI><a href="#[df]">tls_timer2_isr</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[67]">tls_tx_iq_mismatch_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[66]">tls_tx_lo_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[64]">tls_tx_sin</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[e0]">tls_uart0_task_rx_cb</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[365]">tls_uart1_task_rx_cb</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[dd]">tls_uart_free_tx_sent_data</a> from wm_driver.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[234]">tls_wifi_dataframe_recv</a> from wm_wifi_oneshot.o(.text) referenced from wm_wifi_oneshot.o(.text)
 <LI><a href="#[130]">tls_wl_bss_mgmt_task</a> from tls_wl_bss.o(.text) referenced from tls_wl_core.o(.text)
 <LI><a href="#[9a]">tls_wl_data_tx_isr</a> from tls_wl_core.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[97]">tls_wl_mac_isr</a> from tls_wl_core.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[99]">tls_wl_mgmt_tx_isr</a> from tls_wl_core.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[12e]">tls_wl_mlme_task</a> from tls_wl_mlme.o(.text) referenced from tls_wl_core.o(.text)
 <LI><a href="#[7ed]">tls_wl_power_save_awake</a> from tls_wl_core.o(.text) referenced from tls_wl_core.o(.text)
 <LI><a href="#[98]">tls_wl_rx_isr</a> from tls_wl_core.o(.text) referenced from startup_venus.o(RESET)
 <LI><a href="#[12f]">tls_wl_rx_task</a> from tls_wl_rx.o(.text) referenced from tls_wl_core.o(.text)
 <LI><a href="#[12d]">tls_wl_scan_task</a> from tls_wl_scan.o(.text) referenced from tls_wl_core.o(.text)
 <LI><a href="#[43]">txg_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[e3]">uart_get_uart1_port</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[28]">uart_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[de]">uart_rx</a> from wm_cmd.o(.text) referenced 3 times from wm_cmd.o(.text)
 <LI><a href="#[e2]">uart_send_tx_msg</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[e1]">uart_set_uart0_mode</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[e4]">uart_set_uart1_mode</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[e5]">uart_set_uart1_sock_param</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[34e]">uart_tx</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.text)
 <LI><a href="#[11e]">uart_tx_finish_callback</a> from wm_driver.o(.text) referenced from wm_driver.o(.text)
 <LI><a href="#[353]">uart_tx_sent_callback</a> from wm_cmd.o(.text) referenced 3 times from wm_cmd.o(.text)
 <LI><a href="#[dc]">uart_tx_socket_finish_callback</a> from wm_cmd.o(.text) referenced from wm_cmd.o(.text)
 <LI><a href="#[3c]">updd_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[3b]">updm_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[37]">updp_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[2c]">upnp_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[21]">warc_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[22]">warm_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[1f]">watc_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[1e]">wbgr_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[32]">webs_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[111]">wifi_status_changed</a> from lwip2.0.3.o(.text) referenced from lwip2.0.3.o(.text)
 <LI><a href="#[6]">wjoin_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[7]">wleav_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[c7]">wm_oneshot_netif_status_event</a> from wm_wifi_oneshot.o(.text) referenced from wm_wifi_oneshot.o(.text)
 <LI><a href="#[131]">wm_rf_set_channel</a> from tls_wl_rf.o(.text) referenced from tls_wl_hw.o(.text)
 <LI><a href="#[137]">wpa_eapol_set_wep_key</a> from wpas_glue.o(.text) referenced from wpas_glue.o(.text)
 <LI><a href="#[147]">wpa_group_update_sta</a> from wpa_auth.o(.text) referenced from wpa_auth.o(.text)
 <LI><a href="#[144]">wpa_rekey_gmk</a> from wpa_auth.o(.text) referenced 2 times from wpa_auth.o(.text)
 <LI><a href="#[148]">wpa_rekey_gtk</a> from wpa_auth.o(.text) referenced 2 times from wpa_auth.o(.text)
 <LI><a href="#[146]">wpa_rekey_ptk</a> from wpa_auth.o(.text) referenced 3 times from wpa_auth.o(.text)
 <LI><a href="#[145]">wpa_send_eapol_timeout</a> from wpa_auth.o(.text) referenced 4 times from wpa_auth.o(.text)
 <LI><a href="#[134]">wpa_sm_rekey_ptk</a> from wpa.o(.text) referenced from wpa.o(.text)
 <LI><a href="#[12a]">wpa_supplicant_auth_timer</a> from wpa_supplicant.o(.text) referenced from wpa_supplicant.o(.text)
 <LI><a href="#[12b]">wpa_supplicant_connect_timer</a> from wpa_supplicant.o(.text) referenced from wpa_supplicant.o(.text)
 <LI><a href="#[139]">wpa_supplicant_eapol_cb</a> from wpas_glue.o(.text) referenced from wpas_glue.o(.text)
 <LI><a href="#[136]">wpa_supplicant_eapol_send</a> from wpas_glue.o(.text) referenced from wpas_glue.o(.text)
 <LI><a href="#[135]">wpa_supplicant_notify_eapol_done</a> from wpas_glue.o(.text) referenced from wpas_glue.o(.text)
 <LI><a href="#[138]">wpa_supplicant_port_cb</a> from wpas_glue.o(.text) referenced from wpas_glue.o(.text)
 <LI><a href="#[129]">wpa_supplicant_scan_timer</a> from scan.o(.text) referenced from wpa_supplicant.o(.text)
 <LI><a href="#[13b]">wpa_supplicant_wps_cred</a> from wps_supplicant.o(.text) referenced from wps_supplicant.o(.text)
 <LI><a href="#[13c]">wpa_supplicant_wps_event</a> from wps_supplicant.o(.text) referenced from wps_supplicant.o(.text)
 <LI><a href="#[13a]">wpas_wps_timeout</a> from wps_supplicant.o(.text) referenced 2 times from wps_supplicant.o(.text)
 <LI><a href="#[14]">wprt_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[20]">wpsm_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[1d]">wreg_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[8]">wscan_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[62]">wwps_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
 <LI><a href="#[0]">z_proc</a> from wm_cmd.o(.text) referenced 2 times from wm_cmd.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[11c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(.text)
</UL>
<P><STRONG><a name="[af7]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[15b]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[aec]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[af8]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[af9]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[afa]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[afb]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[afc]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[8f]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wm_rtos.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[3a9]"></a>vPortStartFirstTask</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_rtos.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[91]"></a>PendSV_Handler</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, wm_rtos.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[36e]"></a>portDISABLE_INTERRUPTS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_rtos.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCoRoutineSchedule
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckDelayedList
</UL>

<P><STRONG><a name="[36c]"></a>portENABLE_INTERRUPTS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_rtos.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCoRoutineSchedule
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckDelayedList
</UL>

<P><STRONG><a name="[5ad]"></a>portGET_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_rtos.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_isr_count
</UL>

<P><STRONG><a name="[15e]"></a>UserMain</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = UserMain &rArr; CreateWifiTask &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserLedInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWifiTask
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart1Task
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRelayTask
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRTCTask
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateLCDTask
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[165]"></a>CreateRelayTask</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, wm_console_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CreateRelayTask &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
</UL>

<P><STRONG><a name="[166]"></a>CreateLCDTask</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, wm_console_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CreateLCDTask &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
</UL>

<P><STRONG><a name="[164]"></a>CreateRTCTask</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, wm_console_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CreateRTCTask &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
</UL>

<P><STRONG><a name="[167]"></a>CreateUart1Task</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, wm_console_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CreateUart1Task &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
</UL>

<P><STRONG><a name="[16a]"></a>UserRelayCtrl</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_relay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UserRelayCtrl &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Meter
</UL>

<P><STRONG><a name="[16d]"></a>GetRelayStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_relay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetRelayStatus &rArr; tls_gpio_read
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Meter
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Meter
</UL>

<P><STRONG><a name="[bd]"></a>Relay_control</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_relay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Relay_control &rArr; tls_os_time_delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_console_task.o(.text)
</UL>
<P><STRONG><a name="[170]"></a>LCD_GPIO</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_GPIO &rArr; tls_gpio_cfg &rArr; tls_io_cfg_set
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[171]"></a>SendBit_HL</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SendBit_HL &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_All
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleandisp
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W1622_success
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W1622_q
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sendcmd
</UL>

<P><STRONG><a name="[172]"></a>SendBit_LH</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_All
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleandisp
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W1622_success
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W1622_q
</UL>

<P><STRONG><a name="[173]"></a>Sendcmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Sendcmd &rArr; SendBit_HL &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_HL
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1622_Init
</UL>

<P><STRONG><a name="[174]"></a>W1622_q</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = W1622_q &rArr; SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_LH
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_HL
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W1622_byte
</UL>

<P><STRONG><a name="[175]"></a>W1622_byte</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = W1622_byte &rArr; W1622_q &rArr; SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W1622_q
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispOFF
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispON
</UL>

<P><STRONG><a name="[176]"></a>W1622_success</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, wm_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_LH
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_HL
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_renew
</UL>

<P><STRONG><a name="[177]"></a>disp_renew</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W1622_success
</UL>

<P><STRONG><a name="[178]"></a>dispON</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dispON &rArr; W1622_byte &rArr; W1622_q &rArr; SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W1622_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserLcdBlinkProc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserLcdCtrl
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_time_flag
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRightMH
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showLightMH
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show9num
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show8num
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show7num
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show6num
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show5num
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show4num
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show3num
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show2num
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show1num
</UL>

<P><STRONG><a name="[179]"></a>dispOFF</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dispOFF &rArr; W1622_byte &rArr; W1622_q &rArr; SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W1622_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserLcdBlinkProc
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserLcdCtrl
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showClrtime
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show9num
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show8num
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show7num
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show6num
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show5num
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show4num
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show3num
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show2num
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show1num
</UL>

<P><STRONG><a name="[17a]"></a>cleandisp</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = cleandisp &rArr; SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_LH
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_HL
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[17b]"></a>disp_All</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, wm_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_LH
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_HL
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
</UL>

<P><STRONG><a name="[17c]"></a>HT1622_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HT1622_Init &rArr; Sendcmd &rArr; SendBit_HL &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sendcmd
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_init
</UL>

<P><STRONG><a name="[17d]"></a>show1num</STRONG> (Thumb, 610 bytes, Stack size 16 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = show1num &rArr; dispOFF &rArr; W1622_byte &rArr; W1622_q &rArr; SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispOFF
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispON
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_date
</UL>

<P><STRONG><a name="[17e]"></a>show2num</STRONG> (Thumb, 614 bytes, Stack size 16 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = show2num &rArr; dispOFF &rArr; W1622_byte &rArr; W1622_q &rArr; SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispOFF
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispON
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_date
</UL>

<P><STRONG><a name="[17f]"></a>show3num</STRONG> (Thumb, 610 bytes, Stack size 16 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = show3num &rArr; dispOFF &rArr; W1622_byte &rArr; W1622_q &rArr; SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispOFF
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispON
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_date
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_time
</UL>

<P><STRONG><a name="[180]"></a>show4num</STRONG> (Thumb, 614 bytes, Stack size 16 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = show4num &rArr; dispOFF &rArr; W1622_byte &rArr; W1622_q &rArr; SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispOFF
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispON
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_date
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_time
</UL>

<P><STRONG><a name="[181]"></a>show5num</STRONG> (Thumb, 614 bytes, Stack size 16 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = show5num &rArr; dispOFF &rArr; W1622_byte &rArr; W1622_q &rArr; SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispOFF
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispON
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_date
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_time
</UL>

<P><STRONG><a name="[182]"></a>show6num</STRONG> (Thumb, 614 bytes, Stack size 16 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = show6num &rArr; dispOFF &rArr; W1622_byte &rArr; W1622_q &rArr; SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispOFF
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispON
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_date
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_time
</UL>

<P><STRONG><a name="[183]"></a>show7num</STRONG> (Thumb, 614 bytes, Stack size 16 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = show7num &rArr; dispOFF &rArr; W1622_byte &rArr; W1622_q &rArr; SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispOFF
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispON
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_date
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_time
</UL>

<P><STRONG><a name="[184]"></a>show8num</STRONG> (Thumb, 614 bytes, Stack size 16 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = show8num &rArr; dispOFF &rArr; W1622_byte &rArr; W1622_q &rArr; SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispOFF
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispON
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_date
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_time
</UL>

<P><STRONG><a name="[185]"></a>show9num</STRONG> (Thumb, 570 bytes, Stack size 8 bytes, wm_lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispOFF
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispON
</UL>

<P><STRONG><a name="[186]"></a>showLightMH</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = showLightMH &rArr; dispON &rArr; W1622_byte &rArr; W1622_q &rArr; SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispON
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_time
</UL>

<P><STRONG><a name="[187]"></a>showRightMH</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = showRightMH &rArr; dispON &rArr; W1622_byte &rArr; W1622_q &rArr; SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispON
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_time
</UL>

<P><STRONG><a name="[188]"></a>showClrtime</STRONG> (Thumb, 526 bytes, Stack size 8 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = showClrtime &rArr; dispOFF &rArr; W1622_byte &rArr; W1622_q &rArr; SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispOFF
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_date
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_time
</UL>

<P><STRONG><a name="[189]"></a>Show_time_flag</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Show_time_flag &rArr; dispON &rArr; W1622_byte &rArr; W1622_q &rArr; SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispON
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display
</UL>

<P><STRONG><a name="[18a]"></a>Show_time</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Show_time &rArr; show8num &rArr; dispOFF &rArr; W1622_byte &rArr; W1622_q &rArr; SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showClrtime
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showRightMH
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showLightMH
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show8num
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show7num
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show6num
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show5num
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show4num
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show3num
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display
</UL>

<P><STRONG><a name="[18b]"></a>Show_date</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Show_date &rArr; show8num &rArr; dispOFF &rArr; W1622_byte &rArr; W1622_q &rArr; SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;showClrtime
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show8num
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show7num
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show6num
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show5num
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show4num
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show3num
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show2num
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show1num
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display
</UL>

<P><STRONG><a name="[18f]"></a>HexToDec</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wm_lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display
</UL>

<P><STRONG><a name="[18c]"></a>UserLcdCtrl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UserLcdCtrl &rArr; dispOFF &rArr; W1622_byte &rArr; W1622_q &rArr; SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispOFF
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispON
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiTaskProc
</UL>

<P><STRONG><a name="[1cc]"></a>UserLcdBlink</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiTaskProc
</UL>

<P><STRONG><a name="[18d]"></a>UserLcdBlinkProc</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UserLcdBlinkProc &rArr; dispOFF &rArr; W1622_byte &rArr; W1622_q &rArr; SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispOFF
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dispON
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanTimerProc
</UL>

<P><STRONG><a name="[162]"></a>LCD_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LCD_init &rArr; HT1622_Init &rArr; Sendcmd &rArr; SendBit_HL &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1622_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleandisp
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
</UL>

<P><STRONG><a name="[be]"></a>LCD_display</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, wm_lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_display &rArr; Show_date &rArr; show8num &rArr; dispOFF &rArr; W1622_byte &rArr; W1622_q &rArr; SendBit_LH &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_time
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexToDec
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_date
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_time
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_time_flag
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_console_task.o(.text)
</UL>
<P><STRONG><a name="[190]"></a>WriteRTC_Enable</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, wm_exrtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteRTC_Enable &rArr; tls_i2c_wait_ack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_write_byte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_wait_ack
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_stop
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteSerial
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCFlag_WriteDate
</UL>

<P><STRONG><a name="[194]"></a>WriteRTC_Disable</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, wm_exrtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WriteRTC_Disable &rArr; tls_i2c_wait_ack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_write_byte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_wait_ack
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_stop
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteSerial
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCFlag_WriteDate
</UL>

<P><STRONG><a name="[195]"></a>RTC_WriteDate</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, wm_exrtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_WriteDate &rArr; tls_i2c_wait_ack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_write_byte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_wait_ack
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Meter
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exrtc_save
</UL>

<P><STRONG><a name="[196]"></a>RTCFlag_WriteDate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wm_exrtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RTCFlag_WriteDate &rArr; WriteRTC_Disable &rArr; tls_i2c_wait_ack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_write_byte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_wait_ack
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_stop
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRTC_Disable
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRTC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exrtc_save
</UL>

<P><STRONG><a name="[197]"></a>RTC_ReadDate</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, wm_exrtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_ReadDate &rArr; tls_i2c_wait_ack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_write_byte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_wait_ack
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_stop
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exrtc_save
</UL>

<P><STRONG><a name="[199]"></a>RTCFlag_ReadDate</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, wm_exrtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTCFlag_ReadDate &rArr; tls_i2c_wait_ack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_write_byte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_wait_ack
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_stop
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exrtc_save
</UL>

<P><STRONG><a name="[19a]"></a>I2CWriteSerial</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, wm_exrtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_write_byte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_wait_ack
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_stop
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRTC_Disable
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRTC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrINT
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetFrq
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Alarm
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_CountDown
</UL>

<P><STRONG><a name="[19b]"></a>I2CReadSerial</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, wm_exrtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_write_byte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_wait_ack
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_stop
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_read_byte
</UL>

<P><STRONG><a name="[19c]"></a>Set_CountDown</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, wm_exrtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteSerial
</UL>

<P><STRONG><a name="[19d]"></a>Set_Alarm</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wm_exrtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteSerial
</UL>

<P><STRONG><a name="[19e]"></a>SetFrq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_exrtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteSerial
</UL>

<P><STRONG><a name="[19f]"></a>ClrINT</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_exrtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteSerial
</UL>

<P><STRONG><a name="[1a0]"></a>Save_time</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wm_exrtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Save_time &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; tls_os_time_delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exrtc_save
</UL>

<P><STRONG><a name="[18e]"></a>Read_time</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wm_exrtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Read_time &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; tls_i2c_wait_ack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exrtc_save
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display
</UL>

<P><STRONG><a name="[bf]"></a>exrtc_save</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, wm_exrtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = exrtc_save &rArr; Save_time &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; tls_os_time_delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_time
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCFlag_ReadDate
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadDate
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCFlag_WriteDate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteDate
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_time
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_console_task.o(.text)
</UL>
<P><STRONG><a name="[1a3]"></a>AT24CXX_ReadOneByte</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, wm_e2prom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT24CXX_ReadOneByte &rArr; tls_i2c_wait_ack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_write_byte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_wait_ack
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Meter
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadLenByte
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>

<P><STRONG><a name="[1a4]"></a>AT24CXX_WriteOneByte</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wm_e2prom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AT24CXX_WriteOneByte &rArr; tls_os_time_delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_write_byte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_wait_ack
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_stop
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Meter
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteLenByte
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>

<P><STRONG><a name="[1a5]"></a>AT24CXX_WriteLenByte</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, wm_e2prom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>

<P><STRONG><a name="[1a6]"></a>AT24CXX_ReadLenByte</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, wm_e2prom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[1a7]"></a>AT24CXX_Check</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wm_e2prom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AT24CXX_Check &rArr; AT24CXX_WriteOneByte &rArr; tls_os_time_delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_init
</UL>

<P><STRONG><a name="[1a2]"></a>AT24CXX_Read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm_e2prom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; tls_i2c_wait_ack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterErrorRegPara_init
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Meter
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_time
</UL>

<P><STRONG><a name="[1a1]"></a>AT24CXX_Write</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm_e2prom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; tls_os_time_delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibCurrent
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Meter
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibVoltage
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_time
</UL>

<P><STRONG><a name="[161]"></a>AT24CXX_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wm_e2prom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AT24CXX_init &rArr; AT24CXX_Check &rArr; AT24CXX_WriteOneByte &rArr; tls_os_time_delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2c_sda_config
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2c_scl_config
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
</UL>

<P><STRONG><a name="[160]"></a>UserLedInit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UserLedInit &rArr; tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
</UL>

<P><STRONG><a name="[1ab]"></a>UserLedCtrl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserLedOnOff
</UL>

<P><STRONG><a name="[1ac]"></a>UserLedGetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserLedOnOff
</UL>

<P><STRONG><a name="[1ad]"></a>UserLedOnOff</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_led.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserLedGetStatus
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserLedCtrl
</UL>

<P><STRONG><a name="[1b1]"></a>Uart1Init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, wm_uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = Uart1Init &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart1_tx_config
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart1_rx_config
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_parity
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_baud_rate
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_rx_callback_register
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1TaskProc
</UL>

<P><STRONG><a name="[c0]"></a>Uart1TaskProc</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, wm_uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = Uart1TaskProc &rArr; Uart1Init &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVoltage
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter_init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibVoltage
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_console_task.o(.text)
</UL>
<P><STRONG><a name="[163]"></a>CreateWifiTask</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, wm_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = CreateWifiTask &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_auto_connect_flag
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
</UL>

<P><STRONG><a name="[1be]"></a>Data_Handle</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, wm_datahandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Data_Handle &rArr; Write_Meter &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; tls_os_time_delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Meter
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Meter
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SockRcvTaskProc
</UL>

<P><STRONG><a name="[1bc]"></a>ReadVoltage</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wm_meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ReadVoltage &rArr; ReadV9261fReg &rArr; tls_uart_write &rArr; tls_uart_write_async &rArr; tls_uart_tx_chars_start &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadV9261fReg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1TaskProc
</UL>

<P><STRONG><a name="[1db]"></a>ReadCurrent</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wm_meter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadV9261fReg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1dc]"></a>ReadEnergy</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wm_meter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadV9261fReg
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1bb]"></a>CalibVoltage</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, wm_meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CalibVoltage &rArr; ReadV9261fReg &rArr; tls_uart_write &rArr; tls_uart_write_async &rArr; tls_uart_tx_chars_start &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadV9261fReg
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1TaskProc
</UL>

<P><STRONG><a name="[1e0]"></a>CalibCurrent</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, wm_meter.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadV9261fReg
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1ba]"></a>Meter_init</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, wm_meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Meter_init &rArr; MeterErrorRegPara_init &rArr; WriteV9261fReg &rArr; tls_uart_write &rArr; tls_uart_write_async &rArr; tls_uart_tx_chars_start &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterErrorRegPara_init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteV9261fReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1TaskProc
</UL>

<P><STRONG><a name="[1ee]"></a>DHCPS_GetIpByMac</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DHCPS_GetIpByMac
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcps_getip
</UL>

<P><STRONG><a name="[545]"></a>DHCPS_SetDns</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dhcp_server.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcps_setdns
</UL>

<P><STRONG><a name="[1f0]"></a>DHCPS_RecvCb</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = DHCPS_RecvCb &rArr; _DhcpClientSMEHandle &rArr; _DHCPOfferGenAndSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DhcpClientSMEHandle
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPNakGenAndSend
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientTableLookup
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_mac
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_authed_sta_info
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp_server.o(.text)
</UL>
<P><STRONG><a name="[1f7]"></a>DHCPS_ClientDelete</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, dhcp_server.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[1f8]"></a>DHCPS_Start</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DHCPS_Start &rArr; sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_p
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcps_start
</UL>

<P><STRONG><a name="[1fc]"></a>DHCPS_Stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DHCPS_Stop &rArr; sys_untimeout_p &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout_p
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcps_stop
</UL>

<P><STRONG><a name="[201]"></a>DNSS_RecvCb</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, dns_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = DNSS_RecvCb &rArr; _DNSAnswerGenAndSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSNameErrGenAndSend
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSAnswerGenAndSend
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_netif
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dns_server.o(.text)
</UL>
<P><STRONG><a name="[203]"></a>DNSS_Config</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dns_server.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[204]"></a>DNSS_Start</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, dns_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DNSS_Start &rArr; udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_recv
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dnss_start
</UL>

<P><STRONG><a name="[205]"></a>DNSS_Stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dns_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DNSS_Stop &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dnss_stop
</UL>

<P><STRONG><a name="[afd]"></a>tls_wifi_oneshot_result_cb_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_wifi_oneshot.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>tls_wifi_get_oneshot_ssidpwd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>

<P><STRONG><a name="[208]"></a>tls_wifi_get_oneshot_customdata</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custdata_proc
</UL>

<P><STRONG><a name="[209]"></a>tls_wifi_wait_disconnect</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_get_ethif
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_disconnect
</UL>

<P><STRONG><a name="[20b]"></a>tls_oneshot_data_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tls_oneshot_data_clear &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
</UL>

<P><STRONG><a name="[20c]"></a>tls_oneshot_scan_start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tls_oneshot_scan_start &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_start_oneshot
</UL>

<P><STRONG><a name="[c9]"></a>tls_oneshot_handshake_timeout</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tls_oneshot_handshake_timeout &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_wifi_oneshot.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>tls_oneshot_switch_channel_tim_start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tls_oneshot_switch_channel_tim_start &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_wifi_oneshot.o(.text)
</UL>
<P><STRONG><a name="[c7]"></a>wm_oneshot_netif_status_event</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wm_oneshot_netif_status_event &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_wifi_oneshot.o(.text)
</UL>
<P><STRONG><a name="[249]"></a>tls_wifi_get_oneshot_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_send_reply
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_oneshot
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_status_changed
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_enter
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pbreq_recv
</UL>

<P><STRONG><a name="[20d]"></a>wm_oneshot_send_mac</STRONG> (Thumb, 98 bytes, Stack size 104 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = wm_oneshot_send_mac &rArr; tls_socket_create &rArr; net_alloc_socket &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_send
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_create
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_close
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_mac_addr
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[213]"></a>tls_wifi_clear_oneshot_data</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_wifi_clear_oneshot_data
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_init_data
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_stop_clear_data
</UL>

<P><STRONG><a name="[214]"></a>tls_oneshot_stop_clear_data</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tls_oneshot_stop_clear_data &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_scan_result_cb_register
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_data_recv_cb_register
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_airkiss_stop
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_clear_oneshot_data
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_clear_oneshot_info
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[21a]"></a>tls_wifi_oneshot_connect</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = tls_wifi_oneshot_connect &rArr; tls_wifi_connect &rArr; wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_probe
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_broadcast
</UL>

<P><STRONG><a name="[21c]"></a>tls_wifi_customdata_resolve</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tls_wifi_customdata_resolve &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; tls_oneshot_task_create &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_udp
</UL>

<P><STRONG><a name="[21e]"></a>tls_wifi_pwd_resolve</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tls_wifi_pwd_resolve &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_udp
</UL>

<P><STRONG><a name="[220]"></a>tls_wifi_ssid_resolve</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tls_wifi_ssid_resolve &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_udp
</UL>

<P><STRONG><a name="[221]"></a>tls_wifi_oneshotinfo_resolve_udp</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = tls_wifi_oneshotinfo_resolve_udp &rArr; tls_wifi_customdata_resolve &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; tls_oneshot_task_create &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc8
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_ssid_resolve
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pwd_resolve
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_customdata_resolve
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_broadcast
</UL>

<P><STRONG><a name="[229]"></a>tls_wifi_oneshot_packet_head_resolve</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tls_wifi_oneshot_packet_head_resolve
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_broadcast
</UL>

<P><STRONG><a name="[225]"></a>tls_oneshot_switch_channel_tim_stop</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tls_oneshot_switch_channel_tim_stop &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_airkiss_recv
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_broadcast
</UL>

<P><STRONG><a name="[226]"></a>tls_wifi_lsd_broadcast</STRONG> (Thumb, 786 bytes, Stack size 48 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = tls_wifi_lsd_broadcast &rArr; tls_wifi_oneshot_connect_by_ssid_bssid &rArr; tls_wifi_connect_by_ssid_bssid &rArr; wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_ssid_bssid
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_switch_channel_tim_stop
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_packet_head_resolve
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_udp
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_DA
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_SA
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_compare_mac_addr
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_dataframe_recv
</UL>

<P><STRONG><a name="[22b]"></a>tls_oneshot_switch_channel_tim_temp_stop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tls_oneshot_switch_channel_tim_temp_stop &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_airkiss_recv
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot
</UL>

<P><STRONG><a name="[22c]"></a>tls_wifi_lsd_oneshot</STRONG> (Thumb, 994 bytes, Stack size 56 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = tls_wifi_lsd_oneshot &rArr; tls_wifi_oneshot_connect_by_ssid_bssid &rArr; tls_wifi_connect_by_ssid_bssid &rArr; wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decode_new_oneshot_data
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_ssid_bssid
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_switch_channel_tim_temp_stop
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_switch_channel_tim_stop
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_clear_oneshot_data
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_is_zero_ether_addr
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_DA
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_SA
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_compare_mac_addr
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_compare_ether_addr
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_dataframe_recv
</UL>

<P><STRONG><a name="[230]"></a>tls_wifi_oneshot_connect_by_bssid</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = tls_wifi_oneshot_connect_by_bssid &rArr; tls_wifi_connect_by_bssid &rArr; wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_bssid
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_probe
</UL>

<P><STRONG><a name="[232]"></a>tls_wifi_decrypt_data</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tls_wifi_decrypt_data &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; tls_oneshot_task_create &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_probe
</UL>

<P><STRONG><a name="[233]"></a>tls_wifi_lsd_probe</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = tls_wifi_lsd_probe &rArr; tls_wifi_oneshot_connect_by_ssid_bssid &rArr; tls_wifi_connect_by_ssid_bssid &rArr; wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_ssid_bssid
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decrypt_data
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_bssid
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_is_zero_ether_addr
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_dataframe_recv
</UL>

<P><STRONG><a name="[234]"></a>tls_wifi_dataframe_recv</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = tls_wifi_dataframe_recv &rArr; tls_wifi_lsd_oneshot &rArr; tls_wifi_oneshot_connect_by_ssid_bssid &rArr; tls_wifi_connect_by_ssid_bssid &rArr; wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_airkiss_recv
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_probe
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_broadcast
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_wifi_oneshot.o(.text)
</UL>
<P><STRONG><a name="[236]"></a>tls_oneshot_scan_result_deal</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tls_oneshot_scan_result_deal &rArr; tls_wifi_get_scan_rslt &rArr; tls_wl_if_get_scan_res &rArr; ieee80211_bss_flush &rArr; ieee80211_bss_del &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_scan_rslt
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[238]"></a>tls_oneshot_scan_result_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tls_oneshot_scan_result_cb &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_wifi_oneshot.o(.text)
</UL>
<P><STRONG><a name="[239]"></a>tls_oneshot_task_handle</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = tls_oneshot_task_handle &rArr; wm_oneshot_send_mac &rArr; tls_socket_create &rArr; net_alloc_socket &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_receive
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_send_reply
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_listen_mode
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_scan_result_cb_register
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_scan
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_data_recv_cb_register
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_airkiss_change_channel
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_remove_status_event
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_airkiss_start
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_scan_result_cb
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_scan_result_deal
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_stop_clear_data
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_oneshot_send_mac
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_change_chanel
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_wifi_oneshot.o(.text)
</UL>
<P><STRONG><a name="[241]"></a>tls_oneshot_task_create</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tls_oneshot_task_create &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_start_oneshot
</UL>

<P><STRONG><a name="[242]"></a>tls_oneshot_init_data</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tls_oneshot_init_data &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_clear_oneshot_data
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_clear_oneshot_info
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_start_oneshot
</UL>

<P><STRONG><a name="[243]"></a>tls_wifi_start_oneshot</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = tls_wifi_start_oneshot &rArr; tls_oneshot_task_create &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_init_data
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_create
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_scan_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
</UL>

<P><STRONG><a name="[1ce]"></a>tls_wifi_set_oneshot_flag</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; tls_oneshot_task_create &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_listen_mode
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_restore_bcast_mac_filter
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_disconnect
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_start_oneshot
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_data_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiTaskProc
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_proc
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_oneshot
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_finish
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_ssid_bssid
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decrypt_data
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_bssid
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_customdata_resolve
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_exit
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_enter
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
</UL>

<P><STRONG><a name="[22a]"></a>tls_wifi_oneshot_connect_by_ssid_bssid</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = tls_wifi_oneshot_connect_by_ssid_bssid &rArr; tls_wifi_connect_by_ssid_bssid &rArr; wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_probe
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_broadcast
</UL>

<P><STRONG><a name="[246]"></a>tls_wifi_bssid_resolve</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, wm_wifi_oneshot.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[afe]"></a>tls_wifi_lsd_set_syncode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_wifi_oneshot.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>tls_oneshot_is_ssid_bssid_match</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tls_oneshot_is_ssid_bssid_match &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_finish
</UL>

<P><STRONG><a name="[aff]"></a>tls_wifi_set_oneshot_config_mode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_wifi_oneshot.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>oneshot_airkiss_send_reply</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, wm_oneshot_airkiss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = oneshot_airkiss_send_reply &rArr; sendto &rArr; lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_flag
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiTaskProc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[23e]"></a>tls_oneshot_airkiss_change_channel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_oneshot_airkiss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_oneshot_airkiss_change_channel &rArr; airkiss_change_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_change_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[235]"></a>tls_airkiss_recv</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, wm_oneshot_airkiss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = tls_airkiss_recv &rArr; oneshot_airkiss_finish &rArr; tls_wifi_connect_by_ssid_bssid &rArr; wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_bcast_mac_filter
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_recv
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_finish
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_restore_bcast_mac_filter
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_switch_channel_tim_temp_stop
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_switch_channel_tim_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_dataframe_recv
</UL>

<P><STRONG><a name="[253]"></a>airkiss_lan_task_create</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, wm_oneshot_airkiss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = airkiss_lan_task_create &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_airkiss_start
</UL>

<P><STRONG><a name="[23c]"></a>tls_airkiss_start</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wm_oneshot_airkiss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tls_airkiss_start &rArr; airkiss_lan_task_create &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_lan_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[219]"></a>tls_airkiss_stop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_oneshot_airkiss.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_stop_clear_data
</UL>

<P><STRONG><a name="[b00]"></a>tls_get_fwup_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[324]"></a>tls_cmd_get_ver</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwv_proc
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qver_proc
</UL>

<P><STRONG><a name="[b01]"></a>tls_cmd_get_hw_ver</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[b02]"></a>tls_cmd_set_hw_ver</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[b03]"></a>tls_set_fwup_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>tls_cmd_get_auto_mode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_auto_mode &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_close_default_socket
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_create_default_socket
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_ps
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_err
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
</UL>

<P><STRONG><a name="[b04]"></a>tls_cmd_get_socket_cfg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[b05]"></a>tls_cmd_set_net_up</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[b06]"></a>tls_cmd_get_net_up</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>tls_cmd_init_socket_cfg</STRONG> (Thumb, 112 bytes, Stack size 56 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = tls_cmd_init_socket_cfg &rArr; string_to_ipaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtodec
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_ipaddr
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
</UL>

<P><STRONG><a name="[25d]"></a>tls_cmd_reset_sys</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tls_cmd_reset_sys &rArr; tls_os_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;z_proc
</UL>

<P><STRONG><a name="[25e]"></a>tls_cmd_pmtf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = tls_cmd_pmtf &rArr; tls_param_to_flash &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmtf_proc
</UL>

<P><STRONG><a name="[260]"></a>tls_cmd_reset_flash</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_default
</UL>

<P><STRONG><a name="[262]"></a>tls_cmd_ps</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tls_cmd_ps &rArr; tls_wl_if_standby &rArr; tls_os_timer_change &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_auto_mode
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_standby
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sleep
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_ps
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ents_proc
</UL>

<P><STRONG><a name="[266]"></a>tls_hostif_get_tx_msg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_loopback
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_tx_event_msg
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_recv
</UL>

<P><STRONG><a name="[267]"></a>tls_hostif_get_tx_event_msg</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_tx_msg
</UL>

<P><STRONG><a name="[b07]"></a>tls_get_hostif</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[268]"></a>tls_hostif_process_cmdrsp</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tls_hostif_process_cmdrsp &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_tx_msg
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_remain_len
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_http_client_err_callback
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_http_client_recv_callback
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_scan_cmplt
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_rsp
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_fwup_rsp
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_rpt_handle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx
</UL>

<P><STRONG><a name="[26c]"></a>tls_hostif_fill_event_hdr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>

<P><STRONG><a name="[26b]"></a>tls_hostif_fill_hdr</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tls_hostif_fill_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_socket_recv
</UL>

<P><STRONG><a name="[26a]"></a>tls_hostif_send_event</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tls_hostif_send_event &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_fill_hdr
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_fill_event_hdr
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_tx_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_dis
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_join
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_conn
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tx_fail
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_crc_err
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_sta_leave
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_sta_join
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_linkdown
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_failed
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_success
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_init_cmplt
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_scan_cmplt
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_net_status_changed
</UL>

<P><STRONG><a name="[26d]"></a>tls_hostif_send_event_scan_cmplt</STRONG> (Thumb, 398 bytes, Stack size 64 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tls_hostif_send_event_scan_cmplt &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_wscan_cmplt
</UL>

<P><STRONG><a name="[26f]"></a>hostif_wscan_cmplt</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = hostif_wscan_cmplt &rArr; tls_wifi_get_scan_rslt &rArr; tls_wl_if_get_scan_res &rArr; ieee80211_bss_flush &rArr; ieee80211_bss_del &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_scan_cmplt
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_scan_rslt
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[271]"></a>tls_cmd_scan</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_cmd_scan &rArr; tls_wifi_scan &rArr; supplicant_send_event &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_scan_result_cb_register
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wscan_proc
</UL>

<P><STRONG><a name="[272]"></a>tls_cmd_get_key</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_cmd_get_key &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_proc
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join_net
</UL>

<P><STRONG><a name="[273]"></a>tls_cmd_get_ssid</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tls_cmd_get_ssid &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssid_proc
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join_net
</UL>

<P><STRONG><a name="[274]"></a>tls_cmd_get_bssid</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_cmd_get_bssid &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntparam_proc
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssid_proc
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join_net
</UL>

<P><STRONG><a name="[275]"></a>tls_cmd_join_net</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = tls_cmd_join_net &rArr; tls_wifi_connect &rArr; wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_bssid
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_ssid
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_key
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_bssid
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join
</UL>

<P><STRONG><a name="[276]"></a>tls_cmd_get_dnsname</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_dnsname &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_proc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_net
</UL>

<P><STRONG><a name="[277]"></a>tls_cmd_get_softap_ip_info</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tls_cmd_get_softap_ip_info &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_nip_proc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_net
</UL>

<P><STRONG><a name="[278]"></a>tls_cmd_get_softap_key</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_cmd_get_softap_key &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_key_proc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_net
</UL>

<P><STRONG><a name="[279]"></a>tls_cmd_get_softap_channel</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_softap_channel &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_chl_proc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_net
</UL>

<P><STRONG><a name="[27a]"></a>tls_cmd_get_softap_encrypt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_softap_encrypt &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_encry_proc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_net
</UL>

<P><STRONG><a name="[27b]"></a>tls_cmd_get_softap_ssid</STRONG> (Thumb, 48 bytes, Stack size 48 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tls_cmd_get_softap_ssid &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_ssid_proc
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_net
</UL>

<P><STRONG><a name="[27c]"></a>tls_cmd_create_net</STRONG> (Thumb, 138 bytes, Stack size 72 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = tls_cmd_create_net &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_ssid
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_encrypt
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_channel
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_key
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_ip_info
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_dnsname
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join
</UL>

<P><STRONG><a name="[b08]"></a>tls_cmd_create_ibss_net</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[27e]"></a>tls_cmd_get_wireless_mode</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tls_cmd_get_wireless_mode &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wprt_proc
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join
</UL>

<P><STRONG><a name="[27f]"></a>tls_cmd_join</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = tls_cmd_join &rArr; tls_cmd_join_net &rArr; tls_wifi_connect &rArr; wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_auto_connect_flag
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_wireless_mode
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_net
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join_net
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjoin_proc
</UL>

<P><STRONG><a name="[280]"></a>tls_cmd_disconnect_network</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = tls_cmd_disconnect_network &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_auto_connect_flag
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_disconnect
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updm_proc
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wleav_proc
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_lpinit
</UL>

<P><STRONG><a name="[282]"></a>tls_cmd_get_link_status</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tls_cmd_get_link_status &rArr; tls_netif_get_ethif
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_get_ethif
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lkstt_proc
</UL>

<P><STRONG><a name="[b09]"></a>tls_cmd_wps_start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[283]"></a>tls_cmd_set_wireless_mode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tls_cmd_set_wireless_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wprt_proc
</UL>

<P><STRONG><a name="[284]"></a>tls_cmd_set_ssid</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = tls_cmd_set_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssid_proc
</UL>

<P><STRONG><a name="[285]"></a>tls_cmd_set_key</STRONG> (Thumb, 98 bytes, Stack size 88 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = tls_cmd_set_key &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_proc
</UL>

<P><STRONG><a name="[286]"></a>tls_cmd_set_encrypt</STRONG> (Thumb, 60 bytes, Stack size 88 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = tls_cmd_set_encrypt &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encry_proc
</UL>

<P><STRONG><a name="[287]"></a>tls_cmd_get_encrypt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_encrypt &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encry_proc
</UL>

<P><STRONG><a name="[288]"></a>tls_cmd_set_bssid</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_cmd_set_bssid &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bssid_proc
</UL>

<P><STRONG><a name="[289]"></a>tls_cmd_get_original_ssid</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_original_ssid &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntparam_proc
</UL>

<P><STRONG><a name="[28a]"></a>tls_cmd_get_original_key</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_original_key &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntparam_proc
</UL>

<P><STRONG><a name="[28b]"></a>tls_cmd_set_hide_ssid</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_cmd_set_hide_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brdssid_proc
</UL>

<P><STRONG><a name="[28c]"></a>tls_cmd_get_hide_ssid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_hide_ssid &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brdssid_proc
</UL>

<P><STRONG><a name="[28d]"></a>tls_cmd_set_channel</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = tls_cmd_set_channel &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chl_proc
</UL>

<P><STRONG><a name="[28e]"></a>tls_cmd_get_channel</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_cmd_get_channel &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chl_proc
</UL>

<P><STRONG><a name="[28f]"></a>tls_cmd_set_channellist</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_cmd_set_channellist &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chll_proc
</UL>

<P><STRONG><a name="[290]"></a>tls_cmd_get_channellist</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_channellist &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chll_proc
</UL>

<P><STRONG><a name="[291]"></a>tls_cmd_set_region</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_cmd_set_region &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wreg_proc
</UL>

<P><STRONG><a name="[292]"></a>tls_cmd_get_region</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_region &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wreg_proc
</UL>

<P><STRONG><a name="[293]"></a>tls_cmd_set_hw_mode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_cmd_set_hw_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbgr_proc
</UL>

<P><STRONG><a name="[294]"></a>tls_cmd_get_hw_mode</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_cmd_get_hw_mode &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wbgr_proc
</UL>

<P><STRONG><a name="[295]"></a>tls_cmd_set_adhoc_create_mode</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_cmd_set_adhoc_create_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watc_proc
</UL>

<P><STRONG><a name="[296]"></a>tls_cmd_get_adhoc_create_mode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_adhoc_create_mode &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watc_proc
</UL>

<P><STRONG><a name="[297]"></a>tls_cmd_set_wl_ps_mode</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_cmd_set_wl_ps_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpsm_proc
</UL>

<P><STRONG><a name="[298]"></a>tls_cmd_get_wl_ps_mode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_wl_ps_mode &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpsm_proc
</UL>

<P><STRONG><a name="[299]"></a>tls_cmd_set_roaming_mode</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_cmd_set_roaming_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warm_proc
</UL>

<P><STRONG><a name="[29a]"></a>tls_cmd_get_roaming_mode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_roaming_mode &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warm_proc
</UL>

<P><STRONG><a name="[b0a]"></a>tls_cmd_set_wps_params</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[b0b]"></a>tls_cmd_get_wps_params</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>tls_cmd_get_ip_info</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tls_cmd_get_ip_info &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nip_proc
</UL>

<P><STRONG><a name="[29c]"></a>tls_cmd_set_ip_info</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = tls_cmd_set_ip_info &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_get_ethif
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get_updp_mode
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_set_addr
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcp_stop
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcp_start
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nip_proc
</UL>

<P><STRONG><a name="[2a1]"></a>tls_cmd_set_work_mode</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_cmd_set_work_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atm_proc
</UL>

<P><STRONG><a name="[2a2]"></a>tls_cmd_get_work_mode</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_cmd_get_work_mode &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atm_proc
</UL>

<P><STRONG><a name="[2a3]"></a>tls_cmd_get_hostif_mode</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_hostif_mode &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portm_proc
</UL>

<P><STRONG><a name="[2a4]"></a>tls_cmd_set_hostif_mode</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_cmd_set_hostif_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portm_proc
</UL>

<P><STRONG><a name="[2a5]"></a>tls_cmd_set_default_socket_params</STRONG> (Thumb, 106 bytes, Stack size 56 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = tls_cmd_set_default_socket_params &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get_updp_mode
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atrm_proc
</UL>

<P><STRONG><a name="[2a6]"></a>tls_cmd_get_default_socket_params</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_cmd_get_default_socket_params
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atrm_proc
</UL>

<P><STRONG><a name="[2a7]"></a>tls_cmd_get_uart_params</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_cmd_get_uart_params &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_proc
</UL>

<P><STRONG><a name="[b0c]"></a>tls_cmd_get_uart1_port</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>tls_cmd_set_uart_params</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = tls_cmd_set_uart_params &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_check_baudrate
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get_updp_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_proc
</UL>

<P><STRONG><a name="[31d]"></a>tls_cmd_get_atlt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atlt_proc
</UL>

<P><STRONG><a name="[2aa]"></a>tls_cmd_set_atlt</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_cmd_set_atlt &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atlt_proc
</UL>

<P><STRONG><a name="[2ab]"></a>tls_cmd_get_atpt</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_cmd_get_atpt &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpt_proc
</UL>

<P><STRONG><a name="[2ac]"></a>tls_cmd_set_dnsname</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tls_cmd_set_dnsname &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_proc
</UL>

<P><STRONG><a name="[2ad]"></a>tls_cmd_set_atpt</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_cmd_set_atpt &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atpt_proc
</UL>

<P><STRONG><a name="[2ae]"></a>tls_cmd_get_espc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_espc &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espc_proc
</UL>

<P><STRONG><a name="[2af]"></a>tls_cmd_set_espc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_cmd_set_espc &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espc_proc
</UL>

<P><STRONG><a name="[2b0]"></a>tls_cmd_get_espt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_espt &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espt_proc
</UL>

<P><STRONG><a name="[2b1]"></a>tls_cmd_set_espt</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_cmd_set_espt &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;espt_proc
</UL>

<P><STRONG><a name="[2b2]"></a>tls_cmd_get_iom</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_iom &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_proc
</UL>

<P><STRONG><a name="[2b3]"></a>tls_cmd_set_iom</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_cmd_set_iom &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iom_proc
</UL>

<P><STRONG><a name="[2b4]"></a>tls_cmd_get_cmdm</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_cmdm &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdm_proc
</UL>

<P><STRONG><a name="[2b5]"></a>tls_cmd_set_cmdm</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_cmd_set_cmdm &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmdm_proc
</UL>

<P><STRONG><a name="[2b6]"></a>tls_cmd_set_oneshot</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
</UL>

<P><STRONG><a name="[2b7]"></a>tls_cmd_get_oneshot</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_cmd_get_oneshot
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_proc
</UL>

<P><STRONG><a name="[2b8]"></a>tls_cmd_set_sha1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>

<P><STRONG><a name="[2b9]"></a>tls_cmd_get_sha1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>

<P><STRONG><a name="[2ba]"></a>tls_cmd_set_wps_pin</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tls_cmd_set_wps_pin &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwps_proc
</UL>

<P><STRONG><a name="[2bb]"></a>tls_cmd_get_wps_pin</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_wps_pin &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwps_proc
</UL>

<P><STRONG><a name="[2bc]"></a>tls_cmd_get_pass</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_pass &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pass_proc
</UL>

<P><STRONG><a name="[2bd]"></a>tls_cmd_set_pass</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tls_cmd_set_pass &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pass_proc
</UL>

<P><STRONG><a name="[2be]"></a>tls_cmd_get_warc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_warc &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warc_proc
</UL>

<P><STRONG><a name="[2bf]"></a>tls_cmd_set_warc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_cmd_set_warc &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;warc_proc
</UL>

<P><STRONG><a name="[2c0]"></a>tls_cmd_set_webs</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_cmd_set_webs &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webs_proc
</UL>

<P><STRONG><a name="[2c1]"></a>tls_cmd_get_webs</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_webs &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webs_proc
</UL>

<P><STRONG><a name="[b0d]"></a>tls_cmd_set_dbg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[2c2]"></a>tls_cmd_wr_flash</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, wm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[b0e]"></a>tls_cmd_register_get_uart1_port</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[b0f]"></a>tls_cmd_register_set_uart1_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[b10]"></a>tls_cmd_get_set_uart1_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[b11]"></a>tls_cmd_register_set_uart1_sock_param</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[b12]"></a>tls_cmd_get_set_uart1_sock_param</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[b13]"></a>tls_cmd_register_set_uart0_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[b14]"></a>tls_cmd_get_set_uart0_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[2c5]"></a>tls_cmd_set_softap_ssid</STRONG> (Thumb, 72 bytes, Stack size 80 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = tls_cmd_set_softap_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_ssid_proc
</UL>

<P><STRONG><a name="[2c6]"></a>tls_cmd_set_softap_key</STRONG> (Thumb, 72 bytes, Stack size 80 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = tls_cmd_set_softap_key &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_key_proc
</UL>

<P><STRONG><a name="[2c7]"></a>tls_cmd_set_softap_encrypt</STRONG> (Thumb, 58 bytes, Stack size 88 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = tls_cmd_set_softap_encrypt &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_encry_proc
</UL>

<P><STRONG><a name="[2c8]"></a>tls_cmd_set_softap_channel</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_cmd_set_softap_channel &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_chl_proc
</UL>

<P><STRONG><a name="[2c9]"></a>tls_cmd_set_softap_hw_mode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_cmd_set_softap_hw_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_wbgr_proc
</UL>

<P><STRONG><a name="[2ca]"></a>tls_cmd_get_softap_hw_mode</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_cmd_get_softap_hw_mode &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_wbgr_proc
</UL>

<P><STRONG><a name="[2cb]"></a>tls_cmd_set_softap_ip_info</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = tls_cmd_set_softap_ip_info &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_nip_proc
</UL>

<P><STRONG><a name="[2cc]"></a>tls_cmd_get_softap_link_status</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_cmd_get_softap_link_status
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_lkstt_proc
</UL>

<P><STRONG><a name="[2cd]"></a>tls_cmd_get_sta_detail</STRONG> (Thumb, 156 bytes, Stack size 64 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_cmd_get_sta_detail &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_authed_sta_info
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcps_getip
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_proc
</UL>

<P><STRONG><a name="[2d4]"></a>tls_hostif_get_recvmit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_tcp_recv
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_rpt_handle
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_recvmit
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_recvmit
</UL>

<P><STRONG><a name="[2e8]"></a>tls_hostif_fill_cmdrsp_hdr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ricmd_default_proc
</UL>

<P><STRONG><a name="[2cf]"></a>free_tx_msg_buffer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = free_tx_msg_buffer &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_tx_msg
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_send_tx_msg
</UL>

<P><STRONG><a name="[2d0]"></a>tls_hostif_atcmd_loopback</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tls_hostif_atcmd_loopback &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_tx_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
</UL>

<P><STRONG><a name="[2d1]"></a>atcmd_ok_resp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = atcmd_ok_resp &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_exec
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
</UL>

<P><STRONG><a name="[2d2]"></a>at_format_func</STRONG> (Thumb, 4520 bytes, Stack size 160 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = at_format_func &rArr; atcmd_ok_resp &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_ok_resp
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_recvmit
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_litepoint_test_get_totalsnd
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rx_litepoint_test_result
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rx_litepoint_pwr_result
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_get_current_update_numer
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_read
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_exec
</UL>

<P><STRONG><a name="[2da]"></a>atcmd_filter_quotation</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = atcmd_filter_quotation &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
</UL>

<P><STRONG><a name="[2db]"></a>at_parse_func</STRONG> (Thumb, 4334 bytes, Stack size 112 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = at_parse_func &rArr; string_to_ipaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_filter_quotation
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtohexarray
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtohex
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtodec
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_uint
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_ipaddr
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr_to_unit
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_digit
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_exec
</UL>

<P><STRONG><a name="[2e2]"></a>atcmd_err_resp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = atcmd_err_resp &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_exec
</UL>

<P><STRONG><a name="[2e3]"></a>tls_hostif_atcmd_exec</STRONG> (Thumb, 344 bytes, Stack size 56 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = tls_hostif_atcmd_exec &rArr; at_parse_func &rArr; string_to_ipaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_err_resp
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_ok_resp
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
</UL>

<P><STRONG><a name="[2e4]"></a>get_first_comma</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_first_comma
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_atcmd_parse
</UL>

<P><STRONG><a name="[2e6]"></a>tls_atcmd_parse</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tls_atcmd_parse &rArr; get_first_comma
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_first_comma
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
</UL>

<P><STRONG><a name="[2e7]"></a>ricmd_default_proc</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ricmd_default_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_fill_cmdrsp_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_ricmd_exec
</UL>

<P><STRONG><a name="[2e9]"></a>ri_format_func</STRONG> (Thumb, 816 bytes, Stack size 72 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ri_format_func &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_unaligned_be16
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_unaligned_le16
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unaligned_le32
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_ricmd_exec
</UL>

<P><STRONG><a name="[2ed]"></a>ri_parse_func</STRONG> (Thumb, 778 bytes, Stack size 88 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ri_parse_func &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_unaligned_le32
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_ricmd_exec
</UL>

<P><STRONG><a name="[2ee]"></a>tls_hostif_ricmd_exec</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tls_hostif_ricmd_exec &rArr; ri_parse_func &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_parse_func
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_format_func
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ricmd_default_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
</UL>

<P><STRONG><a name="[2ef]"></a>tls_hostif_cmd_handler</STRONG> (Thumb, 446 bytes, Stack size 56 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = tls_hostif_cmd_handler &rArr; tls_hostif_atcmd_exec &rArr; at_parse_func &rArr; string_to_ipaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_ricmd_exec
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_atcmd_parse
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_exec
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_loopback
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_fill_hdr
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_atcmd_line
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_rx_cmd
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_ricmd_line
</UL>

<P><STRONG><a name="[b15]"></a>tls_hostif_hdr_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[2f2]"></a>tls_hostif_send_event_port_check</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_dis
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_join
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_conn
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tx_fail
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_crc_err
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_sta_leave
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_sta_join
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_linkdown
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_failed
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_success
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_init_cmplt
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_net_status_changed
</UL>

<P><STRONG><a name="[2f1]"></a>tls_hostif_send_event_init_cmplt</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tls_hostif_send_event_init_cmplt &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_init
</UL>

<P><STRONG><a name="[2f3]"></a>tls_hostif_send_event_wjoin_success</STRONG> (Thumb, 136 bytes, Stack size 64 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tls_hostif_send_event_wjoin_success &rArr; tls_wifi_get_current_bss &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_current_bss
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_net_status_changed
</UL>

<P><STRONG><a name="[2f5]"></a>tls_hostif_send_event_wjoin_failed</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tls_hostif_send_event_wjoin_failed &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_net_status_changed
</UL>

<P><STRONG><a name="[2f6]"></a>tls_hostif_send_event_linkdown</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tls_hostif_send_event_linkdown &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_net_status_changed
</UL>

<P><STRONG><a name="[2f7]"></a>tls_hostif_send_event_sta_join</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>

<P><STRONG><a name="[2f8]"></a>tls_hostif_send_event_sta_leave</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>

<P><STRONG><a name="[2f9]"></a>tls_hostif_send_event_crc_err</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>

<P><STRONG><a name="[2fa]"></a>tls_hostif_send_event_tx_fail</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>

<P><STRONG><a name="[2fb]"></a>tls_hostif_send_event_tcp_conn</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_hostif_send_event_tcp_conn &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_state_changed_RICMD
</UL>

<P><STRONG><a name="[2fc]"></a>tls_hostif_send_event_tcp_join</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tls_hostif_send_event_tcp_join &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_state_changed_RICMD
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_state_changed_ATCMD
</UL>

<P><STRONG><a name="[2fd]"></a>tls_hostif_send_event_tcp_dis</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tls_hostif_send_event_tcp_dis &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_state_changed_RICMD
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_state_changed_ATCMD
</UL>

<P><STRONG><a name="[302]"></a>tls_hostif_tx_timeout</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[2fe]"></a>tls_hostif_task_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tls_hostif_task_init &rArr; tls_wl_task_run &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_run
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_init
</UL>

<P><STRONG><a name="[300]"></a>tls_hostif_init</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = tls_hostif_init &rArr; tls_hostif_task_init &rArr; tls_wl_task_run &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_task_init
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[30b]"></a>tls_hostif_recv_data</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_hostif_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_recv
</UL>

<P><STRONG><a name="[305]"></a>tls_hostif_send_data</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = tls_hostif_send_data &rArr; tls_socket_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_send
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_rx_data
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_net_send
</UL>

<P><STRONG><a name="[308]"></a>tls_cmd_get_socket_status</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_cmd_get_socket_status &rArr; tls_socket_get_status &rArr; get_server_conn
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skstt_proc
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_state
</UL>

<P><STRONG><a name="[30a]"></a>tls_cmd_get_socket_state</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tls_cmd_get_socket_state &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_status
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skrcv_proc
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sksnd_proc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skct_proc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_recv
</UL>

<P><STRONG><a name="[30c]"></a>tls_hostif_create_default_socket</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = tls_hostif_create_default_socket &rArr; tls_socket_create &rArr; net_alloc_socket &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_auto_mode
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_create_tmr
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_create
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_setup
</UL>

<P><STRONG><a name="[30d]"></a>tls_hostif_close_default_socket</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tls_hostif_close_default_socket &rArr; tls_socket_close &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_auto_mode
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_recvmit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_close
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_stop_tmr
</UL>

<P><STRONG><a name="[30f]"></a>tls_cmd_create_socket</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = tls_cmd_create_socket &rArr; tls_socket_create &rArr; net_alloc_socket &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_create
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skct_proc
</UL>

<P><STRONG><a name="[310]"></a>tls_cmd_close_socket</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tls_cmd_close_socket &rArr; tls_socket_close &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_recvmit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_close
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skcls_proc
</UL>

<P><STRONG><a name="[b16]"></a>tls_cmd_get_default_socket</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[31a]"></a>tls_cmd_set_default_socket</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sksnd_proc
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sksdf_proc
</UL>

<P><STRONG><a name="[312]"></a>tls_hostif_set_net_status_callback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
</UL>

<P><STRONG><a name="[313]"></a>tls_hostif_http_client_recv_callback</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_hostif_http_client_recv_callback &rArr; tls_hostif_process_cmdrsp &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[314]"></a>tls_hostif_http_client_err_callback</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_hostif_http_client_err_callback &rArr; tls_hostif_process_cmdrsp &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[0]"></a>z_proc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = z_proc &rArr; tls_cmd_reset_sys &rArr; tls_os_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_reset_sys
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>e_proc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>ents_proc</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ents_proc &rArr; tls_cmd_ps &rArr; tls_wl_if_standby &rArr; tls_os_timer_change &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_ps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>rstf_proc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = rstf_proc &rArr; tls_param_to_default &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_default
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>pmtf_proc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = pmtf_proc &rArr; tls_cmd_pmtf &rArr; tls_param_to_flash &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_pmtf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>ioc_proc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>wjoin_proc</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = wjoin_proc &rArr; tls_cmd_join &rArr; tls_cmd_join_net &rArr; tls_wifi_connect &rArr; wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_current_bss
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>wleav_proc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = wleav_proc &rArr; tls_cmd_disconnect_network &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_disconnect_network
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>wscan_proc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wscan_proc &rArr; tls_cmd_scan &rArr; tls_wifi_scan &rArr; supplicant_send_event &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_scan
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>lkstt_proc</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lkstt_proc &rArr; tls_cmd_get_link_status &rArr; tls_netif_get_ethif
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_link_status
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>entm_proc</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = entm_proc &rArr; tls_irq_enable &rArr; NVIC_Configration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_rx_enable
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_rx_disable
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_disable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>skct_proc</STRONG> (Thumb, 146 bytes, Stack size 80 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = skct_proc &rArr; tls_cmd_create_socket &rArr; tls_socket_create &rArr; net_alloc_socket &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_socket
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_state
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>skstt_proc</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = skstt_proc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_status
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>skcls_proc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = skcls_proc &rArr; tls_cmd_close_socket &rArr; tls_socket_close &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_close_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>sksdf_proc</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sksdf_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_default_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>sksnd_proc</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sksnd_proc &rArr; tls_cmd_get_socket_state &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_default_socket
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>skrcv_proc</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = skrcv_proc &rArr; tls_cmd_get_socket_state &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>skrptm_proc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>sksrcip_proc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sksrcip_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_set_sourceip
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_sourceip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>skghbn_proc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = skghbn_proc &rArr; gethostbyname &rArr; lwip_gethostbyname &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>wprt_proc</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = wprt_proc &rArr; tls_cmd_set_wireless_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_wireless_mode
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_wireless_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>ssid_proc</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = ssid_proc &rArr; tls_cmd_set_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_ssid
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_ssid
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>key_proc</STRONG> (Thumb, 122 bytes, Stack size 88 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = key_proc &rArr; tls_cmd_set_key &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_key
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_key
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>encry_proc</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = encry_proc &rArr; tls_cmd_set_encrypt &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_encrypt
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_encrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>bssid_proc</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = bssid_proc &rArr; tls_cmd_set_bssid &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_bssid
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_bssid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>brdssid_proc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = brdssid_proc &rArr; tls_cmd_set_hide_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_hide_ssid
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_hide_ssid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>cntparam_proc</STRONG> (Thumb, 126 bytes, Stack size 120 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = cntparam_proc &rArr; tls_cmd_get_bssid &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_original_key
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_original_ssid
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_bssid
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>chl_proc</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = chl_proc &rArr; tls_cmd_set_channel &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_channel
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>chll_proc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = chll_proc &rArr; tls_cmd_set_channellist &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_channellist
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_channellist
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>wreg_proc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = wreg_proc &rArr; tls_cmd_set_region &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_region
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_region
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>wbgr_proc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = wbgr_proc &rArr; tls_cmd_set_hw_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_hw_mode
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_hw_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>watc_proc</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = watc_proc &rArr; tls_cmd_set_adhoc_create_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_adhoc_create_mode
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_adhoc_create_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>wpsm_proc</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = wpsm_proc &rArr; tls_cmd_set_wl_ps_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_wl_ps_mode
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_wl_ps_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>warc_proc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = warc_proc &rArr; tls_cmd_set_warc &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_warc
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_warc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>warm_proc</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = warm_proc &rArr; tls_cmd_set_roaming_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_roaming_mode
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_roaming_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>nip_proc</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = nip_proc &rArr; tls_cmd_set_ip_info &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_ip_info
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_ip_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>atm_proc</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = atm_proc &rArr; tls_cmd_set_work_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_work_mode
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_work_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>atrm_proc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = atrm_proc &rArr; tls_cmd_set_default_socket_params &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_default_socket_params
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_default_socket_params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>aolm_proc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>portm_proc</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = portm_proc &rArr; tls_cmd_set_hostif_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_hostif_mode
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_hostif_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>uart_proc</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = uart_proc &rArr; tls_cmd_set_uart_params &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_uart_params
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_uart_params
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>atlt_proc</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = atlt_proc &rArr; tls_cmd_set_atlt &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_atlt
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_atlt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>dns_proc</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = dns_proc &rArr; tls_cmd_set_dnsname &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_dnsname
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_dnsname
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>ddns_proc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>upnp_proc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>dname_proc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>atpt_proc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = atpt_proc &rArr; tls_cmd_set_atpt &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_atpt
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_atpt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>dbg_proc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>espc_proc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = espc_proc &rArr; tls_cmd_set_espc &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_espc
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_espc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>espt_proc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = espt_proc &rArr; tls_cmd_set_espt &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_espt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_espt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>webs_proc</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = webs_proc &rArr; tls_cmd_set_webs &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_webs
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_webs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>iom_proc</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = iom_proc &rArr; tls_cmd_set_iom &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_iom
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_iom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>cmdm_proc</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = cmdm_proc &rArr; tls_cmd_set_cmdm &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_cmdm
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_cmdm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>pass_proc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = pass_proc &rArr; tls_cmd_set_pass &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_pass
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_pass
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>oneshot_proc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = oneshot_proc &rArr; tls_wifi_set_oneshot_flag &rArr; tls_wifi_start_oneshot &rArr; tls_oneshot_task_create &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_oneshot
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>updp_proc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = updp_proc &rArr; tls_param_save_user_default &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set_updp_mode
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_save_user_default
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_load_user
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>httpc_proc</STRONG> (Thumb, 102 bytes, Stack size 72 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = httpc_proc &rArr; t_http_fwup &rArr; http_fwup &rArr; tls_http_client_read_data &rArr; HTTPClientReadData &rArr; HTTPIntrnGetRemoteChunkLength &rArr; HTTPIntrnRecv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_post
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_http_fwup
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>qmac_proc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = qmac_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_mac
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>slist_proc</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = slist_proc &rArr; tls_cmd_get_sta_detail &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_sta_detail
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>softap_lkstt_proc</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = softap_lkstt_proc &rArr; tls_cmd_get_softap_link_status
</UL>
<BR>[Calls]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_link_status
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>softap_ssid_proc</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = softap_ssid_proc &rArr; tls_cmd_set_softap_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_ssid
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_ssid
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>softap_qmac_proc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = softap_qmac_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_mac
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>softap_encry_proc</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = softap_encry_proc &rArr; tls_cmd_set_softap_encrypt &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_encrypt
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_encrypt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>softap_key_proc</STRONG> (Thumb, 120 bytes, Stack size 88 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = softap_key_proc &rArr; tls_cmd_set_softap_key &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_key
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_key
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>softap_chl_proc</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = softap_chl_proc &rArr; tls_cmd_set_softap_channel &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_channel
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>softap_wbgr_proc</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = softap_wbgr_proc &rArr; tls_cmd_set_softap_hw_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_hw_mode
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_hw_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>softap_nip_proc</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = softap_nip_proc &rArr; tls_cmd_set_softap_ip_info &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_ip_info
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_ip_info
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>qver_proc</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = qver_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_ver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>updm_proc</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = updm_proc &rArr; tls_fwup_enter &rArr; tls_wifi_set_psflag &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_disconnect_network
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_get_current_session_id
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_exit
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>updd_proc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = updd_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_get_current_session_id
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_current_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>regr_proc</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = regr_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>regw_proc</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = regw_proc &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>rfr_proc</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rfr_proc &rArr; rf_spi_read
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>rfw_proc</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rfw_proc &rArr; rf_spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>flsr_proc</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = flsr_proc &rArr; tls_fls_read &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>flsw_proc</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = flsw_proc &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>txg_proc</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = txg_proc &rArr; tls_set_tx_gain &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_gain
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_tx_gain
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>mac_proc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = mac_proc &rArr; tls_set_mac_addr &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_mac
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_mac
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_mac_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>hwv_proc</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hwv_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_ver
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>spif_proc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>lpchl_proc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = lpchl_proc &rArr; atcmd_lpinit &rArr; tls_cmd_disconnect_network &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_lpinit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_test_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpchrs_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>lptstr_proc</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = lptstr_proc &rArr; atcmd_lpinit &rArr; tls_cmd_disconnect_network &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_lpinit
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_litepoint_test_start
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptbd_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>lptstp_proc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lptstp_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_txrx_litepoint_test_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>lptstt_proc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>lprstr_proc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = lprstr_proc &rArr; atcmd_lpinit &rArr; tls_cmd_disconnect_network &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_lpinit
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rx_litepoint_test_start
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpchlr_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>lprstp_proc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lprstp_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_txrx_litepoint_test_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>lprstt_proc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>lppstr_proc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>lppstp_proc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>lprfps_proc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>lpchrs_proc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = lpchrs_proc &rArr; lpchl_proc &rArr; atcmd_lpinit &rArr; tls_cmd_disconnect_network &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpchl_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>lptbd_proc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = lptbd_proc &rArr; lptstr_proc &rArr; atcmd_lpinit &rArr; tls_cmd_disconnect_network &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptstr_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>lpstpt_proc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lpstpt_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_txrx_litepoint_test_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>lpchlr_proc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = lpchlr_proc &rArr; lprstr_proc &rArr; atcmd_lpinit &rArr; tls_cmd_disconnect_network &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lprstr_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>lpstpr_proc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lpstpr_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_txrx_litepoint_test_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>lpragc_proc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>lprsr_proc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>tls_tx_sin</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tls_tx_sin &rArr; tls_tx_wave_start &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_wave_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>tls_rx_wave</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tls_rx_wave &rArr; tls_rx_data_from_adc &rArr; tls_os_time_delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rx_data_from_adc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>tls_tx_lo_proc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = tls_tx_lo_proc &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_lo
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_lo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>tls_tx_iq_mismatch_proc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = tls_tx_iq_mismatch_proc &rArr; tls_set_tx_iq_phase &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_iq_phase
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_iq_gain
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_iq_phase
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_iq_gain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>tls_freq_error_proc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tls_freq_error_proc &rArr; tls_freq_err_op &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_freq_err_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>tls_rf_vcg_ctrl_proc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tls_rf_vcg_ctrl_proc &rArr; tls_rf_vcg_ctrl_op &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rf_vcg_ctrl_op
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>wwps_proc</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = wwps_proc &rArr; tls_wps_start_pin &rArr; wpa_update_mode &rArr; __wpa_update_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_wps_pin
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_wps_pin
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wps_start_pin
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wps_start_pbc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>custdata_proc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = custdata_proc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_customdata
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[b17]"></a>tls_set_hspi_fwup_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[348]"></a>tls_hspi_init</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_hspi_init &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_init_cmplt
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_slave_spi_init
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_high_speed_interface_type
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_tx_data_callback_register
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_rx_data_callback_register
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_rx_cmd_callback_register
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[34e]"></a>uart_tx</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = uart_tx &rArr; tls_uart_tx_chars_start &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_tcp_recv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_socket_finish_callback
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars_start
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_fill_buf
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[353]"></a>uart_tx_sent_callback</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = uart_tx_sent_callback &rArr; tls_wl_task_callback_static &rArr; tls_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback_static
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[354]"></a>tls_timer2_stop</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tls_timer2_stop &rArr; tls_timer_destroy &rArr; tls_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer2_isr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_net_send
</UL>

<P><STRONG><a name="[356]"></a>tls_timer2_start</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = tls_timer2_start &rArr; tls_timer_create &rArr; tls_irq_enable &rArr; NVIC_Configration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_start
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_create
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_net_send
</UL>

<P><STRONG><a name="[359]"></a>uart_net_send</STRONG> (Thumb, 300 bytes, Stack size 560 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = uart_net_send &rArr; tls_hostif_send_data &rArr; tls_socket_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_data
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_uart_rx_status
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer2_start
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer2_stop
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx
</UL>

<P><STRONG><a name="[35b]"></a>parse_ricmd_line</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = parse_ricmd_line &rArr; tls_hostif_cmd_handler &rArr; tls_hostif_atcmd_exec &rArr; at_parse_func &rArr; string_to_ipaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx
</UL>

<P><STRONG><a name="[35d]"></a>uart_fwup_send</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = uart_fwup_send &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_rsp
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_set_update_numer
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_sync
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_get_current_session_id
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx
</UL>

<P><STRONG><a name="[de]"></a>uart_rx</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = uart_rx &rArr; uart_net_send &rArr; tls_hostif_send_data &rArr; tls_socket_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_atcmd_line
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_send
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_ricmd_line
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_net_send
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer2_start
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer2_stop
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[365]"></a>tls_uart1_task_rx_cb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tls_uart1_task_rx_cb &rArr; tls_wl_task_callback_static &rArr; tls_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback_static
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_fc_status
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_atcmd_line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[366]"></a>tls_uart_open</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_uart_open
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_rx_callback_register
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
</UL>

<P><STRONG><a name="[367]"></a>tls_uart_init</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = tls_uart_init &rArr; tls_cmd_init_socket_cfg &rArr; string_to_ipaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_init_socket_cfg
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_auto_mode
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_callback_register
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_fc_status
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_port_init
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_open
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[b18]"></a>tls_uart_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_cmd.o(.text), UNUSED)

<P><STRONG><a name="[b19]"></a>vPortYield</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[36b]"></a>vPortExitCritical</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portENABLE_INTERRUPTS
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskEndTrace
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartTrace
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDeleteByPriority
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>

<P><STRONG><a name="[371]"></a>vListInsertEnd</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xCoRoutineRemoveFromEventList
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCoRoutineSchedule
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xCoRoutineCreate
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDeleteByPriority
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckDelayedList
</UL>

<P><STRONG><a name="[378]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xCoRoutineCreate
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateExt
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[36d]"></a>vPortEnterCritical</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portDISABLE_INTERRUPTS
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskEndTrace
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartTrace
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDeleteByPriority
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
</UL>

<P><STRONG><a name="[377]"></a>pxPortInitialiseStack</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[b1a]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[370]"></a>vListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xCoRoutineRemoveFromEventList
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCoRoutineSchedule
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCoRoutineAddToDelayedList
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDeleteByPriority
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckDelayedList
</UL>

<P><STRONG><a name="[36f]"></a>vTaskIncrementTick</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SysTickHandler
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[372]"></a>xTaskResumeAll</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetTaskByPriority
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[374]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetTaskByPriority
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[373]"></a>vPortFree</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_delete
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDeleteExt
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateExt
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[375]"></a>pvPortMalloc</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xCoRoutineCreate
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateExt
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateExt
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[376]"></a>xTaskGenericCreate</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[169]"></a>tls_os_task_create</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWifiTask
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart1Task
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRelayTask
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRTCTask
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateLCDTask
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_lan_task_create
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_create
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_run
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_create_task
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_init
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_init
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_task_init
</UL>

<P><STRONG><a name="[379]"></a>vTaskGetTaskByPriority</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTaskWithinSingleList1
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDeleteByPriority
</UL>

<P><STRONG><a name="[37b]"></a>vTaskDeleteByPriority</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetTaskByPriority
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_del
</UL>

<P><STRONG><a name="[37c]"></a>tls_os_task_del</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDeleteByPriority
</UL>

<P><STRONG><a name="[37d]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[15d]"></a>vTaskSwitchContext</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_mailbox_send
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[37e]"></a>vTaskSuspend</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_suspend
</UL>

<P><STRONG><a name="[37f]"></a>tls_os_task_suspend</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[381]"></a>xTaskIsTaskSuspended</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[380]"></a>vTaskResume</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIsTaskSuspended
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_resume
</UL>

<P><STRONG><a name="[382]"></a>tls_os_task_resume</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[383]"></a>xQueueCreate</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_mailbox_create
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[384]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
</UL>

<P><STRONG><a name="[301]"></a>tls_os_sem_create</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tls_os_sem_create &rArr; xQueueCreateCountingSemaphore &rArr; xQueueCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_write
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_init
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_sync
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_init
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_init
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_block
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_sync
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_init
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_list_init
</UL>

<P><STRONG><a name="[385]"></a>vQueueDelete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_mailbox_delete
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_delete
</UL>

<P><STRONG><a name="[386]"></a>tls_os_sem_delete</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tls_os_sem_delete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_write
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_sync
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_init
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_block
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_sync
</UL>

<P><STRONG><a name="[b1b]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[387]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[38a]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCoRoutineAddToDelayedList
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[38b]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[38d]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[38c]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[38f]"></a>xQueueGenericReceive</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_receive
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_mailbox_receive
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
</UL>

<P><STRONG><a name="[315]"></a>tls_os_sem_acquire</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tls_os_sem_acquire &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_write
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skct_proc
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wscan_proc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjoin_proc
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_sync
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_scheduler
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_acquire
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_async
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_get_param
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_erase
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_write
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_read
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_get_param
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_chip_erase
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_erase
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_block
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write_with_cmd
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_sync
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_async
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_scan_res
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_scan_task
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_task
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_config
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_bss_info_changed
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_bss_mgmt_task
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_task
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_xmit
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_data
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_flush
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_add_with_mode
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_flush
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_remove
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_add
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_free_keys
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_free
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_link
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_match_bss
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_get
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_add
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_flush_by_age
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_del
</UL>

<P><STRONG><a name="[391]"></a>xQueueGenericSend</STRONG> (Thumb, 236 bytes, Stack size 64 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_mailbox_send
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
</UL>

<P><STRONG><a name="[392]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_mailbox_send
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
</UL>

<P><STRONG><a name="[270]"></a>tls_os_sem_release</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_isr_count
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_wscan_cmplt
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_net_status_changed
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_state_changed_ATCMD
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars_start
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_scheduler
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_complete
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_isr
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_release
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_request_complete
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_async
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_get_param
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_erase
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_write
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_read
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_get_param
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_chip_erase
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_erase
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write_with_cmd
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_async
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_fill_txfifo
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_scan_res
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_scan_task
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_config
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_bss_info_changed
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_xmit
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_data
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_flush
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_add_with_mode
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_req_auth
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_flush
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_remove
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_add
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_scan_completed
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_start_scan
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_timer
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_mgmt
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_authenticate
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associate
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
<LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_free_keys
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_free
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_link
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_match_bss
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_get
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_add
<LI><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_timeout
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_flush_by_age
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_del
</UL>

<P><STRONG><a name="[394]"></a>xQueueCreateExt</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueCreateExt &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
</UL>

<P><STRONG><a name="[168]"></a>tls_os_queue_create</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tls_os_queue_create &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWifiTask
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUart1Task
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRelayTask
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateRTCTask
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateLCDTask
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_create
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_create_task
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_init
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_new
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_init
</UL>

<P><STRONG><a name="[395]"></a>vQueueDeleteExt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>

<P><STRONG><a name="[396]"></a>tls_os_queue_delete</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tls_os_queue_delete &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_init
</UL>

<P><STRONG><a name="[1c1]"></a>tls_os_queue_send</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_isr_count
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanTimerProc
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiTaskProc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserWlanStatusChangedEvent
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUdpSock
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SockRcvTaskProc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_scan_result_cb
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_switch_channel_tim_temp_stop
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_switch_channel_tim_stop
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_oneshot_netif_status_event
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_switch_channel_tim_start
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_handshake_timeout
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_scan_start
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_data_clear
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_start
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_send_msg
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_trypost
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_post
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_async
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_async
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_LS_IRQHandler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan_timer
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_auth_timer
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_timeout
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_beacon_done
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_ps_pkt_timer_expire
</UL>

<P><STRONG><a name="[397]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueReceiveFromISR &rArr; prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_receive
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_mailbox_receive
</UL>

<P><STRONG><a name="[1ca]"></a>tls_os_queue_receive</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tls_os_queue_receive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_isr_count
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiTaskProc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_scheduler
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_arch_mbox_fetch
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_task
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_timer_task
</UL>

<P><STRONG><a name="[40d]"></a>tls_os_queue_flush</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
</UL>

<P><STRONG><a name="[398]"></a>tls_os_mailbox_create</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
</UL>

<P><STRONG><a name="[399]"></a>tls_os_mailbox_delete</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[39a]"></a>tls_os_mailbox_send</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_isr_count
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[39b]"></a>tls_os_mailbox_receive</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_isr_count
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[39c]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
</UL>

<P><STRONG><a name="[22d]"></a>tls_os_get_time</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_recv
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_lan_task
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_release
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gettimeofday
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_arch_mbox_fetch
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_pack
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_recv
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_run
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperInitRandomeNumber
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetUpTime
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_power_save
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_handle_timeout
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_add_randomness
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;michael_mic_failure
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_generate_pin
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_tx
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_inact_sec
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_add
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_scan_completed
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_defragment
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_reassemble_find
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_probe_resp
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_nullfunc
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_wep_init
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_flush_by_age
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_ntp_timestamp
</UL>

<P><STRONG><a name="[329]"></a>tls_os_set_critical</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regw_proc
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_remove_status_event
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_accept_cb
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_alloc_socket
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_remain_len
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars_start
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_free_tx_sent_data
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_fill_buf
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_wave_start
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_uart_rx_status
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_exit
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_enter
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_debug
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_accepted
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_protect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc_debug
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_clear_error
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_reset
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_register
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_flags
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_set_channel
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_task
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_change_iface
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_task
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_data
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx_rate_ctrl
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_tx_start
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_free
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_request_scan
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Mismatch_method
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_scan_completed
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sta_flags
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub_return
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_free_rxbuf
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_mgmt
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_delba
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_rd
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_flags
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sta_flags
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_and_clear_bit
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_addba_resp
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_put
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_get
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_func_method
</UL>

<P><STRONG><a name="[32a]"></a>tls_os_release_critical</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regw_proc
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_remove_status_event
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_accept_cb
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_alloc_socket
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_remain_len
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars_start
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_free_tx_sent_data
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_fill_buf
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_wave_start
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_uart_rx_status
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_exit
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_enter
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_debug
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_accepted
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_unprotect
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc_debug
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_clear_error
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_reset
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_register
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_flags
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_set_channel
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_task
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_change_iface
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_task
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_data
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx_rate_ctrl
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_tx_start
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_free
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_request_scan
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Mismatch_method
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_scan_completed
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sta_flags
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub_return
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_free_rxbuf
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_mgmt
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_delba
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_rd
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_flags
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sta_flags
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_and_clear_bit
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_addba_resp
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_put
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_get
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_func_method
</UL>

<P><STRONG><a name="[39e]"></a>xTimerCreateExt</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTimerCreateExt &rArr; prvCheckForValidListAndQueue &rArr; xQueueCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
</UL>

<P><STRONG><a name="[1d1]"></a>tls_os_timer_create</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_os_timer_create &rArr; xTimerCreateExt &rArr; prvCheckForValidListAndQueue &rArr; xQueueCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateExt
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWifiTask
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_reset_sys
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_create_tmr
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_start_oneshot
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_create_task
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_init
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_list_init
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_init
</UL>

<P><STRONG><a name="[39f]"></a>xTaskGetTickCount</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskGetTickCount &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckDelayedList
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[3a1]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[3a0]"></a>xTimerGenericCommand</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_delete
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>

<P><STRONG><a name="[1d2]"></a>tls_os_timer_start</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_os_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_isr_count
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWifiTask
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_reset_sys
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_create_tmr
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_stop
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_send
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_list_init
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ps_pkt_timer_start
</UL>

<P><STRONG><a name="[23d]"></a>tls_os_timer_change</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tls_os_timer_change &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_isr_count
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_err
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_create_tmr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_standby
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sleep
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_power_save
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect_timeout
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_auth_timeout
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_notify
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_deauth
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_authenticate
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associate
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
</UL>

<P><STRONG><a name="[215]"></a>tls_os_timer_stop</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_isr_count
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_stop_tmr
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_switch_channel_tim_temp_stop
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_switch_channel_tim_stop
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_stop_clear_data
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_standby
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sleep
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_run
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_scan
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect_timeout
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_auth_timeout
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_auth_timeout
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_connect_timeout
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_connection
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disassoc_callback
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ps_pkt_timer_stop
</UL>

<P><STRONG><a name="[3a2]"></a>tls_os_timer_delete</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[3a3]"></a>vTaskDelay</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
</UL>

<P><STRONG><a name="[16f]"></a>tls_os_time_delay</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tls_os_time_delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadV9261fReg
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteV9261fReg
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Meter
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_send_reply
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiTaskProc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SockRcvTaskProc
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exrtc_save
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1TaskProc
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_control
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_display
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_ssid_bssid
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_bssid
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_oneshot_send_mac
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_wait_disconnect
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_litepoint_test_start
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_udp_sendto
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rx_data_from_adc
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_net_send
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_erase
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_acquire
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_post
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_tx_data
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_wait_complt
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_scan_task
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_power_save
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_channel_check
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_data
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_tx
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_eapol_cb
</UL>

<P><STRONG><a name="[3a6]"></a>vTaskList</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTaskWithinSingleList
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_disp_task_stat_info
</UL>

<P><STRONG><a name="[3a7]"></a>tls_os_disp_task_stat_info</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[575]"></a>tls_os_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a8]"></a>xPortStartScheduler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[3ad]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[3ae]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[3b1]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[3b4]"></a>vTaskStartScheduler</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portDISABLE_INTERRUPTS
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_start_scheduler
</UL>

<P><STRONG><a name="[3b5]"></a>tls_os_start_scheduler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tls_os_start_scheduler &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[886]"></a>tls_os_get_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
</UL>

<P><STRONG><a name="[b1c]"></a>tls_os_time_tick</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[3b6]"></a>vTaskDelete</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>

<P><STRONG><a name="[3b7]"></a>uxTaskPriorityGet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>

<P><STRONG><a name="[3b8]"></a>vTaskPrioritySet</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>

<P><STRONG><a name="[3b9]"></a>xTaskResumeFromISR</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIsTaskSuspended
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[b1d]"></a>vPortEndScheduler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[3ba]"></a>vTaskEndScheduler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portDISABLE_INTERRUPTS
</UL>

<P><STRONG><a name="[b1e]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[3bb]"></a>vTaskStartTrace</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>

<P><STRONG><a name="[3bc]"></a>ulTaskEndTrace</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>

<P><STRONG><a name="[b1f]"></a>xTaskGetIdleTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[3bd]"></a>uxTaskGetStackHighWaterMark</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usTaskCheckFreeStackSpace
</UL>

<P><STRONG><a name="[3be]"></a>xTimerCreate</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[3bf]"></a>xTimerIsTimerActive</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>

<P><STRONG><a name="[b20]"></a>pvTimerGetTimerID</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[3c0]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>

<P><STRONG><a name="[b21]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[b22]"></a>xQueueIsQueueEmptyFromISR</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[b23]"></a>xQueueIsQueueFullFromISR</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[b24]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[b25]"></a>vPortInitialiseBlocks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)

<P><STRONG><a name="[3c1]"></a>xCoRoutineCreate</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[3c2]"></a>vCoRoutineAddToDelayedList</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
</UL>

<P><STRONG><a name="[3c4]"></a>vCoRoutineSchedule</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portENABLE_INTERRUPTS
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portDISABLE_INTERRUPTS
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckDelayedList
</UL>

<P><STRONG><a name="[3c5]"></a>xCoRoutineRemoveFromEventList</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[92]"></a>OS_CPU_SysTickHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OS_CPU_SysTickHandler &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[1f4]"></a>lwip_htons</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_send_reply
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_lan_task
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_lan_send
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_RecvCb
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSNameErrGenAndSend
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSAnswerGenAndSend
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
</UL>

<P><STRONG><a name="[41e]"></a>err_to_errno</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_impl
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[116]"></a>mem_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mem_free &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[3c6]"></a>sys_arch_unprotect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>

<P><STRONG><a name="[3c7]"></a>sys_arch_protect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
</UL>

<P><STRONG><a name="[3c8]"></a>memp_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_untimeout_p
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_freeaddrinfo
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callbackmsg_delete
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_output
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch_p
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_stop
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>

<P><STRONG><a name="[1eb]"></a>pbuf_free</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPNakGenAndSend
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPOfferGenAndSend
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPAckGenAndSend
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_tx_msg_buffer
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_tcp_recv
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_socket_finish_callback
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_socket_recv
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_recv
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_RecvCb
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSNameErrGenAndSend
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSAnswerGenAndSend
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_int
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_output
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_do_send
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_recv_cb
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_recv_cb
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sk_free_pbuf_custom_fn
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_dechain
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_recv
</UL>

<P><STRONG><a name="[3ca]"></a>netbuf_delete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[b26]"></a>sys_sem_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[3cc]"></a>sys_sem_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sys_sem_free &rArr; tls_os_sem_delete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_msleep
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>

<P><STRONG><a name="[3cd]"></a>netconn_free</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = netconn_free &rArr; sys_sem_free &rArr; tls_os_sem_delete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>

<P><STRONG><a name="[3ce]"></a>sys_sem_signal</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sys_sem_signal &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_do_write
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_do_send
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_dns_found
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_callback
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_callback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_accepted
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_getaddr
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</UL>

<P><STRONG><a name="[411]"></a>sys_sem_valid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</UL>

<P><STRONG><a name="[b27]"></a>tcp_arg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[3cf]"></a>sys_mbox_trypost</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sys_mbox_trypost &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_post
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_trycallback
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_output
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[3d0]"></a>sys_mbox_valid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_tcp
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_output
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
</UL>

<P><STRONG><a name="[b28]"></a>tcp_err</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[3d1]"></a>tcp_seg_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>

<P><STRONG><a name="[1e5]"></a>lwip_htonl</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPNakGenAndSend
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPOfferGenAndSend
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPAckGenAndSend
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_send_reply
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_lan_task
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSAnswerGenAndSend
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Start
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
</UL>

<P><STRONG><a name="[3d3]"></a>lwip_standard_chksum</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_partial_base
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>

<P><STRONG><a name="[3d2]"></a>inet_chksum</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inet_chksum &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[3df]"></a>pbuf_cat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_chain
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[3d5]"></a>pbuf_ref</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pbuf_ref &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[3de]"></a>pbuf_alloced_custom</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_alloced_custom
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_recv_cb
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[3d6]"></a>mem_malloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_insert_4ic
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_recv_cb
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[3d7]"></a>memp_malloc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_p
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_udp
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_new
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callbackmsg_new
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_output
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[3d9]"></a>tcp_segs_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_ooseq_callback
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[3da]"></a>sys_mbox_post</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[3db]"></a>tcpip_callback_with_block</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_create
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_close
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_msg
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_callback
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free_callback
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
</UL>

<P><STRONG><a name="[1e4]"></a>pbuf_alloc</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_pool_is_empty
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPNakGenAndSend
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPOfferGenAndSend
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPAckGenAndSend
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_send
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSNameErrGenAndSend
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSAnswerGenAndSend
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_output
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_udp_sendto
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_alloc
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[3dd]"></a>ip4_frag</STRONG> (Thumb, 364 bytes, Stack size 80 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</UL>

<P><STRONG><a name="[3e0]"></a>pbuf_header</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</UL>

<P><STRONG><a name="[3e2]"></a>ip4_output_if_opt_src</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
</UL>

<P><STRONG><a name="[3e3]"></a>ip4_output_if_opt</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>

<P><STRONG><a name="[3e4]"></a>ip4_output_if</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>

<P><STRONG><a name="[3e5]"></a>inet_chksum_pseudo</STRONG> (Thumb, 126 bytes, Stack size 20 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
</UL>

<P><STRONG><a name="[3e6]"></a>ip_chksum_pseudo</STRONG> (Thumb, 12 bytes, Stack size 12 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ip_chksum_pseudo &rArr; inet_chksum_pseudo &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>

<P><STRONG><a name="[3e8]"></a>ip4_route</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
</UL>

<P><STRONG><a name="[3e7]"></a>tcp_eff_send_mss_impl</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tcp_eff_send_mss_impl &rArr; ip4_route
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[3eb]"></a>tcp_send_empty_ack</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[3ec]"></a>tcp_output</STRONG> (Thumb, 460 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_segment
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_do_write
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_txnow
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>

<P><STRONG><a name="[3f0]"></a>pbuf_clen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[3ef]"></a>tcp_write</STRONG> (Thumb, 872 bytes, Stack size 96 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = tcp_write &rArr; tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pbuf_prealloc
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_do_write
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</UL>

<P><STRONG><a name="[b29]"></a>tcp_poll</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[b2a]"></a>tcp_sent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[3f3]"></a>tcp_rst</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = tcp_rst &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[3f5]"></a>tcp_backlog_accepted</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_accepted
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
</UL>

<P><STRONG><a name="[3f4]"></a>tcp_pcb_purge</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tcp_pcb_purge &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_backlog_accepted
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
</UL>

<P><STRONG><a name="[3f6]"></a>tcp_pcb_remove</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>

<P><STRONG><a name="[3f7]"></a>tcp_abandon</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_backlog_accepted
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>

<P><STRONG><a name="[3f8]"></a>tcp_abort</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_accept_cb
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_connect_cb
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_recv_cb
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_poll_cb
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept_null
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[3f9]"></a>tcp_enqueue_flags</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_create_segment
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
</UL>

<P><STRONG><a name="[3fa]"></a>tcp_send_fin</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tcp_send_fin &rArr; tcp_enqueue_flags &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
</UL>

<P><STRONG><a name="[408]"></a>tcp_trigger_input_pcb_close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>

<P><STRONG><a name="[3fc]"></a>sys_now</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sys_now
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_p
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch_p
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_restart_timeouts
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
</UL>

<P><STRONG><a name="[1e1]"></a>sys_timeout_p</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DhcpTickHandle
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Start
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cyclic_timer
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_timer
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>

<P><STRONG><a name="[3fd]"></a>tcp_keepalive</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tcp_keepalive &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[3fe]"></a>tcp_rexmit_rto</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[1f1]"></a>pbuf_copy_partial</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_copy_partial &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_tcp_recv
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_socket_recv
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_RecvCb
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_recv
</UL>

<P><STRONG><a name="[3ff]"></a>tcp_zero_window_probe</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = tcp_zero_window_probe &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output_alloc_header
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>

<P><STRONG><a name="[400]"></a>tcp_slowtmr</STRONG> (Thumb, 626 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tcp_slowtmr &rArr; tcp_rexmit_rto &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[401]"></a>tcp_close</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close_connect
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_poll_cb
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_err_cb
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[404]"></a>tcp_update_rcv_ann_wnd</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tcp_update_rcv_ann_wnd
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>

<P><STRONG><a name="[403]"></a>tcp_recved</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sk_free_pbuf_custom_fn
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_tcp
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_recv
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>

<P><STRONG><a name="[f4]"></a>tcp_recv_null</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[405]"></a>tcp_process_refused_data</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[406]"></a>tcp_fasttmr</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>

<P><STRONG><a name="[154]"></a>tcp_tmr</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_slowtmr
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_tcp_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.constdata)
</UL>
<P><STRONG><a name="[407]"></a>tcp_timer_needed</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tcp_timer_needed &rArr; sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_p
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[409]"></a>tcp_shutdown</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = tcp_shutdown &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close_connect
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
</UL>

<P><STRONG><a name="[40a]"></a>tcp_accept</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_start
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close_connect
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_poll_cb
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_err_cb
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
</UL>

<P><STRONG><a name="[b2b]"></a>tcp_recv</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>udp_remove</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Stop
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Stop
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_connect
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</UL>

<P><STRONG><a name="[40b]"></a>raw_remove</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = raw_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</UL>

<P><STRONG><a name="[b2c]"></a>sys_mbox_set_invalid</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[40c]"></a>sys_mbox_free</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sys_mbox_free &rArr; tls_os_queue_delete &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_flush
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_delete
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[40e]"></a>sys_arch_mbox_fetch</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sys_arch_mbox_fetch &rArr; tls_os_queue_receive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_receive
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch_p
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_rx
</UL>

<P><STRONG><a name="[410]"></a>lwip_netconn_do_delconn</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = lwip_netconn_do_delconn &rArr; netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_remove
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_valid
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[412]"></a>sys_arch_sem_wait</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sys_arch_sem_wait &rArr; tls_os_sem_acquire &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_msg
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_msleep
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
</UL>

<P><STRONG><a name="[413]"></a>tcpip_send_msg_wait_sem</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>

<P><STRONG><a name="[414]"></a>netconn_delete</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_delete &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[416]"></a>lwip_netconn_do_getaddr</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lwip_netconn_do_getaddr &rArr; sys_sem_signal &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[417]"></a>netconn_getaddr</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_getaddr &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[419]"></a>lwip_netconn_do_accepted</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lwip_netconn_do_accepted &rArr; sys_sem_signal &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_backlog_accepted
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[41a]"></a>netconn_accept</STRONG> (Thumb, 136 bytes, Stack size 48 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[41d]"></a>lwip_accept</STRONG> (Thumb, 286 bytes, Stack size 64 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept
</UL>

<P><STRONG><a name="[41f]"></a>accept</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[421]"></a>alg_napt_port_is_used</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[420]"></a>tcp_bind</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_port_is_used
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_start
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
</UL>

<P><STRONG><a name="[1fa]"></a>udp_bind</STRONG> (Thumb, 216 bytes, Stack size 36 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = udp_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_port_is_used
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Start
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Start
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_create_connect
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
</UL>

<P><STRONG><a name="[424]"></a>raw_bind</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_bind
</UL>

<P><STRONG><a name="[423]"></a>lwip_netconn_do_bind</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lwip_netconn_do_bind &rArr; tcp_bind &rArr; tcp_timer_needed &rArr; sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_bind
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[425]"></a>netconn_bind</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_bind &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>

<P><STRONG><a name="[426]"></a>lwip_bind</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lwip_bind &rArr; netconn_bind &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
</UL>

<P><STRONG><a name="[1c5]"></a>bind</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = bind &rArr; lwip_bind &rArr; netconn_bind &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUdpSock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_lan_task
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnConnectionOpen
</UL>

<P><STRONG><a name="[117]"></a>lwip_netconn_do_close</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = lwip_netconn_do_close &rArr; netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[427]"></a>netconn_shutdown</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_shutdown &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
</UL>

<P><STRONG><a name="[429]"></a>lwip_shutdown</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>

<P><STRONG><a name="[42a]"></a>shutdown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = shutdown &rArr; lwip_shutdown &rArr; netconn_shutdown &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperShutDown
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnConnectionClose
</UL>

<P><STRONG><a name="[42d]"></a>igmp_lookfor_group</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
</UL>

<P><STRONG><a name="[42c]"></a>igmp_leavegroup_netif</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = igmp_leavegroup_netif &rArr; igmp_send &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
</UL>

<P><STRONG><a name="[42e]"></a>igmp_leavegroup</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
</UL>

<P><STRONG><a name="[430]"></a>igmp_joingroup_netif</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = igmp_joingroup_netif &rArr; igmp_send &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
</UL>

<P><STRONG><a name="[432]"></a>igmp_joingroup</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = igmp_joingroup &rArr; igmp_joingroup_netif &rArr; igmp_send &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_join_leave_group
</UL>

<P><STRONG><a name="[433]"></a>lwip_netconn_do_join_leave_group</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lwip_netconn_do_join_leave_group &rArr; igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[434]"></a>netconn_join_leave_group</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_drop_registered_memberships
</UL>

<P><STRONG><a name="[435]"></a>lwip_close</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_drop_registered_memberships
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_socket
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
</UL>

<P><STRONG><a name="[1c2]"></a>closesocket</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_send_reply
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiTaskProc
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUdpSock
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SockRcvTaskProc
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_run
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_init
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnConnectionClose
</UL>

<P><STRONG><a name="[439]"></a>tcp_next_iss</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
</UL>

<P><STRONG><a name="[438]"></a>tcp_connect</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_port
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_start
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[43a]"></a>udp_connect</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = udp_connect &rArr; udp_bind
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
</UL>
<BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[43c]"></a>raw_connect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[43b]"></a>lwip_netconn_do_connect</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lwip_netconn_do_connect &rArr; tcp_connect &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_connect
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[43d]"></a>netconn_connect</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_connect &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[43f]"></a>udp_disconnect</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_disconnect
</UL>

<P><STRONG><a name="[43e]"></a>lwip_netconn_do_disconnect</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lwip_netconn_do_disconnect &rArr; sys_sem_signal &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_disconnect
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[440]"></a>netconn_disconnect</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_disconnect &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>

<P><STRONG><a name="[441]"></a>lwip_connect</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lwip_connect &rArr; netconn_disconnect &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
</UL>

<P><STRONG><a name="[442]"></a>connect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = connect &rArr; lwip_connect &rArr; netconn_disconnect &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnConnectionOpen
</UL>

<P><STRONG><a name="[444]"></a>lwip_getsockname</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockname
</UL>

<P><STRONG><a name="[445]"></a>getsockname</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
</UL>

<P><STRONG><a name="[446]"></a>lwip_getpeername</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getpeername
</UL>

<P><STRONG><a name="[447]"></a>getpeername</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getpeername
</UL>

<P><STRONG><a name="[44b]"></a>lwip_setsockopt</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
</UL>

<P><STRONG><a name="[44c]"></a>setsockopt</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
</UL>

<P><STRONG><a name="[44e]"></a>lwip_getsockopt</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getsockopt
</UL>

<P><STRONG><a name="[44f]"></a>getsockopt</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
</UL>

<P><STRONG><a name="[453]"></a>tcp_backlog_delayed</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
</UL>

<P><STRONG><a name="[450]"></a>sys_sem_new</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sys_sem_new &rArr; tls_os_sem_create &rArr; xQueueCreateCountingSemaphore &rArr; xQueueCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_alloc_socket
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_msleep
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
</UL>

<P><STRONG><a name="[451]"></a>sys_mbox_new</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sys_mbox_new &rArr; tls_os_queue_create &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_task_init
</UL>

<P><STRONG><a name="[452]"></a>netconn_alloc</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = netconn_alloc &rArr; sys_mbox_new &rArr; tls_os_queue_create &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
</UL>

<P><STRONG><a name="[454]"></a>tcp_listen_with_backlog_and_err</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcp_listen_with_backlog_and_err &rArr; tcp_timer_needed &rArr; sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_listen
</UL>

<P><STRONG><a name="[455]"></a>lwip_netconn_do_listen</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = lwip_netconn_do_listen &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[456]"></a>netconn_listen_with_backlog</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
</UL>

<P><STRONG><a name="[457]"></a>lwip_listen</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
</UL>

<P><STRONG><a name="[458]"></a>listen</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
</UL>

<P><STRONG><a name="[459]"></a>lwip_netconn_do_recv</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = lwip_netconn_do_recv &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[45b]"></a>netconn_recv</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[45c]"></a>netconn_recv_tcp_pbuf</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = netconn_recv_tcp_pbuf &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[45d]"></a>lwip_recvfrom</STRONG> (Thumb, 454 bytes, Stack size 80 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_read
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
</UL>

<P><STRONG><a name="[45e]"></a>lwip_recv</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[45f]"></a>recv</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnRecv
</UL>

<P><STRONG><a name="[1bd]"></a>recvfrom</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SockRcvTaskProc
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_lan_select_recv
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_recv
</UL>

<P><STRONG><a name="[460]"></a>lwip_netconn_do_write</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = lwip_netconn_do_write &rArr; lwip_netconn_do_writemore &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[461]"></a>netconn_write_partly</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = netconn_write_partly &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[462]"></a>netbuf_free</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = netbuf_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[463]"></a>ip4_output_if_src</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[464]"></a>pbuf_chain</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_chain &rArr; pbuf_ref &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>

<P><STRONG><a name="[465]"></a>udp_sendto_if_src</STRONG> (Thumb, 232 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_src
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>

<P><STRONG><a name="[466]"></a>udp_sendto_if</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[468]"></a>ip4_addr_isbroadcast_u32</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route4udp
</UL>

<P><STRONG><a name="[467]"></a>ip_route4udp</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ip_route4udp
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>

<P><STRONG><a name="[1ea]"></a>udp_sendto</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_route4udp
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPNakGenAndSend
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPOfferGenAndSend
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPAckGenAndSend
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSNameErrGenAndSend
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSAnswerGenAndSend
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_do_send
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
</UL>

<P><STRONG><a name="[469]"></a>udp_send</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = udp_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_do_send
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[46a]"></a>raw_sendto</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = raw_sendto &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_chain
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
</UL>

<P><STRONG><a name="[46b]"></a>raw_send</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = raw_send &rArr; raw_sendto &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_send
</UL>

<P><STRONG><a name="[46c]"></a>lwip_netconn_do_send</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = lwip_netconn_do_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_send
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sendto
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[46d]"></a>netconn_send</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_send &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_sendto
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[46e]"></a>netbuf_ref</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = netbuf_ref &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[46f]"></a>lwip_sendto</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_ref
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_free
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[470]"></a>lwip_send</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + In Cycle
<LI>Call Chain = lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_write
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>

<P><STRONG><a name="[471]"></a>send</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSend
</UL>

<P><STRONG><a name="[1cf]"></a>sendto</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sendto &rArr; lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_send_reply
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiTaskProc
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_lan_send
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_send
</UL>

<P><STRONG><a name="[474]"></a>tcp_alloc</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = tcp_alloc &rArr; tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_timewait
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_kill_state
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new_ip_type
</UL>

<P><STRONG><a name="[475]"></a>tcp_new_ip_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[1fb]"></a>udp_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Start
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Start
</UL>

<P><STRONG><a name="[1f9]"></a>udp_new</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Start
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Start
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_create_connect
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new_ip_type
</UL>

<P><STRONG><a name="[476]"></a>udp_new_ip_type</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
</UL>

<P><STRONG><a name="[477]"></a>pbuf_copy</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pbuf_copy &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv_raw
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_coalesce
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[b2d]"></a>raw_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[478]"></a>raw_new</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = raw_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new_ip_type
</UL>

<P><STRONG><a name="[479]"></a>raw_new_ip_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
</UL>

<P><STRONG><a name="[47a]"></a>lwip_netconn_do_newconn</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = lwip_netconn_do_newconn &rArr; pcb_new &rArr; tcp_alloc &rArr; tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[47c]"></a>netconn_new_with_proto_and_callback</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = netconn_new_with_proto_and_callback &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>

<P><STRONG><a name="[47d]"></a>lwip_socket</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_socket
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>

<P><STRONG><a name="[1c4]"></a>socket</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = socket &rArr; lwip_socket &rArr; netconn_new_with_proto_and_callback &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_send_reply
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUdpSock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_lan_task
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_init
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnConnectionOpen
</UL>

<P><STRONG><a name="[47f]"></a>lwip_select</STRONG> (Thumb, 656 bytes, Stack size 120 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lwip_select &rArr; sys_arch_sem_wait &rArr; tls_os_sem_acquire &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[256]"></a>select</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = select &rArr; lwip_select &rArr; sys_arch_sem_wait &rArr; tls_os_sem_acquire &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_lan_select_recv
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_recv
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnRecv
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSend
</UL>

<P><STRONG><a name="[480]"></a>lwip_ioctl</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctlsocket
</UL>

<P><STRONG><a name="[481]"></a>ioctlsocket</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
</UL>

<P><STRONG><a name="[482]"></a>lwip_fcntl</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fcntl
</UL>

<P><STRONG><a name="[483]"></a>fcntl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
</UL>

<P><STRONG><a name="[1e6]"></a>pbuf_take</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pbuf_take &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPNakGenAndSend
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPOfferGenAndSend
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPAckGenAndSend
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSNameErrGenAndSend
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSAnswerGenAndSend
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_output
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
</UL>

<P><STRONG><a name="[484]"></a>pbuf_skip</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
</UL>

<P><STRONG><a name="[486]"></a>pbuf_take_at</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pbuf_take_at &rArr; pbuf_take &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[487]"></a>pbuf_put_at</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pbuf_put_at
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[48c]"></a>pbuf_try_get_at</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pbuf_try_get_at
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip_const
</UL>
<BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_get_at
</UL>

<P><STRONG><a name="[48f]"></a>lwip_strnicmp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lwip_strnicmp
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[492]"></a>ip4addr_aton</STRONG> (Thumb, 284 bytes, Stack size 36 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ip4addr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[491]"></a>dns_gethostbyname_addrtype</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = dns_gethostbyname_addrtype &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnicmp
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_gethostbyname
</UL>

<P><STRONG><a name="[493]"></a>lwip_netconn_do_gethostbyname</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = lwip_netconn_do_gethostbyname &rArr; dns_gethostbyname_addrtype &rArr; dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[494]"></a>netconn_gethostbyname</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
</UL>

<P><STRONG><a name="[495]"></a>lwip_gethostbyname</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lwip_gethostbyname &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
</UL>

<P><STRONG><a name="[2df]"></a>gethostbyname</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = gethostbyname &rArr; lwip_gethostbyname &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skghbn_proc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_init
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetHostByName
</UL>

<P><STRONG><a name="[31c]"></a>tls_net_set_sourceip</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sksrcip_proc
</UL>

<P><STRONG><a name="[31b]"></a>tls_net_get_sourceip</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sksrcip_proc
</UL>

<P><STRONG><a name="[496]"></a>get_server_conn</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_server_conn
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_do_write
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_recv_cb
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_poll_cb
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_get_status
</UL>

<P><STRONG><a name="[499]"></a>tls_net_get_socket</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_send
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_close
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_msg
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_connect
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_create_connect
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_do_write
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_do_send
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_udp_recv_cb
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_accept_cb
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_connect_cb
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_recv_cb
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close_connect
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_poll_cb
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_err_cb
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_udp_sendto
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_get_status
</UL>

<P><STRONG><a name="[4a0]"></a>tcp_listen_with_backlog</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tcp_listen_with_backlog &rArr; tcp_listen_with_backlog_and_err &rArr; tcp_timer_needed &rArr; sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog_and_err
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_start
</UL>

<P><STRONG><a name="[4a1]"></a>tcp_new</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = tcp_new &rArr; tcp_alloc &rArr; tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_start
</UL>

<P><STRONG><a name="[20e]"></a>tls_socket_create</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = tls_socket_create &rArr; net_alloc_socket &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_alloc_socket
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_socket
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_create_default_socket
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_oneshot_send_mac
</UL>

<P><STRONG><a name="[4a3]"></a>dns_getserver</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_get_ethif
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcps_setdns
</UL>

<P><STRONG><a name="[1cd]"></a>tls_netif_get_ethif</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tls_netif_get_ethif
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiTaskProc
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_ip_info
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_link_status
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_lan_task
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_wait_disconnect
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_get_status
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ip_info
</UL>

<P><STRONG><a name="[309]"></a>tls_socket_get_status</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_socket_get_status &rArr; get_server_conn
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_get_ethif
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_conn
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_status
</UL>

<P><STRONG><a name="[211]"></a>tls_socket_close</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tls_socket_close &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_close_socket
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_close_default_socket
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_oneshot_send_mac
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_recv
</UL>

<P><STRONG><a name="[306]"></a>tls_socket_udp_sendto</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tls_socket_udp_sendto &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_msg
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_data
</UL>

<P><STRONG><a name="[210]"></a>tls_socket_send</STRONG> (Thumb, 242 bytes, Stack size 72 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = tls_socket_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_msg
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_data
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_oneshot_send_mac
</UL>

<P><STRONG><a name="[4a5]"></a>tls_net_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_net_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ethernet_init
</UL>

<P><STRONG><a name="[4a6]"></a>lwip_strnstr</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[b2e]"></a>lwip_stricmp</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[b2f]"></a>lwip_itoa</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[b30]"></a>dns_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[516]"></a>dns_setserver</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_dns_setserver
</UL>

<P><STRONG><a name="[15a]"></a>dns_tmr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = dns_tmr &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.constdata)
</UL>
<P><STRONG><a name="[4a8]"></a>dns_gethostbyname</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[4a9]"></a>alg_napt_event_handle</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = alg_napt_event_handle &rArr; alg_napt_table_check_4tcp &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_4tcp
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_4udp
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_4ic
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_timer
</UL>

<P><STRONG><a name="[4ad]"></a>sys_timeouts_init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sys_timeouts_init &rArr; sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_p
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>
<BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[4b1]"></a>igmp_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b31]"></a>tcp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[b32]"></a>udp_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[4b0]"></a>alg_napt_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b33]"></a>netif_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[b34]"></a>memp_init_pool</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[4af]"></a>memp_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
</UL>

<P><STRONG><a name="[b35]"></a>mem_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[b36]"></a>sys_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[b37]"></a>stats_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[4ae]"></a>lwip_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lwip_init &rArr; sys_timeouts_init &rArr; sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_init
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_init
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_init
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_init
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[b38]"></a>mem_trim</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[4b2]"></a>mem_calloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_debug
</UL>

<P><STRONG><a name="[4b4]"></a>memp_malloc_pool</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_malloc_pool
</UL>

<P><STRONG><a name="[4b5]"></a>memp_free_pool</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
</UL>

<P><STRONG><a name="[4b7]"></a>icmp_dest_unreach</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = icmp_dest_unreach &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[4b8]"></a>pbuf_header_force</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pbuf_header_force &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
</UL>

<P><STRONG><a name="[4b9]"></a>igmp_input</STRONG> (Thumb, 310 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = igmp_input &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[4bb]"></a>inet_chksum_pbuf</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = inet_chksum_pbuf &rArr; lwip_standard_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
</UL>

<P><STRONG><a name="[4bc]"></a>icmp_input</STRONG> (Thumb, 384 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = icmp_input &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pbuf
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[1e7]"></a>pbuf_realloc</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = pbuf_realloc &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPNakGenAndSend
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPOfferGenAndSend
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPAckGenAndSend
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[4be]"></a>tcp_seg_copy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tcp_seg_copy &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[4c1]"></a>tcp_rexmit</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
</UL>

<P><STRONG><a name="[4c0]"></a>tcp_rexmit_fast</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_rexmit_fast &rArr; tcp_rexmit
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[4c7]"></a>tcp_input</STRONG> (Thumb, 1014 bytes, Stack size 64 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timewait_input
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input_delayed_close
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process_refused_data
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_null
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[4c9]"></a>udp_input</STRONG> (Thumb, 386 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = udp_input &rArr; icmp_dest_unreach &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[4ca]"></a>raw_input</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = raw_input
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[4cc]"></a>icmp_time_exceeded</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>

<P><STRONG><a name="[4d0]"></a>ip4_reass</STRONG> (Thumb, 526 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ip4_reass &rArr; ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_chain_frag_into_datagram_and_validate
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[109]"></a>ip4_input</STRONG> (Thumb, 630 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_input
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_input
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_input
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[4d1]"></a>ethernet_output</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ethernet_output &rArr; pbuf_header &rArr; pbuf_header_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
</UL>

<P><STRONG><a name="[1e9]"></a>etharp_update_arp_entry</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = etharp_update_arp_entry &rArr; etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPOfferGenAndSend
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPAckGenAndSend
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[4d5]"></a>etharp_input</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = etharp_input &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
</UL>

<P><STRONG><a name="[108]"></a>ethernet_input</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = ethernet_input &rArr; ip4_input &rArr; tcp_input &rArr; tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[4d6]"></a>netif_input</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_input
</UL>

<P><STRONG><a name="[4d7]"></a>igmp_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = igmp_start &rArr; igmp_lookup_group &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookup_group
</UL>
<BR>[Called By]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[4d8]"></a>igmp_report_groups</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = igmp_report_groups &rArr; igmp_delaying_member &rArr; igmp_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
</UL>
<BR>[Called By]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>

<P><STRONG><a name="[4d9]"></a>etharp_request</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
</UL>

<P><STRONG><a name="[4e0]"></a>raw_netif_ip_addr_changed</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = raw_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[4df]"></a>udp_netif_ip_addr_changed</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = udp_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[4dc]"></a>tcp_netif_ip_addr_changed</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed_pcblist
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[4de]"></a>netif_set_ipaddr</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_netif_ip_addr_changed
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_netif_ip_addr_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[4e3]"></a>netif_set_gw</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[4e2]"></a>netif_set_netmask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>

<P><STRONG><a name="[4e1]"></a>netif_set_addr</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_netmask
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_gw
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_do_netif_set_addr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>

<P><STRONG><a name="[4e4]"></a>netif_add</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_do_netif_add
</UL>

<P><STRONG><a name="[10f]"></a>netif_set_default</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[4e5]"></a>etharp_cleanup_netif</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
</UL>

<P><STRONG><a name="[114]"></a>netif_set_down</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = netif_set_down &rArr; etharp_cleanup_netif &rArr; etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[4e6]"></a>igmp_stop</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_remove
</UL>

<P><STRONG><a name="[4e7]"></a>netif_remove</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_stop
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_down
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_netif_ip_addr_changed
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_netif_ip_addr_changed
</UL>

<P><STRONG><a name="[b39]"></a>netif_find</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>netif_set_up</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = netif_set_up &rArr; netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[b3a]"></a>netif_set_status_callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[4f2]"></a>dhcp_network_changed</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>

<P><STRONG><a name="[4f3]"></a>netif_set_link_up</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_issue_reports
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif2_set_up
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_set_up
</UL>

<P><STRONG><a name="[b3b]"></a>netif_set_link_down</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[4f4]"></a>pbuf_dechain</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>

<P><STRONG><a name="[4f5]"></a>pbuf_coalesce</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
</UL>

<P><STRONG><a name="[4f6]"></a>pbuf_get_at</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
</UL>

<P><STRONG><a name="[4f7]"></a>pbuf_memcmp</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
</UL>

<P><STRONG><a name="[4f8]"></a>pbuf_memfind</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
</UL>

<P><STRONG><a name="[4f9]"></a>pbuf_strstr</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_memfind
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[4fa]"></a>sys_msleep</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>

<P><STRONG><a name="[4fb]"></a>tcp_txnow</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[b3c]"></a>tcp_setprio</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[b3d]"></a>tcp_debug_state_str</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[4fc]"></a>inet_chksum_pseudo_partial</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_cksum_pseudo_partial_base
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo_partial
</UL>

<P><STRONG><a name="[4fe]"></a>ip_chksum_pseudo_partial</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
</UL>

<P><STRONG><a name="[4ff]"></a>print_ipaddr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[1fd]"></a>sys_untimeout_p</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sys_untimeout_p &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Stop
</UL>

<P><STRONG><a name="[500]"></a>sys_restart_timeouts</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
</UL>

<P><STRONG><a name="[501]"></a>sys_timeouts_mbox_fetch_p</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sys_timeouts_mbox_fetch_p &rArr; sys_arch_mbox_fetch &rArr; tls_os_queue_receive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_now
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>

<P><STRONG><a name="[1e8]"></a>tls_get_netif</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPOfferGenAndSend
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPAckGenAndSend
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_link_status
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_RecvCb
</UL>

<P><STRONG><a name="[10c]"></a>ethernetif_input</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_deliver2lwip
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[10d]"></a>alg_input</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = alg_input &rArr; alg_udp_proc &rArr; alg_deliver2lwip &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_gre_proc
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_icmp_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[155]"></a>ip_reass_tmr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = ip_reass_tmr &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.constdata)
</UL>
<P><STRONG><a name="[b3e]"></a>ip4_addr_netmask_valid</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[510]"></a>ipaddr_addr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ipaddr_addr &rArr; ip4addr_aton
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
</UL>
<BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_init
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetHostByName
</UL>

<P><STRONG><a name="[511]"></a>ip4addr_ntoa_r</STRONG> (Thumb, 118 bytes, Stack size 36 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
</UL>

<P><STRONG><a name="[1bf]"></a>ip4addr_ntoa</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ip4addr_ntoa &rArr; ip4addr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa_r
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SockRcvTaskProc
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_init
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_unpack
</UL>

<P><STRONG><a name="[b3f]"></a>ip4_set_default_multicast_netif</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[512]"></a>ip4_output</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>

<P><STRONG><a name="[51a]"></a>dhcp_renew</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = dhcp_renew &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[51c]"></a>dhcp_supplied_address</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[51b]"></a>dhcp_release</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_supplied_address
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[157]"></a>dhcp_coarse_tmr</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = dhcp_coarse_tmr &rArr; dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>dhcp_fine_tmr</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = dhcp_fine_tmr &rArr; dhcp_release &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.constdata)
</UL>
<P><STRONG><a name="[51e]"></a>dhcp_set_struct</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[51f]"></a>dhcp_cleanup</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>

<P><STRONG><a name="[520]"></a>dhcp_stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dhcp_stop &rArr; dhcp_dec_pcb_refcount &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
</UL>
<BR>[Called By]<UL><LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[521]"></a>dhcp_start</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = dhcp_start &rArr; dhcp_discover &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[522]"></a>dhcp_inform</STRONG> (Thumb, 114 bytes, Stack size 80 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_dec_pcb_refcount
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inc_pcb_refcount
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[156]"></a>etharp_tmr</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = etharp_tmr &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.constdata)
</UL>
<P><STRONG><a name="[523]"></a>etharp_find_addr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
</UL>

<P><STRONG><a name="[b40]"></a>etharp_get_entry</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[525]"></a>etharp_query</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_ref
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[526]"></a>etharp_output</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_addr_isbroadcast_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[159]"></a>igmp_tmr</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = igmp_tmr &rArr; igmp_send &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.constdata)
</UL>
<P><STRONG><a name="[527]"></a>sys_thread_new</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = sys_thread_new &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
</UL>

<P><STRONG><a name="[52c]"></a>tcpip_output</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcpip_output &rArr; sys_mbox_trypost &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[52d]"></a>ethernetif_init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ethernetif_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_mac
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_mac
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[52e]"></a>tcpip_api_call</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_post
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_set_addr
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_add
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</UL>

<P><STRONG><a name="[52f]"></a>netifapi_netif_common</STRONG> (Thumb, 22 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = netifapi_netif_common &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcp_stop
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcp_start
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif2_set_down
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif2_set_up
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_set_down
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_set_up
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
</UL>

<P><STRONG><a name="[530]"></a>tcpip_inpkt</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcpip_inpkt &rArr; sys_mbox_trypost &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_input
</UL>

<P><STRONG><a name="[531]"></a>tcpip_input</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tcpip_input &rArr; tcpip_inpkt &rArr; sys_mbox_trypost &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_inpkt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[532]"></a>netifapi_netif_add</STRONG> (Thumb, 46 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = netifapi_netif_add &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
</UL>

<P><STRONG><a name="[533]"></a>tcpip_init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = tcpip_init &rArr; sys_thread_new &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_thread_new
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_init
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
</UL>

<P><STRONG><a name="[534]"></a>Tcpip_stack_init</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Tcpip_stack_init &rArr; netifapi_netif_add &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_status_change_cb_register
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ethernet_ip_rx_callback
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ethernet_data_rx_callback
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_init
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_add
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ethernet_init
</UL>

<P><STRONG><a name="[538]"></a>tls_ethernet_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tls_ethernet_init &rArr; Tcpip_stack_init &rArr; netifapi_netif_add &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[2a0]"></a>tls_dhcp_start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tls_dhcp_start &rArr; netifapi_netif_common &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_ip_info
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_up
</UL>

<P><STRONG><a name="[29e]"></a>tls_dhcp_stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tls_dhcp_stop &rArr; netifapi_netif_common &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_ip_info
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_up
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ip_info
</UL>

<P><STRONG><a name="[539]"></a>netifapi_netif_set_addr</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_api_call
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_set_addr
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif2_set_addr
</UL>

<P><STRONG><a name="[29f]"></a>tls_netif_set_addr</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tls_netif_set_addr &rArr; netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_ip_info
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_up
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ip_info
</UL>

<P><STRONG><a name="[53a]"></a>tls_netif_dns_setserver</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_up
</UL>

<P><STRONG><a name="[53b]"></a>tls_netif_set_up</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = tls_netif_set_up &rArr; netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>
<BR>[Called By]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_up
</UL>

<P><STRONG><a name="[53c]"></a>tls_netif_set_down</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tls_netif_set_down &rArr; netifapi_netif_common &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
</UL>

<P><STRONG><a name="[240]"></a>tls_netif_remove_status_event</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tls_netif_remove_status_event &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[1c9]"></a>tls_netif_add_status_event</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tls_netif_add_status_event &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_remove_status_event
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiTaskProc
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_set_net_status_callback
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_start_oneshot
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_init
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_init
</UL>

<P><STRONG><a name="[53d]"></a>tls_dhcps_start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_dhcps_start &rArr; DHCPS_Start &rArr; sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
</UL>

<P><STRONG><a name="[53e]"></a>tls_dhcps_stop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tls_dhcps_stop &rArr; DHCPS_Stop &rArr; sys_untimeout_p &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
</UL>

<P><STRONG><a name="[53f]"></a>tls_dnss_start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tls_dnss_start &rArr; DNSS_Start &rArr; udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
</UL>

<P><STRONG><a name="[540]"></a>tls_dnss_stop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tls_dnss_stop &rArr; DNSS_Stop &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
</UL>

<P><STRONG><a name="[2ce]"></a>tls_dhcps_getip</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tls_dhcps_getip &rArr; DHCPS_GetIpByMac
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_GetIpByMac
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_sta_detail
</UL>

<P><STRONG><a name="[541]"></a>tls_netif2_set_up</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = tls_netif2_set_up &rArr; netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
</UL>

<P><STRONG><a name="[542]"></a>tls_netif2_set_down</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tls_netif2_set_down &rArr; netifapi_netif_common &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_common
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
</UL>

<P><STRONG><a name="[543]"></a>tls_netif2_set_addr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = tls_netif2_set_addr &rArr; netifapi_netif_set_addr &rArr; tcpip_api_call &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netifapi_netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
</UL>

<P><STRONG><a name="[544]"></a>tls_dhcps_setdns</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_SetDns
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
</UL>

<P><STRONG><a name="[546]"></a>tcpip_callbackmsg_new</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>

<P><STRONG><a name="[547]"></a>tcpip_callbackmsg_delete</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[548]"></a>tcpip_trycallback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>

<P><STRONG><a name="[549]"></a>pbuf_free_callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[54a]"></a>mem_free_callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>

<P><STRONG><a name="[54b]"></a>netconn_sendto</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
</UL>

<P><STRONG><a name="[54c]"></a>netconn_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
</UL>

<P><STRONG><a name="[54d]"></a>netbuf_new</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
</UL>

<P><STRONG><a name="[54e]"></a>netbuf_alloc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[54f]"></a>netbuf_chain</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[b41]"></a>netbuf_data</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[b42]"></a>netbuf_next</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[b43]"></a>netbuf_first</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[550]"></a>lwip_gethostbyname_r</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[551]"></a>lwip_freeaddrinfo</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[552]"></a>lwip_getaddrinfo</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_gethostbyname
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_aton
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[b44]"></a>lwip_socket_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[b45]"></a>lwip_socket_thread_cleanup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)

<P><STRONG><a name="[554]"></a>lwip_read</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>

<P><STRONG><a name="[555]"></a>lwip_sendmsg</STRONG> (Thumb, 400 bytes, Stack size 48 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_new
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_writev
</UL>

<P><STRONG><a name="[556]"></a>lwip_write</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
</UL>

<P><STRONG><a name="[557]"></a>lwip_writev</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
</UL>

<P><STRONG><a name="[89]"></a>Reset_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>DMA_BRUST_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[b46]"></a>PMU_6IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_venus.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>PMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[b47]"></a>RSV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_venus.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>SDIO_RX_CMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_venus.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[b48]"></a>__user_libspace</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[558]"></a>sendchar</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sendchar
</UL>
<BR>[Called By]<UL><LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[14d]"></a>fputc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc &rArr; sendchar
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[b49]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[559]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[55a]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[55f]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_init
</UL>

<P><STRONG><a name="[55c]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configration
</UL>

<P><STRONG><a name="[55b]"></a>NVIC_Configration</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_Configration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_disable
</UL>

<P><STRONG><a name="[b4a]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[b4b]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[b4c]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[55d]"></a>tls_os_timer_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wm_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_os_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4d]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_main.o(.text), UNUSED)

<P><STRONG><a name="[560]"></a>wm_gpio_config</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, wm_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = wm_gpio_config &rArr; wm_uart1_rx_config &rArr; tls_io_cfg_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart1_tx_config
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart1_rx_config
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart0_tx_config
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart0_rx_config
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_spi_do_config
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_spi_di_config
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_spi_cs_config
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_spi_ck_config
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_af_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[568]"></a>task_start</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, wm_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1196<LI>Call Chain = task_start &rArr; wpa_supplicant_init &rArr; wpa_supplicant_init_default_configs &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_mac_addr
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_init
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_init
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_auto_mode_run
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_init
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_load_factory_default
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_gain
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_init
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_init
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_config
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ethernet_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_main.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>main</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, wm_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = main &rArr; tls_os_start_scheduler &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_start_scheduler
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_init
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_set
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[b4e]"></a>disp_version_info</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_main.o(.text), UNUSED)

<P><STRONG><a name="[577]"></a>tls_auto_reconnect</STRONG> (Thumb, 188 bytes, Stack size 128 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = tls_auto_reconnect &rArr; tls_auto_reconnect_softap &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_auto_connect_flag
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_bssid
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_flag
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect_softap
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
</UL>

<P><STRONG><a name="[578]"></a>tls_sys_task</STRONG> (Thumb, 206 bytes, Stack size 80 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 836<LI>Call Chain = tls_sys_task &rArr; tls_auto_reconnect &rArr; tls_auto_reconnect_softap &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_auto_connect_flag
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_receive
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcp_stop
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_up
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif2_set_addr
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif2_set_down
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif2_set_up
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dnss_stop
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dnss_start
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcps_stop
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcps_start
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_set_down
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_sys.o(.text)
</UL>
<P><STRONG><a name="[57a]"></a>tls_sys_send_msg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_sys_send_msg &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_status_changed
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_auto_mode_run
</UL>

<P><STRONG><a name="[573]"></a>tls_sys_auto_mode_run</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_sys_auto_mode_run &rArr; tls_sys_send_msg &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_send_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[572]"></a>tls_sys_init</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tls_sys_init &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[11b]"></a>Uart0Init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(.text)
</UL>
<P><STRONG><a name="[588]"></a>UartRegInit</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_port_init
</UL>

<P><STRONG><a name="[2a9]"></a>tls_uart_check_baudrate</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_uart_params
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_baud_rate_inside
</UL>

<P><STRONG><a name="[b4f]"></a>tls_uart_get_baud_rate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[57c]"></a>tls_uart_set_baud_rate_inside</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tls_uart_set_baud_rate_inside
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_check_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_baud_rate
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_config
</UL>

<P><STRONG><a name="[584]"></a>tls_uart_set_parity_inside</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_parity
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_config
</UL>

<P><STRONG><a name="[b50]"></a>tls_uart_get_parity</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[585]"></a>tls_uart_set_data_bits</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_uart_set_data_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_config
</UL>

<P><STRONG><a name="[b51]"></a>tls_uart_get_data_bits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[586]"></a>tls_uart_set_stop_bits_inside</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_stop_bits
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_config
</UL>

<P><STRONG><a name="[b52]"></a>tls_uart_get_stop_bits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[581]"></a>tls_uart_set_flow_ctrl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_fc_status
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_config
</UL>

<P><STRONG><a name="[352]"></a>tls_uart_set_fc_status</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_uart_set_fc_status &rArr; tls_uart_tx_chars &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_enable
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_flow_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart0_task_rx_cb
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_uart0_mode
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_uart1_mode
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart1_task_rx_cb
</UL>

<P><STRONG><a name="[317]"></a>tls_uart_rx_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entm_proc
</UL>

<P><STRONG><a name="[318]"></a>tls_uart_rx_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entm_proc
</UL>

<P><STRONG><a name="[583]"></a>tls_uart_config</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tls_uart_config &rArr; tls_uart_set_baud_rate_inside
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_flow_ctrl
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_stop_bits_inside
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_data_bits
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_parity_inside
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_baud_rate_inside
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_port_init
</UL>

<P><STRONG><a name="[b53]"></a>tls_uart_poll_put_char</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b54]"></a>tls_uart_poll_get_char</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>tls_uart_tx_remain_len</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_uart_tx_remain_len &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
</UL>

<P><STRONG><a name="[34f]"></a>tls_uart_fill_buf</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tls_uart_fill_buf &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_write_async
</UL>

<P><STRONG><a name="[dd]"></a>tls_uart_free_tx_sent_data</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tls_uart_free_tx_sent_data &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[350]"></a>tls_uart_tx_chars_start</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tls_uart_tx_chars_start &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_write_async
</UL>

<P><STRONG><a name="[35a]"></a>tls_set_uart_rx_status</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tls_set_uart_rx_status &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_net_send
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[a9]"></a>UART0_IRQHandler</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UART0_IRQHandler &rArr; uart_handle_cts_change &rArr; tls_uart_tx_chars &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_uart_rx_status
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_handle_cts_change
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>UART1_IRQHandler</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UART1_IRQHandler &rArr; uart_handle_cts_change &rArr; tls_uart_tx_chars &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_handle_cts_change
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>UART2_IRQHandler</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UART2_IRQHandler &rArr; uart_handle_cts_change &rArr; tls_uart_tx_chars &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_uart_rx_status
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_handle_cts_change
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[319]"></a>tls_irq_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tls_irq_enable &rArr; NVIC_Configration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configration
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_init
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entm_proc
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_port_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_create
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_slave_spi_init
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_init
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_watchdog_init
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pmu_standby_start
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pmu_sdio_isr_register
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pmu_gpio_isr_register
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pmu_timer0_isr_register
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pmu_timer1_isr_register
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_port_init
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_init
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_irq_enable
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_isr_register
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rtc_timer_start
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rtc_isr_register
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_dma_write
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_irq_register
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[368]"></a>tls_uart_port_init</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tls_uart_port_init &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_config
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartRegInit
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
</UL>

<P><STRONG><a name="[1b8]"></a>tls_uart_rx_callback_register</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_open
</UL>

<P><STRONG><a name="[369]"></a>tls_uart_tx_callback_register</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
</UL>

<P><STRONG><a name="[1b0]"></a>tls_uart_read</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_uart_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1RxHandle
</UL>

<P><STRONG><a name="[58c]"></a>tls_dma_start</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockRead
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockWrite
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma_config
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma_config
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_dma_write
</UL>

<P><STRONG><a name="[589]"></a>tls_dma_irq_register</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_init
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_dma_write
</UL>

<P><STRONG><a name="[58a]"></a>tls_dma_request</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tls_dma_request &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockRead
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockWrite
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_init
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_dma_write
</UL>

<P><STRONG><a name="[58b]"></a>tls_uart_dma_write</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_request
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_irq_register
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_start
</UL>

<P><STRONG><a name="[58d]"></a>tls_uart_write_async</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_uart_write_async &rArr; tls_uart_tx_chars_start &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars_start
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_fill_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_write
</UL>

<P><STRONG><a name="[b55]"></a>tls_uart_tx_length</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>tls_uart_write</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tls_uart_write &rArr; tls_uart_write_async &rArr; tls_uart_tx_chars_start &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_delete
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_write_async
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadV9261fReg
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteV9261fReg
</UL>

<P><STRONG><a name="[1b5]"></a>tls_uart_set_parity</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_parity_inside
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
</UL>

<P><STRONG><a name="[1b4]"></a>tls_uart_set_baud_rate</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tls_uart_set_baud_rate &rArr; tls_uart_set_baud_rate_inside
</UL>
<BR>[Calls]<UL><LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_baud_rate_inside
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
</UL>

<P><STRONG><a name="[58e]"></a>tls_uart_set_stop_bits</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_stop_bits_inside
</UL>

<P><STRONG><a name="[b56]"></a>tls_uart_dma_off</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>TIM0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM0_IRQHandler &rArr; timer_irq_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>TIM1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM1_IRQHandler &rArr; timer_irq_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>TIM2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM2_IRQHandler &rArr; timer_irq_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>TIM3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler &rArr; timer_irq_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>TIM4_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM4_IRQHandler &rArr; timer_irq_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>TIM5_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM5_IRQHandler &rArr; timer_irq_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[55e]"></a>tls_sys_clk_get</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_init
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_create
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_sclk
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMasterInit
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_init
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_watchdog_init
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_set_frequency
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_init
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_freq_set
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_setup
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_power_save
</UL>

<P><STRONG><a name="[357]"></a>tls_timer_create</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = tls_timer_create &rArr; tls_irq_enable &rArr; NVIC_Configration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer2_start
</UL>

<P><STRONG><a name="[358]"></a>tls_timer_start</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tls_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer2_start
</UL>

<P><STRONG><a name="[590]"></a>tls_timer_stop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_destroy
</UL>

<P><STRONG><a name="[355]"></a>tls_timer_destroy</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_timer_destroy &rArr; tls_timer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer2_stop
</UL>

<P><STRONG><a name="[592]"></a>tls_dma_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMasterInit
</UL>

<P><STRONG><a name="[597]"></a>spiWaitIdle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockRead
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockWrite
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read
</UL>

<P><STRONG><a name="[594]"></a>tls_dma_stop</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_free
</UL>

<P><STRONG><a name="[593]"></a>tls_dma_free</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tls_dma_free
</UL>
<BR>[Calls]<UL><LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockRead
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockWrite
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma_callback
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma_callback
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_stop
</UL>

<P><STRONG><a name="[595]"></a>tls_dma_wait_complt</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tls_dma_wait_complt &rArr; tls_os_time_delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockRead
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockWrite
</UL>

<P><STRONG><a name="[599]"></a>tls_spi_trans_type</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tls_spi_trans_type &rArr; SpiMasterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_endian
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMasterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
</UL>

<P><STRONG><a name="[574]"></a>tls_sys_clk_set</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_sys_clk_set
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_scheduler
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_sleep
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh5_derive_shared
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh5_init
</UL>

<P><STRONG><a name="[a7]"></a>SPI_LS_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SPI_LS_IRQHandler &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[5a5]"></a>tls_spi_setup</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = tls_spi_setup &rArr; SpiMasterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiMasterInit
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_probe
</UL>

<P><STRONG><a name="[5a6]"></a>tls_spi_async</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_spi_async &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_sync
</UL>

<P><STRONG><a name="[5a7]"></a>tls_spi_sync</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_delete
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_async
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write_with_cmd
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
</UL>

<P><STRONG><a name="[5a8]"></a>tls_spi_read_with_cmd</STRONG> (Thumb, 194 bytes, Stack size 104 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tls_spi_read_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_message_init
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockRead
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_sync
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_read
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_probe
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_wait_flash_ready
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_wait_write_enable
</UL>

<P><STRONG><a name="[5aa]"></a>tls_spi_read</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_message_init
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockRead
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_sync
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWaitIdle
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[5ab]"></a>tls_spi_write</STRONG> (Thumb, 228 bytes, Stack size 80 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tls_spi_write &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_message_init
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockWrite
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_sync
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWaitIdle
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_chip_erase
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_erase
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_write_enable
</UL>

<P><STRONG><a name="[5ac]"></a>tls_spi_write_with_cmd</STRONG> (Thumb, 154 bytes, Stack size 104 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = tls_spi_write_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_message_init
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiDmaBlockWrite
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_sync
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_page_write
</UL>

<P><STRONG><a name="[56a]"></a>tls_spi_init</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tls_spi_init &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_delete
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_delete
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_sclk
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_chipselect_mode
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_endian
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_mode
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_trans_type
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[b57]"></a>tls_spi_exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[393]"></a>tls_get_isr_count</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_get_isr_count
</UL>
<BR>[Calls]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portGET_IPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_receive
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_mailbox_receive
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_mailbox_send
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
</UL>

<P><STRONG><a name="[16c]"></a>tls_gpio_write</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tls_gpio_write &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_isr_count
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserLedCtrl
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1622_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_All
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleandisp
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W1622_success
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W1622_q
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sendcmd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_LH
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBit_HL
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRelayCtrl
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserLedInit
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_deactive
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_colreset
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_rst_high
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_rst_low
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_poweroff
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_poweron
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_slave_sel
</UL>

<P><STRONG><a name="[5ae]"></a>tls_io_cfg_set</STRONG> (Thumb, 374 bytes, Stack size 20 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tls_io_cfg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart1_tx_config
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart1_rx_config
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2c_sda_config
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2c_scl_config
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_cfg
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart0_tx_config
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart0_rx_config
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_spi_do_config
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_spi_di_config
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_spi_cs_config
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_spi_ck_config
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_swd_config
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_pwmbrk_config
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_pwm5_config
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_pwm4_config
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_pwm3_config
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_pwm2_config
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_pwm1_config
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2s_extclk_config
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2s_mclk_config
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2s_s_di_config
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2s_s_ws_config
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2s_s_ck_config
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2s_m_do_config
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2s_m_ws_config
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2s_m_ck_config
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart2_cts_config
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart2_rts_scclk_config
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart2_rx_config
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart2_tx_scio_config
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart1_cts_config
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart1_rts_config
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart0_cts_config
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart0_rts_config
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sdio_cmd_config
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sdio_config
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_hspi_gpio_config
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_io_clk_config
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_io_config
</UL>

<P><STRONG><a name="[16b]"></a>tls_gpio_cfg</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tls_gpio_cfg &rArr; tls_io_cfg_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanTimerProc
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRelayCtrl
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserLedInit
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_rst_high
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_rst_low
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_poweroff
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_poweron
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_io_clk_config
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_slave_sel
</UL>

<P><STRONG><a name="[5af]"></a>tls_spi_slave_sel</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_cfg
</UL>

<P><STRONG><a name="[b58]"></a>tls_set_rtc</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b59]"></a>tls_get_rtc</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>PMU_RTC_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[5b0]"></a>tls_rtc_isr_register</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
</UL>

<P><STRONG><a name="[5b1]"></a>tls_rtc_timer_start</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
</UL>

<P><STRONG><a name="[316]"></a>tls_irq_disable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tls_irq_disable &rArr; NVIC_Configration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configration
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;entm_proc
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_irq_disable
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rtc_timer_stop
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[5b2]"></a>tls_rtc_timer_stop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_disable
</UL>

<P><STRONG><a name="[b5]"></a>PWM_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[5b3]"></a>tls_pwm_isr_register</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
</UL>

<P><STRONG><a name="[5b9]"></a>tls_pwm_duty_config</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_duty_set
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_init
</UL>

<P><STRONG><a name="[5b8]"></a>tls_pwm_freq_config</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_freq_set
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_cap_init
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_init
</UL>

<P><STRONG><a name="[5b5]"></a>tls_pwm_out_mode_config</STRONG> (Thumb, 198 bytes, Stack size 20 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_init
</UL>

<P><STRONG><a name="[5b7]"></a>tls_pwm_cnt_type_config</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_cap_init
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_init
</UL>

<P><STRONG><a name="[5ba]"></a>tls_pwm_loop_mode_config</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_cap_init
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_init
</UL>

<P><STRONG><a name="[5bb]"></a>tls_pwm_out_inverse_cmd</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_init
</UL>

<P><STRONG><a name="[5bc]"></a>tls_pwm_stoptime_by_period_config</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_init
</UL>

<P><STRONG><a name="[5be]"></a>tls_pwm_output_en_cmd</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_cap_init
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_init
</UL>

<P><STRONG><a name="[5b6]"></a>tls_pwm_deadzone_config</STRONG> (Thumb, 142 bytes, Stack size 12 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_init
</UL>

<P><STRONG><a name="[5c0]"></a>tls_pwm_capture_inverse_cmd</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_cap_init
</UL>

<P><STRONG><a name="[b5a]"></a>tls_pwm_brake_mode_config</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[5c1]"></a>tls_pwm_capture_mode_config</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_cap_init
</UL>

<P><STRONG><a name="[5bd]"></a>tls_pwm_stoptime_irq_cmd</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_init
</UL>

<P><STRONG><a name="[5c2]"></a>tls_pwm_capture_irq_type_config</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_cap_init
</UL>

<P><STRONG><a name="[5b4]"></a>tls_pwm_out_init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_stoptime_irq_cmd
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_deadzone_config
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_output_en_cmd
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_stoptime_by_period_config
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_inverse_cmd
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_loop_mode_config
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_cnt_type_config
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_mode_config
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_freq_config
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_duty_config
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_init
</UL>

<P><STRONG><a name="[5bf]"></a>tls_pwm_cap_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_capture_irq_type_config
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_capture_mode_config
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_capture_inverse_cmd
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_output_en_cmd
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_loop_mode_config
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_cnt_type_config
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_freq_config
</UL>

<P><STRONG><a name="[5c5]"></a>tls_pwm_start</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_duty_set
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_freq_set
</UL>

<P><STRONG><a name="[5c4]"></a>tls_pwm_stop</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_duty_set
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_freq_set
</UL>

<P><STRONG><a name="[5c3]"></a>tls_pwm_freq_set</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_stop
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_start
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_freq_config
</UL>

<P><STRONG><a name="[5c6]"></a>tls_pwm_duty_set</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_stop
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_start
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_duty_config
</UL>

<P><STRONG><a name="[5c7]"></a>tls_pwm_init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_pwm_out_init
</UL>

<P><STRONG><a name="[b5b]"></a>tls_irq_handler_dummy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b5c]"></a>tls_irq_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[5c8]"></a>tls_irq_register_handler</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
</UL>

<P><STRONG><a name="[b5d]"></a>OS_CPU_IRQ_ISR_Handler</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>tls_i2c_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tls_i2c_init &rArr; tls_irq_enable &rArr; NVIC_Configration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_init
</UL>

<P><STRONG><a name="[193]"></a>tls_i2c_stop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_wait_ack
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReadSerial
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteSerial
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCFlag_ReadDate
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadDate
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCFlag_WriteDate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteDate
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRTC_Disable
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRTC_Enable
</UL>

<P><STRONG><a name="[192]"></a>tls_i2c_wait_ack</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_i2c_wait_ack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_stop
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReadSerial
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteSerial
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCFlag_ReadDate
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadDate
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCFlag_WriteDate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteDate
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRTC_Disable
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRTC_Enable
</UL>

<P><STRONG><a name="[191]"></a>tls_i2c_write_byte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReadSerial
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CWriteSerial
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCFlag_ReadDate
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadDate
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCFlag_WriteDate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteDate
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRTC_Disable
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRTC_Enable
</UL>

<P><STRONG><a name="[198]"></a>tls_i2c_read_byte</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CReadSerial
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCFlag_ReadDate
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadDate
</UL>

<P><STRONG><a name="[b5e]"></a>wm_i2c_start_write_it</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b5f]"></a>wm_i2c_start_read_it</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b60]"></a>wm_i2c_transfer_done_register</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>I2C_IRQHandler</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[5cc]"></a>hspi_rx_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hspi_rx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_slave_spi_init
</UL>

<P><STRONG><a name="[5cd]"></a>hspi_tx_init</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hspi_tx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_slave_spi_init
</UL>

<P><STRONG><a name="[5c9]"></a>hspi_free_rxdesc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_TX_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>SDIO_RX_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_RX_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>SDIO_TX_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDIO_TX_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_free_rxdesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>SDIO_TX_CMD_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_TX_CMD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>SPI_HS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_HS_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[5ce]"></a>hspi_regs_cfg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_high_speed_interface_type
</UL>

<P><STRONG><a name="[5cb]"></a>sdio_init_cis</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsdio_regs_cfg
</UL>

<P><STRONG><a name="[5ca]"></a>hsdio_regs_cfg</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hsdio_regs_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdio_init_cis
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_high_speed_interface_type
</UL>

<P><STRONG><a name="[349]"></a>tls_slave_spi_init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tls_slave_spi_init &rArr; tls_irq_enable &rArr; NVIC_Configration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_tx_init
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_rx_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_init
</UL>

<P><STRONG><a name="[34a]"></a>tls_set_high_speed_interface_type</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tls_set_high_speed_interface_type &rArr; hsdio_regs_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hsdio_regs_cfg
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_regs_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_init
</UL>

<P><STRONG><a name="[b61]"></a>tls_set_hspi_user_mode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[34b]"></a>tls_hspi_rx_cmd_callback_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_init
</UL>

<P><STRONG><a name="[34c]"></a>tls_hspi_rx_data_callback_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_init
</UL>

<P><STRONG><a name="[34d]"></a>tls_hspi_tx_data_callback_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_init
</UL>

<P><STRONG><a name="[5cf]"></a>tls_hspi_tx_data</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[ab]"></a>GPIOA_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>GPIOB_IRQHandler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOB_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[16e]"></a>tls_gpio_read</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_gpio_read
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScanTimerProc
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserLedGetStatus
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRelayStatus
</UL>

<P><STRONG><a name="[5d0]"></a>tls_gpio_irq_enable</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
</UL>

<P><STRONG><a name="[5d1]"></a>tls_gpio_irq_disable</STRONG> (Thumb, 158 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_disable
</UL>

<P><STRONG><a name="[b62]"></a>tls_get_gpio_irq_status</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b63]"></a>tls_clr_gpio_irq_status</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b64]"></a>tls_gpio_isr_register</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[5d3]"></a>readByCMD</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = readByCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashRead
</UL>

<P><STRONG><a name="[5d2]"></a>flashRead</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flashRead &rArr; readByCMD
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readByCMD
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_chip_erase
</UL>

<P><STRONG><a name="[2c4]"></a>tls_fls_read</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tls_fls_read &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashDensity
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashRead
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flsr_proc
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_wr_flash
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rf_vcg_ctrl_op
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_load_user
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_freq_err_op
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_update_header
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_get
</UL>

<P><STRONG><a name="[5d5]"></a>tls_ft_param_get</STRONG> (Thumb, 104 bytes, Stack size 144 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tls_ft_param_get &rArr; tls_fls_read &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_mac_addr
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_lo
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_iq_phase
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_iq_gain
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_gain
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_rx_iq_phase
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_rx_iq_gain
</UL>

<P><STRONG><a name="[5d9]"></a>writeESMTBpBit</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = writeESMTBpBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashunlock
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlock
</UL>

<P><STRONG><a name="[5d8]"></a>writeGDBpBit</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = writeGDBpBit
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashunlock
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlock
</UL>

<P><STRONG><a name="[5d7]"></a>readRID</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashunlock
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlock
</UL>

<P><STRONG><a name="[5d6]"></a>flashlock</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flashlock &rArr; writeGDBpBit
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRID
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeGDBpBit
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeESMTBpBit
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rf_vcg_ctrl_op
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_freq_err_op
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_flash_lock
</UL>

<P><STRONG><a name="[5da]"></a>tls_flash_lock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlock
</UL>

<P><STRONG><a name="[2c3]"></a>tls_fls_write</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashDensity
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;programPage
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashRead
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flsw_proc
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_wr_flash
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rf_vcg_ctrl_op
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_save_user_default
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_freq_err_op
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_update_header
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>

<P><STRONG><a name="[5de]"></a>flashunlock</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flashunlock &rArr; writeGDBpBit
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readRID
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeGDBpBit
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeESMTBpBit
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rf_vcg_ctrl_op
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_freq_err_op
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_flash_unlock
</UL>

<P><STRONG><a name="[5df]"></a>tls_flash_unlock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashunlock
</UL>

<P><STRONG><a name="[5e0]"></a>tls_ft_param_set</STRONG> (Thumb, 186 bytes, Stack size 160 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_init
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_update
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_init
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_final
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashunlock
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlock
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_lo
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_iq_phase
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_iq_gain
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_gain
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_mac_addr
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_rx_iq_phase
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_rx_iq_gain
</UL>

<P><STRONG><a name="[20f]"></a>tls_get_mac_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tls_get_mac_addr &rArr; tls_ft_param_get &rArr; tls_fls_read &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decode_new_oneshot_data
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_oneshot_send_mac
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[32f]"></a>tls_set_mac_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = tls_set_mac_addr &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_proc
</UL>

<P><STRONG><a name="[56f]"></a>tls_get_tx_gain</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tls_get_tx_gain &rArr; tls_ft_param_get &rArr; tls_fls_read &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[32d]"></a>tls_set_tx_gain</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = tls_set_tx_gain &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txg_proc
</UL>

<P><STRONG><a name="[338]"></a>tls_get_tx_lo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tls_get_tx_lo &rArr; tls_ft_param_get &rArr; tls_fls_read &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_lo_proc
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
</UL>

<P><STRONG><a name="[337]"></a>tls_set_tx_lo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_lo_proc
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
</UL>

<P><STRONG><a name="[33b]"></a>tls_get_tx_iq_gain</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tls_get_tx_iq_gain &rArr; tls_ft_param_get &rArr; tls_fls_read &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_iq_mismatch_proc
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_bbp_init
</UL>

<P><STRONG><a name="[339]"></a>tls_set_tx_iq_gain</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = tls_set_tx_iq_gain &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_iq_mismatch_proc
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
</UL>

<P><STRONG><a name="[5e4]"></a>tls_get_rx_iq_gain</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_get
</UL>

<P><STRONG><a name="[5e5]"></a>tls_set_rx_iq_gain</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>

<P><STRONG><a name="[33c]"></a>tls_get_tx_iq_phase</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tls_get_tx_iq_phase &rArr; tls_ft_param_get &rArr; tls_fls_read &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_iq_mismatch_proc
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_bbp_init
</UL>

<P><STRONG><a name="[33a]"></a>tls_set_tx_iq_phase</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = tls_set_tx_iq_phase &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_iq_mismatch_proc
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
</UL>

<P><STRONG><a name="[5e6]"></a>tls_get_rx_iq_phase</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_get
</UL>

<P><STRONG><a name="[5e7]"></a>tls_set_rx_iq_phase</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>

<P><STRONG><a name="[33d]"></a>tls_freq_err_op</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tls_freq_err_op &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashunlock
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlock
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_freq_error_proc
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
</UL>

<P><STRONG><a name="[33e]"></a>tls_rf_vcg_ctrl_op</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tls_rf_vcg_ctrl_op &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashunlock
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashlock
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rf_vcg_ctrl_proc
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
</UL>

<P><STRONG><a name="[5e9]"></a>tls_dma_irq_clr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_irq_proc
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_clear_irq
</UL>

<P><STRONG><a name="[9f]"></a>DMA_Channel0_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_Channel0_IRQHandler &rArr; dma_irq_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_irq_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>DMA_Channel1_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_Channel1_IRQHandler &rArr; dma_irq_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_irq_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>DMA_Channel2_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_Channel2_IRQHandler &rArr; dma_irq_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_irq_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>DMA_Channel3_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_Channel3_IRQHandler &rArr; dma_irq_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_irq_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>DMA_Channel4_7_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_Channel4_7_IRQHandler &rArr; dma_irq_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_irq_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[b65]"></a>tls_dma_start_by_wrap</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[5ea]"></a>tls_adc_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_request
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_irq_register
</UL>

<P><STRONG><a name="[5eb]"></a>tls_adc_clear_irq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_irq_clr
</UL>

<P><STRONG><a name="[b66]"></a>tls_adc_irq_register</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b67]"></a>tls_read_adc_result</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[5ec]"></a>tls_adc_io_config</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[b68]"></a>tls_adc_start_with_cpu</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[5ed]"></a>tls_adc_start_with_dma</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[5ee]"></a>tls_adc_stop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_free
</UL>

<P><STRONG><a name="[b69]"></a>tls_adc_config_cmp_reg</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b6a]"></a>tls_adc_reference_sel</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b6b]"></a>tls_adc_calibration_start</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b6c]"></a>tls_adc_calibration_stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b6d]"></a>tls_adc_voltage_start</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b6e]"></a>tls_io_cfg_get</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[5ef]"></a>tls_i2s_set_freq</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_read
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_config
</UL>

<P><STRONG><a name="[5f1]"></a>tls_i2s_config</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_set_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_port_init
</UL>

<P><STRONG><a name="[5f3]"></a>tls_i2s_port_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_config
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_test
</UL>

<P><STRONG><a name="[5f5]"></a>wm_i2s_set_freq_exclk</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_read
</UL>

<P><STRONG><a name="[b6]"></a>I2S_IRQHandler</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = I2S_IRQHandler &rArr; tls_i2s_fill_txfifo &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_read
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_fill_txfifo
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_int_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[b6f]"></a>tls_i2s_rx_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b70]"></a>tls_i2s_tx_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[5f8]"></a>tls_i2s_tx_block</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_delete
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_int_config
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_set_txth
</UL>

<P><STRONG><a name="[5fa]"></a>tls_i2s_tx_nonblock</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_int_config
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_set_txth
</UL>

<P><STRONG><a name="[5fb]"></a>tls_i2s_rx_nonblock</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_int_config
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_set_rxth
</UL>

<P><STRONG><a name="[5fd]"></a>tls_i2s_tx_dma_config</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_start
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_int_config
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_set_txth
</UL>
<BR>[Called By]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma
</UL>

<P><STRONG><a name="[5fe]"></a>tls_i2s_tx_dma</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma_config
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_stop
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_request
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_irq_register
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_test
</UL>

<P><STRONG><a name="[5ff]"></a>tls_i2s_rx_dma_config</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_start
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_int_config
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_set_rxth
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma
</UL>

<P><STRONG><a name="[600]"></a>tls_i2s_rx_dma</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma_config
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_stop
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_request
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_irq_register
</UL>

<P><STRONG><a name="[601]"></a>tls_i2s_tx_dma_callback</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tls_i2s_tx_dma_callback &rArr; tls_bitband_write
</UL>
<BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_read
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.text)
</UL>
<P><STRONG><a name="[602]"></a>tls_i2s_rx_dma_callback</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_free
</UL>

<P><STRONG><a name="[603]"></a>tls_i2s_rx_callback</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
</UL>

<P><STRONG><a name="[604]"></a>tls_i2s_test</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_port_init
</UL>

<P><STRONG><a name="[605]"></a>tls_lcd_fresh_ratio</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_read
</UL>
<BR>[Called By]<UL><LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lcd_init
</UL>

<P><STRONG><a name="[606]"></a>tls_lcd_seg_set</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_read
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
</UL>

<P><STRONG><a name="[b71]"></a>tls_lcd_io_config</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b72]"></a>tls_lcd_vlcd_sel</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b73]"></a>tls_lcd_duty_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b74]"></a>tls_lcd_bias_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b75]"></a>tls_lcd_vdd_sel</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[607]"></a>tls_lcd_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lcd_fresh_ratio
</UL>

<P><STRONG><a name="[9b]"></a>PMU_TIMER1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>PMU_TIMER0_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>PMU_GPIO_WAKE_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>PMU_SDIO_WAKE_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[608]"></a>tls_pmu_timer1_isr_register</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
</UL>

<P><STRONG><a name="[609]"></a>tls_pmu_timer0_isr_register</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
</UL>

<P><STRONG><a name="[60a]"></a>tls_pmu_gpio_isr_register</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
</UL>

<P><STRONG><a name="[60b]"></a>tls_pmu_sdio_isr_register</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
</UL>

<P><STRONG><a name="[b76]"></a>tls_pmu_clk_select</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b77]"></a>tls_pmu_timer0_start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b78]"></a>tls_pmu_timer0_stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b79]"></a>tls_pmu_timer1_start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b7a]"></a>tls_pmu_timer1_stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[60c]"></a>tls_pmu_standby_start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
</UL>

<P><STRONG><a name="[60d]"></a>wm_sc_io_clk_config</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_cfg
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_deactive
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_colreset
</UL>

<P><STRONG><a name="[b7b]"></a>wm_sc_set_bgt</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[60e]"></a>wm_sc_tx_retry_times</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
</UL>

<P><STRONG><a name="[60f]"></a>wm_sc_rx_retry_times</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
</UL>

<P><STRONG><a name="[616]"></a>wm_sc_set_etu</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_colreset
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_hotreset
</UL>

<P><STRONG><a name="[610]"></a>wm_sc_set_frequency</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_colreset
</UL>

<P><STRONG><a name="[b7c]"></a>wm_sc_powerInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[611]"></a>wm_sc_poweron</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_colreset
</UL>

<P><STRONG><a name="[612]"></a>wm_sc_poweroff</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_deactive
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_colreset
</UL>

<P><STRONG><a name="[613]"></a>wm_sc_rst_low</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_deactive
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_colreset
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_hotreset
</UL>

<P><STRONG><a name="[614]"></a>wm_sc_rst_high</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_colreset
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_hotreset
</UL>

<P><STRONG><a name="[615]"></a>wm_sc_hotreset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_rst_high
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_rst_low
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_set_etu
</UL>

<P><STRONG><a name="[617]"></a>wm_sc_colreset</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_rst_high
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_rst_low
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_poweroff
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_poweron
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_set_frequency
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_set_etu
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_io_clk_config
</UL>

<P><STRONG><a name="[618]"></a>wm_sc_deactive</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_write
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_rst_low
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_poweroff
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_io_clk_config
</UL>

<P><STRONG><a name="[619]"></a>tls_fls_erase</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tls_fls_erase &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashDensity
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_flush_sector
</UL>

<P><STRONG><a name="[61b]"></a>tls_fls_fast_write_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tls_fls_fast_write_init &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_enter
</UL>

<P><STRONG><a name="[61c]"></a>tls_fls_fast_write_destroy</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_fls_fast_write_destroy &rArr; tls_fls_flush_sector &rArr; tls_fls_erase &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_flush_sector
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
</UL>

<P><STRONG><a name="[61d]"></a>tls_fls_fast_write</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tls_fls_fast_write &rArr; tls_fls_flush_sector &rArr; tls_fls_erase &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashDensity
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_flush_sector
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
</UL>

<P><STRONG><a name="[61e]"></a>tls_fls_chip_erase</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashDensity
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flashRead
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseSector
</UL>

<P><STRONG><a name="[61f]"></a>tls_fls_get_param</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashDensity
</UL>

<P><STRONG><a name="[56c]"></a>tls_fls_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tls_fls_init &rArr; tls_os_sem_create &rArr; xQueueCreateCountingSemaphore &rArr; xQueueCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[b7d]"></a>tls_fls_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[620]"></a>tls_spifls_read</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
</UL>

<P><STRONG><a name="[b7e]"></a>tls_spifls_fast_read</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[622]"></a>tls_spifls_page_write</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_write
</UL>

<P><STRONG><a name="[621]"></a>tls_spifls_write</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_page_write
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[623]"></a>tls_spifls_erase</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
</UL>

<P><STRONG><a name="[b7f]"></a>tls_spifls_chip_erase</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[624]"></a>tls_spifls_get_param</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
</UL>

<P><STRONG><a name="[625]"></a>tls_spifls_drv_register</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_spifls_drv_register &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_install
</UL>

<P><STRONG><a name="[b80]"></a>tls_spifls_drv_unregister</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[626]"></a>tls_spifls_probe</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tls_spifls_probe &rArr; tls_spi_read_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_setup
</UL>
<BR>[Called By]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_install
</UL>

<P><STRONG><a name="[627]"></a>tls_spifls_drv_install</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = tls_spifls_drv_install &rArr; tls_spifls_probe &rArr; tls_spi_read_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_probe
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_register
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_init
</UL>

<P><STRONG><a name="[56b]"></a>tls_spifls_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = tls_spifls_init &rArr; tls_spifls_drv_install &rArr; tls_spifls_probe &rArr; tls_spi_read_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_install
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[b81]"></a>tls_spifls_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>WDG_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WDG_IRQHandler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[3b2]"></a>tls_watchdog_clr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
</UL>

<P><STRONG><a name="[62b]"></a>tls_watchdog_init</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
</UL>

<P><STRONG><a name="[25c]"></a>tls_sys_reset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetTimerProc
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
</UL>

<P><STRONG><a name="[62c]"></a>wm_hspi_gpio_config</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[565]"></a>wm_spi_ck_config</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wm_spi_ck_config &rArr; tls_io_cfg_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_config
</UL>

<P><STRONG><a name="[564]"></a>wm_spi_cs_config</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wm_spi_cs_config &rArr; tls_io_cfg_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_config
</UL>

<P><STRONG><a name="[566]"></a>wm_spi_di_config</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wm_spi_di_config &rArr; tls_io_cfg_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_config
</UL>

<P><STRONG><a name="[567]"></a>wm_spi_do_config</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wm_spi_do_config &rArr; tls_io_cfg_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_config
</UL>

<P><STRONG><a name="[62d]"></a>wm_sdio_config</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[62e]"></a>wm_sdio_cmd_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[562]"></a>wm_uart0_tx_config</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wm_uart0_tx_config &rArr; tls_io_cfg_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_config
</UL>

<P><STRONG><a name="[563]"></a>wm_uart0_rx_config</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = wm_uart0_rx_config &rArr; tls_io_cfg_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_config
</UL>

<P><STRONG><a name="[62f]"></a>wm_uart0_rts_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[630]"></a>wm_uart0_cts_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[1b3]"></a>wm_uart1_tx_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wm_uart1_tx_config &rArr; tls_io_cfg_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_config
</UL>

<P><STRONG><a name="[1b2]"></a>wm_uart1_rx_config</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = wm_uart1_rx_config &rArr; tls_io_cfg_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_config
</UL>

<P><STRONG><a name="[631]"></a>wm_uart1_rts_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[632]"></a>wm_uart1_cts_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[633]"></a>wm_uart2_tx_scio_config</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[634]"></a>wm_uart2_rx_config</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_write
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[635]"></a>wm_uart2_rts_scclk_config</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[636]"></a>wm_uart2_cts_config</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[637]"></a>wm_i2s_m_ck_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[638]"></a>wm_i2s_m_ws_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[639]"></a>wm_i2s_m_do_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[63a]"></a>wm_i2s_s_ck_config</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[63b]"></a>wm_i2s_s_ws_config</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[63c]"></a>wm_i2s_s_di_config</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[63d]"></a>wm_i2s_mclk_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[63e]"></a>wm_i2s_extclk_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[1a8]"></a>wm_i2c_scl_config</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wm_i2c_scl_config &rArr; tls_io_cfg_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_init
</UL>

<P><STRONG><a name="[1a9]"></a>wm_i2c_sda_config</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wm_i2c_sda_config &rArr; tls_io_cfg_set
</UL>
<BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_init
</UL>

<P><STRONG><a name="[63f]"></a>wm_pwm1_config</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[640]"></a>wm_pwm2_config</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[641]"></a>wm_pwm3_config</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[642]"></a>wm_pwm4_config</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[643]"></a>wm_pwm5_config</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[644]"></a>wm_pwmbrk_config</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[645]"></a>wm_swd_config</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_io_cfg_set
</UL>

<P><STRONG><a name="[561]"></a>wm_gpio_af_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_gpio_config
</UL>

<P><STRONG><a name="[5e3]"></a>tls_crypto_crc_final</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>

<P><STRONG><a name="[646]"></a>Reflect</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Reflect
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_update
</UL>

<P><STRONG><a name="[5e2]"></a>tls_crypto_crc_update</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tls_crypto_crc_update &rArr; Reflect
</UL>
<BR>[Calls]<UL><LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reflect
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_update_header
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_header_check
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>

<P><STRONG><a name="[5e1]"></a>tls_crypto_crc_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>

<P><STRONG><a name="[1c8]"></a>mem_free_debug</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketUdp
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_proc
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skstt_proc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjoin_proc
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_http_client_err_callback
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_http_client_recv_callback
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_state
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_dis
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_join
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_conn
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tx_fail
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_crc_err
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_sta_leave
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_sta_join
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_linkdown
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_failed
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_success
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_init_cmplt
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_parse_func
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_exec
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_tx_msg_buffer
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_sta_detail
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_net
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_key
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join_net
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_key
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_wscan_cmplt
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_scan_cmplt
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_atcmd_line
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_rsp
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_tx_msg
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_send_tx_msg
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_fwup_rsp
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_tx
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_net_status_changed
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_rpt
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_rpt_handle
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_recvmit
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_recvmit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decode_new_oneshot_data
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_create
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_close
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_remove_status_event
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_bssid_resolve
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_ssid_resolve
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pwd_resolve
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_customdata_resolve
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_stop_clear_data
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_clear_oneshot_info
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_RecvCb
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSNameErrGenAndSend
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSAnswerGenAndSend
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_insert_4ic
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_4tcp
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_4udp
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_check_4ic
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sk_free_pbuf_custom
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_memp_free_pool
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_connect
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_create_connect
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_disp_task_stat_info
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_delete
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wps_start_pin
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_free_tx_sent_data
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_fill_buf
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_udp_sendto
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_post
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_send
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custdata_proc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_finish_callback
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect_softap
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_init
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_init
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ethernet_init
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_cleanup
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc_debug
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psFreePubKey
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaFreeKey
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psNewPubKey
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeCert
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeDNStruct
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509FreeExtensions
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timeouts_mbox_fetch_p
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_untimeout_p
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_init
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_thread
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_write
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_chip_erase
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_fast_write_destroy
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientCloseRequest
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientOpenRequest
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_rx
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersParse
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSetURL
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersFind
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionReset
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_proc_beacon_done
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_check_ps_pkt
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_pkt2sta
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_all_pkt2sta
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_alloc_ps_pkt
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_current_pack
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_ssid
<LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_del_beacon
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_beacon
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_switch_channel_width
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_cleanup
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_bss_info_changed
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_cleanup
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_start_pin
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_start_pbc
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_init
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_deinit
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_cfg
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_eapol
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deinit
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_deinit
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_rx_eapol
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_deinit
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_task
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_eapol
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_assoc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_mgmt
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configs
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_remove_timeout
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_ps
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_connection
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_realloc
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_channel_switch
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_interface_free
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_clean_ps_multicast
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wpa
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_validate_network_test
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_add
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_remove
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_probereq
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_data
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_clear_1shot_info
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_data
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_mgmt
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap2
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_cfg2
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_scan_req
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_deinit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_wps_cred
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_clear_wps
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_eapol_send
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_send_eapol
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_ssid
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_clear_pspkt
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_scan
<LI><a href="#[8e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_results_free
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_assoc_resp
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_auth
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Mismatch_method
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_release
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_scan_completed
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_config_auth
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_alloc
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_key_destroy
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bss_release
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_cbc_decrypt
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_device_data_free
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_abort
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_deinit
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_BE_Step
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_init
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_deinit
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_method_free
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_device_attrs
<LI><a href="#[a93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_unregister_methods
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_NOTIFICATION_Enter
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_METHOD_Enter
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_INITIALIZE_Enter
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_deinit
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_free_sta_sm
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_ap
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_cbc_encrypt
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_func_method
<LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_init
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_deinit
</UL>

<P><STRONG><a name="[1b9]"></a>mem_alloc_debug</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_isr_count
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketUdp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_proc
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skstt_proc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjoin_proc
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_http_client_err_callback
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_http_client_recv_callback
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_state
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_dis
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_join
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_conn
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tx_fail
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_crc_err
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_sta_leave
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_sta_join
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_linkdown
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_failed
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_success
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_init_cmplt
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_parse_func
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_exec
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_sta_detail
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_net
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_key
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join_net
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_key
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_wscan_cmplt
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_scan_cmplt
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_tx_msg
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_atcmd_line
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_rsp
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_tx_msg
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_send_tx_msg
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_fwup_rsp
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_net_status_changed
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_rpt
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_recvmit
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_scan
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decode_new_oneshot_data
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_create
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_close
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_bssid_resolve
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_init_data
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_create
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_scan_result_deal
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_ssid_resolve
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pwd_resolve
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_customdata_resolve
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_RecvCb
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSNameErrGenAndSend
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSAnswerGenAndSend
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_alloc_socket
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_disp_task_stat_info
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wps_start_pin
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_port_init
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_fill_buf
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_udp_sendto
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_litepoint_start
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_post
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_enter
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_send
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custdata_proc
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_send_msg
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect_softap
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_init
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc_debug
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ethernet_init
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc_debug
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psNewPubKey
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNum
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetSignature
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnConstructedOctetString
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strndup
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_untimeout
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_add_timeout
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timeout_p
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_init
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeValidity
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getImplicitBitString
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGeneralNames
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_write
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_chip_erase
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_fast_write_init
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_test
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_register_handler
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientOpenRequest
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersParse
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSetURL
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersFind
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_defaults
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_alloc_ps_pkt
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_accept
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_ssid
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_scan
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_beacon
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_switch_channel_width
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_beacon_get
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_start_pin
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_start_pbc
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_cfg
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie_default
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_rx_eapol
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_timer_task
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_default_configs
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_reload_config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_eapol
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_assoc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disassoc
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disconnect_network
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_scan_completed
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disconnect_softap
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_reload_config4softap
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_from_unknown
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_mic_err
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_mgmt
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configs
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_ps
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_pspoll
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_sta_active
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_realloc
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_channel_switch
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_init
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_alloc_bss_data
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wpa
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_res
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_bit_rates
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_add
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_probereq
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_data
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_data
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_mgmt
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap2
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_cfg2
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_passive_scan
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_add_with_mode
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_scan_req
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_wps_cred
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_eapol_send
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_send_eapol
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_ssid
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_alloc_eapol
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_init
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_scan
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strdup
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zalloc
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_init
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_assoc_resp
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_auth
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Mismatch_method
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_alloc
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_cbc_decrypt
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_init
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_init
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_method_alloc
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_device_attrs
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_NOTIFICATION_Enter
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_ap
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_cbc_encrypt
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_func_method
</UL>

<P><STRONG><a name="[64c]"></a>fwup_request_complete</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fwup_request_complete &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_common.o(.text)
</UL>
<P><STRONG><a name="[64d]"></a>tls_fwup_init</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tls_fwup_init &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_delete
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_delete
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_enter
</UL>

<P><STRONG><a name="[325]"></a>tls_fwup_enter</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = tls_fwup_enter &rArr; tls_wifi_set_psflag &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_flag
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_psflag
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_init
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_fast_write_init
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updm_proc
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_recv
</UL>

<P><STRONG><a name="[327]"></a>tls_fwup_exit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = tls_fwup_exit &rArr; tls_wifi_set_psflag &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_psflag
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updm_proc
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_recv
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_err
</UL>

<P><STRONG><a name="[326]"></a>tls_fwup_get_current_session_id</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updd_proc
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updm_proc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_rx_data
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_send
</UL>

<P><STRONG><a name="[35f]"></a>tls_fwup_set_update_numer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_send
</UL>

<P><STRONG><a name="[2d5]"></a>tls_fwup_get_current_update_numer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
</UL>

<P><STRONG><a name="[b82]"></a>tls_fwup_get_status</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_common.o(.text), UNUSED)

<P><STRONG><a name="[b83]"></a>tls_fwup_set_crc_error</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wm_common.o(.text), UNUSED)

<P><STRONG><a name="[346]"></a>tls_fwup_request_sync</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tls_fwup_request_sync &rArr; tls_fwup_request_async &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_delete
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_async
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_rx_data
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_send
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_recv
</UL>

<P><STRONG><a name="[328]"></a>tls_fwup_current_state</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updd_proc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_rx_data
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_accept
</UL>

<P><STRONG><a name="[650]"></a>tls_fwup_reset</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>

<P><STRONG><a name="[651]"></a>tls_fwup_clear_error</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>

<P><STRONG><a name="[652]"></a>tls_mbox_new</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tls_mbox_new &rArr; tls_os_queue_create &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_run
</UL>

<P><STRONG><a name="[659]"></a>tls_mbox_valid</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback_static
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_untimeout
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_add_timeout
</UL>

<P><STRONG><a name="[653]"></a>tls_mbox_post</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback_static
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_untimeout
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_add_timeout
</UL>

<P><STRONG><a name="[654]"></a>tls_mbox_trypost</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tls_mbox_trypost &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback_static
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback
</UL>

<P><STRONG><a name="[655]"></a>tls_arch_mbox_fetch</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_arch_mbox_fetch &rArr; tls_os_queue_receive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_receive
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timeouts_mbox_fetch_p
</UL>

<P><STRONG><a name="[656]"></a>tls_untimeout_p</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = tls_untimeout_p &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_thread
</UL>

<P><STRONG><a name="[657]"></a>tls_timeout_p</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tls_timeout_p &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_thread
</UL>

<P><STRONG><a name="[658]"></a>tls_timeouts_mbox_fetch_p</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tls_timeouts_mbox_fetch_p &rArr; tls_arch_mbox_fetch &rArr; tls_os_queue_receive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_arch_mbox_fetch
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_thread
</UL>

<P><STRONG><a name="[2ff]"></a>tls_wl_task_run</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tls_wl_task_run &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_new
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_task_init
</UL>

<P><STRONG><a name="[347]"></a>tls_wl_task_callback_static</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tls_wl_task_callback_static &rArr; tls_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_trypost
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_post
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart0_task_rx_cb
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer2_isr
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_rx_data_cb
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_rx_cmd_cb
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart1_task_rx_cb
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_sent_callback
</UL>

<P><STRONG><a name="[30e]"></a>tls_wl_task_callback</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tls_wl_task_callback &rArr; tls_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_trypost
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_post
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send_tx_msg
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_send_tx_msg
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_rpt
</UL>

<P><STRONG><a name="[65a]"></a>tls_wl_task_add_timeout</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_post
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_valid
</UL>

<P><STRONG><a name="[65b]"></a>tls_wl_task_untimeout</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_post
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_mbox_valid
</UL>

<P><STRONG><a name="[65c]"></a>tls_wl_task_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[65d]"></a>tls_wl_timer_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[b84]"></a>chk_crc8</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>get_crc8</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_udp
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_resolve_info
</UL>

<P><STRONG><a name="[b85]"></a>calculate_crc8</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>get_crc32</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cal_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_save_user_default
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_load_user
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_send
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
</UL>

<P><STRONG><a name="[b86]"></a>checksum</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, wm_common.o(.text), UNUSED)

<P><STRONG><a name="[65f]"></a>atodec</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtodec
</UL>

<P><STRONG><a name="[25b]"></a>strtodec</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtodec
</UL>
<BR>[Calls]<UL><LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atodec
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_init_socket_cfg
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoip
</UL>

<P><STRONG><a name="[660]"></a>atohex</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtohexarray
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtohex
</UL>

<P><STRONG><a name="[2de]"></a>strtohex</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strtohex
</UL>
<BR>[Calls]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atohex
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
</UL>

<P><STRONG><a name="[2e1]"></a>strtohexarray</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strtohexarray
</UL>
<BR>[Calls]<UL><LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atohex
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
</UL>

<P><STRONG><a name="[661]"></a>strtoip</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtodec
</UL>

<P><STRONG><a name="[662]"></a>iptostr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[663]"></a>mactostr</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[2dd]"></a>hex_to_digit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr_to_unit
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap2
</UL>

<P><STRONG><a name="[b87]"></a>digit_to_hex</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wm_common.o(.text), UNUSED)

<P><STRONG><a name="[2e0]"></a>hexstr_to_unit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hexstr_to_unit
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_digit
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
</UL>

<P><STRONG><a name="[2dc]"></a>string_to_uint</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = string_to_uint &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
</UL>

<P><STRONG><a name="[25a]"></a>string_to_ipaddr</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = string_to_ipaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_init_socket_cfg
</UL>

<P><STRONG><a name="[665]"></a>strdup</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[666]"></a>strndup</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[667]"></a>gettimeofday</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
</UL>

<P><STRONG><a name="[b8]"></a>RSA_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>CRYPTION_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[669]"></a>tls_crypto_random_stop</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_random_init
</UL>

<P><STRONG><a name="[668]"></a>tls_crypto_random_init</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_random_stop
</UL>

<P><STRONG><a name="[66a]"></a>tls_crypto_random_bytes</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[66b]"></a>tls_crypto_rc4_init</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[66c]"></a>tls_crypto_rc4</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[66d]"></a>tls_crypto_aes_init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_crypto_aes_init &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_unwrap
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_cbc_decrypt
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrap
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_cbc_encrypt
</UL>

<P><STRONG><a name="[66e]"></a>tls_crypto_aes_encrypt_decrypt</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_unwrap
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_cbc_decrypt
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrap
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_cbc_encrypt
</UL>

<P><STRONG><a name="[66f]"></a>tls_crypto_3des_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[670]"></a>tls_crypto_3des_encrypt_decrypt</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[671]"></a>tls_crypto_des_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[672]"></a>tls_crypto_des_encrypt_decrypt</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[691]"></a>tls_crypto_sha1_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Init
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_vector
</UL>

<P><STRONG><a name="[673]"></a>tls_crypto_sha1_update</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_crypto_sha1_update &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_sha1_compress
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Init
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Update
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_vector
</UL>

<P><STRONG><a name="[675]"></a>tls_crypto_sha1_final</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_sha1_compress
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_vector
</UL>

<P><STRONG><a name="[68c]"></a>tls_crypto_md5_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Init
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
</UL>

<P><STRONG><a name="[676]"></a>tls_crypto_md5_update</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_crypto_md5_update &rArr; hd_md5_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_md5_compress
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Init
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Update
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
</UL>

<P><STRONG><a name="[678]"></a>tls_crypto_md5_final</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_crypto_md5_final &rArr; hd_md5_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hd_md5_compress
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
</UL>

<P><STRONG><a name="[67f]"></a>tls_crypto_exptmod</STRONG> (Thumb, 398 bytes, Stack size 72 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2888<LI>Call Chain = tls_crypto_exptmod &rArr; mp_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mulmod
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMonMulBD
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMonMulAB
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModWrite
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModRead
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
<LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_exptmod
</UL>

<P><STRONG><a name="[569]"></a>tls_crypto_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tls_crypto_init &rArr; tls_irq_enable &rArr; NVIC_Configration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
</UL>

<P><STRONG><a name="[68a]"></a>psHmacMd5Final</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_final
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_init
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
</UL>

<P><STRONG><a name="[68d]"></a>psHmacMd5Update</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
</UL>

<P><STRONG><a name="[68e]"></a>psHmacMd5Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_init
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
</UL>

<P><STRONG><a name="[68f]"></a>psHmacMd5</STRONG> (Thumb, 98 bytes, Stack size 312 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Init
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Update
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_final
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[690]"></a>psHmacSha1Final</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_final
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_init
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
</UL>

<P><STRONG><a name="[692]"></a>psHmacSha1Update</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
</UL>

<P><STRONG><a name="[693]"></a>psHmacSha1Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_init
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
</UL>

<P><STRONG><a name="[694]"></a>psHmacSha1</STRONG> (Thumb, 96 bytes, Stack size 312 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Init
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Update
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_final
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[695]"></a>psHmacSha2Final</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_process
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_init
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_done
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2
</UL>

<P><STRONG><a name="[699]"></a>psHmacSha2Update</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_process
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2
</UL>

<P><STRONG><a name="[69a]"></a>psHmacSha2Init</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_process
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_init
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2
</UL>

<P><STRONG><a name="[69b]"></a>psHmacSha2</STRONG> (Thumb, 118 bytes, Stack size 328 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_process
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_init
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_done
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Init
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Update
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Final
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[69d]"></a>getAsnLength</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNum
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetSignature
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnConstructedOctetString
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnOID
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnInteger
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSet
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnBig
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeValidity
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getImplicitBitString
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGeneralNames
</UL>

<P><STRONG><a name="[69c]"></a>getAsnBig</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_for_read_unsigned_bin
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
</UL>
<BR>[Called By]<UL><LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
</UL>

<P><STRONG><a name="[69f]"></a>getAsnSequence</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnAlgorithmIdentifier
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
</UL>

<P><STRONG><a name="[6a0]"></a>getAsnSet</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
</UL>
<BR>[Called By]<UL><LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
</UL>

<P><STRONG><a name="[6a1]"></a>getAsnInteger</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
</UL>

<P><STRONG><a name="[6a2]"></a>getAsnOID</STRONG> (Thumb, 176 bytes, Stack size 36 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnAlgorithmIdentifier
</UL>

<P><STRONG><a name="[6a3]"></a>getAsnAlgorithmIdentifier</STRONG> (Thumb, 52 bytes, Stack size 28 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnOID
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
</UL>

<P><STRONG><a name="[6a4]"></a>getAsnConstructedOctetString</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[6a5]"></a>getAsnRsaPubKey</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnBig
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
</UL>

<P><STRONG><a name="[6a7]"></a>psX509GetSignature</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
</UL>

<P><STRONG><a name="[6a8]"></a>getSerialNum</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
</UL>

<P><STRONG><a name="[6a9]"></a>psX509GetDNAttributes</STRONG> (Thumb, 946 bytes, Stack size 168 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSet
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_final
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_init
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
</UL>

<P><STRONG><a name="[6ab]"></a>getExplicitExtensions</STRONG> (Thumb, 1568 bytes, Stack size 208 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNum
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnOID
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnInteger
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_final
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_init
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGeneralNames
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
</UL>

<P><STRONG><a name="[6ae]"></a>psX509ParseCert</STRONG> (Thumb, 1438 bytes, Stack size 192 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_process
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_init
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_done
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNum
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetSignature
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnAlgorithmIdentifier
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnInteger
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_final
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_init
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeValidity
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getImplicitBitString
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[6af]"></a>x509FreeExtensions</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeCert
</UL>

<P><STRONG><a name="[6b0]"></a>psX509FreeDNStruct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeCert
</UL>

<P><STRONG><a name="[6b1]"></a>psX509FreeCert</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeDNStruct
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509FreeExtensions
</UL>

<P><STRONG><a name="[b88]"></a>psX509ValidateGeneralName</STRONG> (Thumb, 170 bytes, Stack size 20 bytes, wm_common.o(.text), UNUSED)

<P><STRONG><a name="[6b7]"></a>pkcs1Unpad</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPriv
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPub
</UL>

<P><STRONG><a name="[6b3]"></a>psRsaCrypt</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_for_read_unsigned_bin
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPriv
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaEncryptPub
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaEncryptPriv
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPub
</UL>

<P><STRONG><a name="[6b6]"></a>psRsaDecryptPub</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1Unpad
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
</UL>

<P><STRONG><a name="[6b8]"></a>psX509AuthenticateCert</STRONG> (Thumb, 558 bytes, Stack size 104 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPub
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[b89]"></a>psInitPrng</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_common.o(.text), UNUSED)

<P><STRONG><a name="[6ba]"></a>psGetPrng</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1Pad
</UL>

<P><STRONG><a name="[6b9]"></a>pkcs1Pad</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psGetPrng
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaEncryptPub
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaEncryptPriv
</UL>

<P><STRONG><a name="[6bb]"></a>psNewPubKey</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[6bc]"></a>psRsaFreeKey</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psFreePubKey
</UL>

<P><STRONG><a name="[6bd]"></a>psFreePubKey</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaFreeKey
</UL>

<P><STRONG><a name="[6be]"></a>psRsaEncryptPriv</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1Pad
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
</UL>

<P><STRONG><a name="[6bf]"></a>psRsaEncryptPub</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1Pad
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
</UL>

<P><STRONG><a name="[6c0]"></a>psRsaDecryptPriv</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1Unpad
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[6c3]"></a>psDes3InitKey</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deskey
</UL>

<P><STRONG><a name="[6c4]"></a>psDes3EncryptBlock</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desfunc
</UL>

<P><STRONG><a name="[6c6]"></a>psDes3DecryptBlock</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desfunc
</UL>

<P><STRONG><a name="[6c7]"></a>psDesInitKey</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deskey
</UL>

<P><STRONG><a name="[6c8]"></a>psDesEncryptBlock</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desfunc
</UL>

<P><STRONG><a name="[6c9]"></a>psDesDecryptBlock</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;desfunc
</UL>

<P><STRONG><a name="[6ca]"></a>mem_realloc_debug</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[4b3]"></a>mem_calloc_debug</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_calloc
</UL>

<P><STRONG><a name="[56d]"></a>tls_param_load_factory_default</STRONG> (Thumb, 436 bytes, Stack size 32 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_param_load_factory_default
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_default
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[56e]"></a>tls_param_init</STRONG> (Thumb, 332 bytes, Stack size 48 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_param_init &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc32
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_load_factory_default
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[31f]"></a>tls_param_load_user</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = tls_param_load_user &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc32
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updp_proc
</UL>

<P><STRONG><a name="[1b7]"></a>tls_param_set</STRONG> (Thumb, 666 bytes, Stack size 32 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_auto_connect_flag
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_ip_info
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_hw_mode
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_channel
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_encrypt
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_key
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_ssid
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_webs
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_warc
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_pass
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_wps_pin
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_sha1
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_cmdm
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_iom
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_espt
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_espc
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_atpt
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_dnsname
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_atlt
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_uart_params
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_default_socket_params
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_hostif_mode
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_work_mode
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_ip_info
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_roaming_mode
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_wl_ps_mode
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_adhoc_create_mode
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_hw_mode
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_region
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_channellist
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_channel
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_hide_ssid
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_bssid
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_encrypt
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_key
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_ssid
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_wireless_mode
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_psflag
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_default_configs
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa_psk
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wpa
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wep
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_open
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_validate_network_test
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wps_set_pin
<LI><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ip_info
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_encrypt
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_bssid
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_dnsname
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ip_info2
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap2
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_encrypt2
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid2
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_update_mode
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_wps_cred
</UL>

<P><STRONG><a name="[1b6]"></a>tls_param_get</STRONG> (Thumb, 498 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_auto_connect_flag
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_init
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_hw_mode
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_webs
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_warc
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_pass
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_wps_pin
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_sha1
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_cmdm
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_iom
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_espt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_espc
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_atpt
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_uart_params
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_hostif_mode
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_work_mode
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_ip_info
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_roaming_mode
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_wl_ps_mode
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_adhoc_create_mode
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_hw_mode
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_region
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_channellist
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_channel
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_hide_ssid
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_original_key
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_original_ssid
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_encrypt
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_wireless_mode
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_ssid
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_encrypt
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_channel
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_key
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_ip_info
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_dnsname
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_bssid
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_ssid
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_key
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_init_socket_cfg
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_auto_mode
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wps_start_pin
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_current_bss
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_init
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_up
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_status_changed
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect_softap
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_create_softap
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init_ifdata
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_psflag
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_default_configs
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configs
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa_psk
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wpa
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wep
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_open
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap2
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid2
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_update_mode
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_scan_req
<LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_wl_select_max_rate
</UL>

<P><STRONG><a name="[25f]"></a>tls_param_to_flash</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = tls_param_to_flash &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_pmtf
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_bssid
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wps_start_pin
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wps_start_pbc
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wpa
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wep
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
</UL>

<P><STRONG><a name="[261]"></a>tls_param_to_default</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = tls_param_to_default &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_load_factory_default
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rstf_proc
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_reset_flash
</UL>

<P><STRONG><a name="[320]"></a>tls_param_save_user_default</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = tls_param_save_user_default &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updp_proc
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_save_user
</UL>

<P><STRONG><a name="[6cc]"></a>tls_param_save_user</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_save_user_default
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[29d]"></a>tls_param_get_updp_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_uart_params
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_default_socket_params
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_ip_info
</UL>

<P><STRONG><a name="[31e]"></a>tls_param_set_updp_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updp_proc
</UL>

<P><STRONG><a name="[b8a]"></a>HTTPClientSetLocalConnection</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_http_compile.o(.text), UNUSED)

<P><STRONG><a name="[6cd]"></a>HTTPClientSetVerb</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HTTPClientSetVerb
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_set_verb
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientOpenRequest
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersSend
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionReset
</UL>

<P><STRONG><a name="[6ce]"></a>HTTPClientOpenRequest</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HTTPClientOpenRequest &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSetVerb
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_open_request
</UL>

<P><STRONG><a name="[6cf]"></a>HTTPWrapperGetUpTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_http_compile.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientReadData
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientWriteData
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionEvalTimeout
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionReset
</UL>

<P><STRONG><a name="[6d1]"></a>HTTPClientReset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionReset
</UL>

<P><STRONG><a name="[6d2]"></a>HTTPIntrnConnectionClose</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = HTTPIntrnConnectionClose &rArr; closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientCloseRequest
</UL>

<P><STRONG><a name="[6d3]"></a>HTTPClientCloseRequest</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = HTTPClientCloseRequest &rArr; HTTPIntrnConnectionClose &rArr; closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnConnectionClose
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_post
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_close_request
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req
</UL>

<P><STRONG><a name="[6d5]"></a>HTTPClientAddRequestHeaders</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersAdd
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_add_request_headers
</UL>

<P><STRONG><a name="[6d6]"></a>HTTPWrapperGetSocketError</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HTTPWrapperGetSocketError
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnRecv
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnConnectionOpen
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSend
</UL>

<P><STRONG><a name="[6df]"></a>HTTPWrapperItoa</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HTTPWrapperItoa
</UL>
<BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersSend
</UL>

<P><STRONG><a name="[6d9]"></a>HTTPStrInsensitiveCompare</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HTTPStrInsensitiveCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stricmp
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrCaseStr
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersParse
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSetURL
</UL>

<P><STRONG><a name="[6da]"></a>HTTPStrCaseStr</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HTTPStrCaseStr &rArr; HTTPStrInsensitiveCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrInsensitiveCompare
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersFind
</UL>

<P><STRONG><a name="[6e3]"></a>HTTPStrExtract</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm_http_compile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnConnectionOpen
</UL>

<P><STRONG><a name="[6e0]"></a>HTTPWrapperGetHostByName</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = HTTPWrapperGetHostByName &rArr; gethostbyname &rArr; lwip_gethostbyname &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Called By]<UL><LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnConnectionOpen
</UL>

<P><STRONG><a name="[6e4]"></a>HTTPStrSearch</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HTTPStrSearch &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSetURL
</UL>

<P><STRONG><a name="[6e6]"></a>HTTPClientSendRequest</STRONG> (Thumb, 452 bytes, Stack size 72 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = HTTPClientSendRequest &rArr; HTTPIntrnHeadersSend &rArr; HTTPIntrnSend &rArr; send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperItoa
<LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnConnectionClose
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetUpTime
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionEvalTimeout
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSetURL
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnConnectionOpen
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersSend
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSend
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersAdd
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_send_request
</UL>

<P><STRONG><a name="[6e7]"></a>HTTPStrGetToken</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HTTPStrGetToken
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersParse
</UL>

<P><STRONG><a name="[6ec]"></a>HTTPClientRecvResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = HTTPClientRecvResponse &rArr; HTTPIntrnHeadersReceive &rArr; HTTPIntrnGetRemoteHeaders &rArr; HTTPIntrnRecv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_recv_response
</UL>

<P><STRONG><a name="[6ee]"></a>HTTPStrLToH</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientWriteData
</UL>

<P><STRONG><a name="[6ed]"></a>HTTPClientWriteData</STRONG> (Thumb, 200 bytes, Stack size 96 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrLToH
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetUpTime
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersReceive
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSend
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_write_data
</UL>

<P><STRONG><a name="[6ef]"></a>HTTPStrHToL</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HTTPStrHToL
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toupper
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnGetRemoteChunkLength
</UL>

<P><STRONG><a name="[6f1]"></a>HTTPClientReadData</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = HTTPClientReadData &rArr; HTTPIntrnGetRemoteChunkLength &rArr; HTTPIntrnRecv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetUpTime
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnGetRemoteChunkLength
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnRecv
</UL>
<BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_read_data
</UL>

<P><STRONG><a name="[6f3]"></a>HTTPClientGetInfo</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_get_info
</UL>

<P><STRONG><a name="[6f4]"></a>HTTPClientGetNextHeader</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HTTPClientGetNextHeader &rArr; HTTPIntrnHeadersFind &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersFind
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_get_next_header
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientFindFirstHeader
</UL>

<P><STRONG><a name="[6f5]"></a>HTTPClientFindFirstHeader</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTTPClientFindFirstHeader &rArr; HTTPClientGetNextHeader &rArr; HTTPIntrnHeadersFind &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientGetNextHeader
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_find_first_header
</UL>

<P><STRONG><a name="[70f]"></a>HTTPClientFindCloseHeader</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_http_compile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_find_close_header
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req
</UL>

<P><STRONG><a name="[6f6]"></a>stricmp</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrInsensitiveCompare
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[6f8]"></a>HTTPWrapperIsAscii</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperIsAlNum
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperIsAlpha
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperToLower
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperToUpper
</UL>

<P><STRONG><a name="[6f7]"></a>HTTPWrapperToUpper</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperIsAscii
</UL>

<P><STRONG><a name="[6f9]"></a>HTTPWrapperToLower</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperIsAscii
</UL>

<P><STRONG><a name="[6fa]"></a>HTTPWrapperIsAlpha</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperIsAscii
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperIsAlNum
</UL>

<P><STRONG><a name="[6fb]"></a>HTTPWrapperIsAlNum</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperIsAlpha
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperIsAscii
</UL>

<P><STRONG><a name="[6fc]"></a>HTTPWrapperShutDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shutdown
</UL>

<P><STRONG><a name="[6fd]"></a>HTTPWrapperInitRandomeNumber</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>

<P><STRONG><a name="[6ff]"></a>HTTPWrapperGetRandomeNumber</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>

<P><STRONG><a name="[703]"></a>tls_http_client_open_request</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tls_http_client_open_request &rArr; HTTPClientOpenRequest &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientOpenRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_post
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[704]"></a>tls_http_client_close_request</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tls_http_client_close_request &rArr; HTTPClientCloseRequest &rArr; HTTPIntrnConnectionClose &rArr; closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientCloseRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[705]"></a>tls_http_client_set_verb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_http_client_set_verb &rArr; HTTPClientSetVerb
</UL>
<BR>[Calls]<UL><LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSetVerb
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[706]"></a>tls_http_client_add_request_headers</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientAddRequestHeaders
</UL>

<P><STRONG><a name="[707]"></a>tls_http_client_send_request</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = tls_http_client_send_request &rArr; HTTPClientSendRequest &rArr; HTTPIntrnHeadersSend &rArr; HTTPIntrnSend &rArr; send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[708]"></a>tls_http_client_write_data</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientWriteData
</UL>

<P><STRONG><a name="[709]"></a>tls_http_client_recv_response</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tls_http_client_recv_response &rArr; HTTPClientRecvResponse &rArr; HTTPIntrnHeadersReceive &rArr; HTTPIntrnGetRemoteHeaders &rArr; HTTPIntrnRecv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientRecvResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[70a]"></a>tls_http_client_read_data</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = tls_http_client_read_data &rArr; HTTPClientReadData &rArr; HTTPIntrnGetRemoteChunkLength &rArr; HTTPIntrnRecv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[70b]"></a>tls_http_client_get_info</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientGetInfo
</UL>

<P><STRONG><a name="[70c]"></a>tls_http_client_find_first_header</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tls_http_client_find_first_header &rArr; HTTPClientFindFirstHeader &rArr; HTTPClientGetNextHeader &rArr; HTTPIntrnHeadersFind &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientFindFirstHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[70d]"></a>tls_http_client_get_next_header</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientGetNextHeader
</UL>

<P><STRONG><a name="[70e]"></a>tls_http_client_find_close_header</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wm_http_compile.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientFindCloseHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[711]"></a>tls_http_client_task_init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, wm_http_compile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_new
</UL>

<P><STRONG><a name="[322]"></a>tls_http_client_post</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tls_http_client_post &rArr; HTTPClientCloseRequest &rArr; HTTPIntrnConnectionClose &rArr; closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_open_request
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientCloseRequest
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpc_proc
</UL>

<P><STRONG><a name="[341]"></a>ping_test_stop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ping_test_stop &rArr; tls_os_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_proc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_stop_timeout
</UL>

<P><STRONG><a name="[33f]"></a>ping_test_create_task</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ping_test_create_task &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_proc
</UL>

<P><STRONG><a name="[340]"></a>ping_test_start</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ping_test_start &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_proc
</UL>

<P><STRONG><a name="[71c]"></a>http_fwup</STRONG> (Thumb, 360 bytes, Stack size 96 bytes, wm_http_fwup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = http_fwup &rArr; tls_http_client_read_data &rArr; HTTPClientReadData &rArr; HTTPIntrnGetRemoteChunkLength &rArr; HTTPIntrnRecv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_find_close_header
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_find_first_header
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_read_data
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_recv_response
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_send_request
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_set_verb
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_close_request
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_open_request
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_recv
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_err
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_accept
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_http_fwup
</UL>

<P><STRONG><a name="[321]"></a>t_http_fwup</STRONG> (Thumb, 60 bytes, Stack size 56 bytes, wm_http_fwup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = t_http_fwup &rArr; http_fwup &rArr; tls_http_client_read_data &rArr; HTTPClientReadData &rArr; HTTPIntrnGetRemoteChunkLength &rArr; HTTPIntrnRecv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpc_proc
</UL>

<P><STRONG><a name="[71e]"></a>socket_fwup_recv</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, wm_socket_fwup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = socket_fwup_recv &rArr; tls_fwup_enter &rArr; tls_wifi_set_psflag &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_close
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_sync
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_exit
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_enter
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_current_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[71f]"></a>socket_fwup_err</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_socket_fwup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = socket_fwup_err &rArr; tls_fwup_exit &rArr; tls_wifi_set_psflag &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_exit
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_current_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[b8b]"></a>socket_fwup_poll</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_socket_fwup.o(.text), UNUSED)

<P><STRONG><a name="[71d]"></a>socket_fwup_accept</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wm_socket_fwup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = socket_fwup_accept &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_current_state
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[b8c]"></a>airkiss_version</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, airkiss_log.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>airkiss_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, airkiss_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = airkiss_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_airkiss_start
</UL>

<P><STRONG><a name="[24c]"></a>airkiss_recv</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, airkiss_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = airkiss_recv &rArr; __airkiss_recv &rArr; __airkiss_recv_guide_field &rArr; __airkiss_crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__airkiss_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_airkiss_recv
</UL>

<P><STRONG><a name="[255]"></a>airkiss_get_result</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, airkiss_log.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_finish
</UL>

<P><STRONG><a name="[24a]"></a>airkiss_change_channel</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, airkiss_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = airkiss_change_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_airkiss_change_channel
</UL>

<P><STRONG><a name="[252]"></a>airkiss_lan_recv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, airlink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = airkiss_lan_recv &rArr; __airkiss_lan_recv
</UL>
<BR>[Calls]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__airkiss_lan_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_lan_task
</UL>

<P><STRONG><a name="[250]"></a>airkiss_lan_pack</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, airlink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = airkiss_lan_pack &rArr; __airkiss_lan_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__airkiss_lan_pack
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_lan_send
</UL>

<P><STRONG><a name="[729]"></a>hostapd_clear_unicast_ps_bit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hostapd_clear_unicast_ps_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_tim_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_check_ps_pkt
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_pkt2sta
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_all_pkt2sta
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_clear_pspkt
</UL>

<P><STRONG><a name="[72b]"></a>hostapd_clean_ps_multicast</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hostapd_clean_ps_multicast &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_interface_free
</UL>

<P><STRONG><a name="[72d]"></a>hostapd_alloc_bss_data</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hostapd_alloc_bss_data &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_create_ap
</UL>

<P><STRONG><a name="[72e]"></a>hostapd_mac_comp_empty</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>

<P><STRONG><a name="[734]"></a>hostapd_mgmt_rx</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = hostapd_mgmt_rx &rArr; ieee802_11_mgmt &rArr; handle_assoc &rArr; handle_assoc_cb &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_add_randomness
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hdr_bssid
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
</UL>

<P><STRONG><a name="[738]"></a>hostapd_ps_pkt_timer_start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hostapd_ps_pkt_timer_start &rArr; tls_os_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_net_up
</UL>

<P><STRONG><a name="[739]"></a>hostapd_ps_pkt_timer_stop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hostapd_ps_pkt_timer_stop &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_net_down
</UL>

<P><STRONG><a name="[73a]"></a>hostapd_event_handle</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = hostapd_event_handle &rArr; hostapd_mgmt_rx &rArr; ieee802_11_mgmt &rArr; handle_assoc &rArr; handle_assoc_cb &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_create_softap
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ps_rx
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_proc_beacon_done
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_check_ps_pkt
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_pkt2sta
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_all_pkt2sta
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ap_destroy
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;michael_mic_failure
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_receive
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_rx_from_unknown
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_mgmt_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_task
</UL>

<P><STRONG><a name="[8d5]"></a>hostapd_client_event</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hostapd_client_event
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_associated
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_deinit
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
</UL>

<P><STRONG><a name="[745]"></a>hostapd_channel_check</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = hostapd_channel_check &rArr; tls_wl_if_send_channel_switch &rArr; tls_wl_if_send_mlme &rArr; ieee80211_send_mgmt &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_channel_switch
<LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_ds_ie
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_frequency_to_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_associate
</UL>

<P><STRONG><a name="[749]"></a>hostapd_init</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = hostapd_init &rArr; hostapd_ap_destroy &rArr; hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; ap_free_sta &rArr; hostapd_drv_sta_remove &rArr; tls_wl_if_sta_remove &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_defaults
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ap_destroy
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
</UL>

<P><STRONG><a name="[323]"></a>hostapd_get_mac</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_qmac_proc
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_gre_proc
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_icmp_proc
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[67a]"></a>mp_reverse</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mp_reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModRead
</UL>

<P><STRONG><a name="[687]"></a>mp_clamp</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mp_clamp
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_mul
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_sqr
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_digs
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
</UL>

<P><STRONG><a name="[752]"></a>mp_grow</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_lshd
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_digs
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
</UL>

<P><STRONG><a name="[680]"></a>mp_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mp_init &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mulmod
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_init
</UL>

<P><STRONG><a name="[67c]"></a>mp_clear</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mp_clear &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin_nr
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mulmod
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaFreeKey
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509FreeCert
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnBig
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModRead
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_mul
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_sqr
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear_multi
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_deinit
</UL>

<P><STRONG><a name="[757]"></a>mp_cmp_mag</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mp_cmp_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
</UL>

<P><STRONG><a name="[756]"></a>mp_add</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mp_add &rArr; s_mp_sub &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_mul
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_sqr
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[758]"></a>mp_sub</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mp_sub &rArr; s_mp_sub &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[75c]"></a>mp_exch</STRONG> (Thumb, 16 bytes, Stack size 20 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mp_exch
</UL>
<BR>[Called By]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
</UL>

<P><STRONG><a name="[759]"></a>mp_init_size</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mp_init_size &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_for_read_unsigned_bin
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_mul
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_sqr
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
</UL>

<P><STRONG><a name="[75e]"></a>mp_clear_multi</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mp_clear_multi &rArr; mp_clear &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[760]"></a>mp_zero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mp_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rshd
</UL>

<P><STRONG><a name="[75f]"></a>mp_rshd</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mp_rshd &rArr; mp_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
</UL>

<P><STRONG><a name="[685]"></a>mp_copy</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mp_copy &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_abs
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[761]"></a>mp_mod_2d</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
</UL>

<P><STRONG><a name="[762]"></a>mp_div_2d</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rshd
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
</UL>
<BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin_nr
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[6b4]"></a>mp_cmp</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mp_cmp &rArr; mp_cmp_mag
</UL>
<BR>[Calls]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[763]"></a>mp_lshd</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mp_lshd &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_mul
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_sqr
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
</UL>

<P><STRONG><a name="[764]"></a>mp_mul_2d</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mp_mul_2d &rArr; mp_copy &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_lshd
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[765]"></a>mp_abs</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mp_abs &rArr; mp_copy &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[681]"></a>mp_count_bits</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, libtommath.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[682]"></a>mp_set</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mp_set &rArr; mp_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[766]"></a>mp_init_multi</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mp_init_multi &rArr; mp_init &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>

<P><STRONG><a name="[767]"></a>mp_div</STRONG> (Thumb, 320 bytes, Stack size 80 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = mp_div &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_multi
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_abs
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear_multi
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_setup
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
</UL>

<P><STRONG><a name="[768]"></a>mp_mod</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mp_mod &rArr; mp_div &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mulmod
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[684]"></a>mp_mulmod</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2344<LI>Call Chain = mp_mulmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
</UL>

<P><STRONG><a name="[76a]"></a>mp_sqr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mp_sqr &rArr; s_mp_sqr &rArr; mp_init_size &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sqr
</UL>
<BR>[Called By]<UL><LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_sqr
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[76b]"></a>mp_reduce_2k_l</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2352<LI>Call Chain = mp_reduce_2k_l &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
<LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_mag
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libtommath.o(.text)
</UL>
<P><STRONG><a name="[76c]"></a>mp_2expt</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mp_2expt &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_setup
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
</UL>

<P><STRONG><a name="[76d]"></a>mp_reduce_2k_setup_l</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mp_reduce_2k_setup_l &rArr; s_mp_sub &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[771]"></a>mp_cmp_d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, libtommath.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
</UL>

<P><STRONG><a name="[76e]"></a>mp_init_copy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mp_init_copy &rArr; mp_copy &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin_nr
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
</UL>

<P><STRONG><a name="[76f]"></a>mp_reduce</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2344<LI>Call Chain = mp_reduce &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_cmp_d
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_lshd
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod_2d
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_rshd
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_high_digs
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> libtommath.o(.text)
</UL>
<P><STRONG><a name="[772]"></a>mp_reduce_setup</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = mp_reduce_setup &rArr; mp_div &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_2expt
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div
</UL>
<BR>[Called By]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[683]"></a>mp_exptmod</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2816<LI>Call Chain = mp_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>
<BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
</UL>

<P><STRONG><a name="[6a6]"></a>mp_unsigned_bin_size</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mp_unsigned_bin_size
</UL>
<BR>[Calls]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
<LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_get_unsigned_bin
</UL>

<P><STRONG><a name="[69e]"></a>mp_init_for_read_unsigned_bin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnBig
</UL>

<P><STRONG><a name="[67b]"></a>mp_read_unsigned_bin</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_copy &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul_2d
<LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_zero
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnBig
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModRead
<LI><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_set_unsigned_bin
</UL>

<P><STRONG><a name="[67e]"></a>mp_to_unsigned_bin_nr</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mp_to_unsigned_bin_nr &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
</UL>
<BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModWrite
</UL>

<P><STRONG><a name="[6b5]"></a>mp_to_unsigned_bin</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mp_to_unsigned_bin &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reverse
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_copy
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_div_2d
</UL>
<BR>[Called By]<UL><LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
<LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_get_unsigned_bin
</UL>

<P><STRONG><a name="[774]"></a>mp_karatsuba_sqr</STRONG> (Thumb, 326 bytes, Stack size 96 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqr
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_lshd
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
</UL>

<P><STRONG><a name="[775]"></a>mp_karatsuba_mul</STRONG> (Thumb, 414 bytes, Stack size 120 bytes, libtommath.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_lshd
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_sub
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_add
</UL>

<P><STRONG><a name="[776]"></a>md5</STRONG> (Thumb, 40 bytes, Stack size 128 bytes, md5.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_final
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_init
</UL>

<P><STRONG><a name="[777]"></a>md5_vector</STRONG> (Thumb, 60 bytes, Stack size 136 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = md5_vector &rArr; tls_crypto_md5_final &rArr; hd_md5_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_final
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
<LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_init
</UL>
<BR>[Called By]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5_vector
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_parseEapReq
</UL>

<P><STRONG><a name="[b8d]"></a>MD5Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, md5.o(.text), UNUSED)

<P><STRONG><a name="[778]"></a>MD5Update</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, md5.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[77a]"></a>MD5Final</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, md5.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Transform
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[77b]"></a>hmac_md5_vector</STRONG> (Thumb, 208 bytes, Stack size 184 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = hmac_md5_vector &rArr; md5_vector &rArr; tls_crypto_md5_final &rArr; hd_md5_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5
</UL>

<P><STRONG><a name="[77c]"></a>hmac_md5</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, md5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = hmac_md5 &rArr; hmac_md5_vector &rArr; md5_vector &rArr; tls_crypto_md5_final &rArr; hd_md5_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_processKey
</UL>

<P><STRONG><a name="[77d]"></a>random_get_bytes</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_extract
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_generate_pin
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_encr_settings
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_init
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init_gmk_and_counter
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_gmk
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_e_hash
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[737]"></a>random_add_randomness</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = random_add_randomness &rArr; random_mix_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_mix_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_mgmt_rx
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>

<P><STRONG><a name="[781]"></a>hmac_sha1_vector</STRONG> (Thumb, 210 bytes, Stack size 184 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_vector
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_pmkid
</UL>

<P><STRONG><a name="[780]"></a>hmac_sha1</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_extract
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f
</UL>

<P><STRONG><a name="[783]"></a>sha1_prf</STRONG> (Thumb, 150 bytes, Stack size 88 bytes, sha1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pmk_to_ptk
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init_gmk_and_counter
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
</UL>

<P><STRONG><a name="[784]"></a>sha1</STRONG> (Thumb, 40 bytes, Stack size 128 bytes, sha1_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_final
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_init
</UL>

<P><STRONG><a name="[782]"></a>sha1_vector</STRONG> (Thumb, 60 bytes, Stack size 136 bytes, sha1_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_final
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_init
</UL>
<BR>[Called By]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_gen_mac_addr
</UL>

<P><STRONG><a name="[785]"></a>SHA1Transform</STRONG> (Thumb, 3648 bytes, Stack size 104 bytes, sha1_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Update
</UL>

<P><STRONG><a name="[b8e]"></a>SHA1Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sha1_internal.o(.text), UNUSED)

<P><STRONG><a name="[786]"></a>SHA1Update</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, sha1_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Transform
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Final
</UL>

<P><STRONG><a name="[787]"></a>SHA1Final</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, sha1_internal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Update
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[788]"></a>sha256_compress</STRONG> (Thumb, 270 bytes, Stack size 308 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = sha256_compress
</UL>
<BR>[Called By]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_process
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_done
</UL>

<P><STRONG><a name="[696]"></a>sha256_done</STRONG> (Thumb, 212 bytes, Stack size 20 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = sha256_done &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_compress
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Final
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_vector
</UL>

<P><STRONG><a name="[698]"></a>sha256_process</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_compress
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Init
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Update
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Final
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_vector
</UL>

<P><STRONG><a name="[697]"></a>sha256_init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sha256.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Init
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Final
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_vector
</UL>

<P><STRONG><a name="[789]"></a>sha256_vector</STRONG> (Thumb, 70 bytes, Stack size 144 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_process
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_init
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_done
</UL>
<BR>[Called By]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_keys
</UL>

<P><STRONG><a name="[78a]"></a>hmac_sha256_vector</STRONG> (Thumb, 196 bytes, Stack size 192 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 676<LI>Call Chain = hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_vector
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_prf
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_keys
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_kdf
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_authenticator
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_authenticator
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_e_hash
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce2
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce1
</UL>

<P><STRONG><a name="[78b]"></a>hmac_sha256</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, sha256.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = hmac_sha256 &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_psk
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_key_wrap_auth
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_key_wrap_auth
</UL>

<P><STRONG><a name="[78c]"></a>sha256_prf</STRONG> (Thumb, 154 bytes, Stack size 120 bytes, sha256.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[78d]"></a>eloop_cancel_timeout</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = eloop_cancel_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_remove_timeout
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_deinit
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deinit
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_deinit
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_clear_wps
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_eapol_cb
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_ptk
<LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_deinit
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_deinit
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_enable_timer_tick
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_deinit
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKCALCNEGOTIATING_Enter
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITDONE_Enter
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_remove_ptk
</UL>

<P><STRONG><a name="[790]"></a>eloop_register_timeout</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = eloop_register_timeout &rArr; tls_os_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_start_pin
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_start_pbc
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_init
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_ptk
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_deinit
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_enable_timer_tick
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_port_timers_tick
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_gtk
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITDONE_Enter
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_gmk
</UL>

<P><STRONG><a name="[791]"></a>eloop_handle_timeout</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eloop_handle_timeout &rArr; eloop_remove_timeout &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_remove_timeout
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
</UL>

<P><STRONG><a name="[b8f]"></a>wpa_supplicant_state_txt</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, wpa_supplicant.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>eloop_timeout</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = eloop_timeout &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.text)
</UL>
<P><STRONG><a name="[792]"></a>wpa_supplicant_cancel_connect_timeout</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wpa_supplicant_cancel_connect_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect
</UL>

<P><STRONG><a name="[793]"></a>wpa_supplicant_cancel_auth_timeout</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wpa_supplicant_cancel_auth_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_notify_eapol_done
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_eapol_cb
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_cancel_auth_timeout
</UL>

<P><STRONG><a name="[795]"></a>wpa_clear_keys</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = wpa_clear_keys &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_connection
</UL>

<P><STRONG><a name="[79b]"></a>wpa_supplicant_disassociate</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1116<LI>Call Chain = wpa_supplicant_disassociate &rArr; wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; eapol_sm_notify_portValid &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_disassociate
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero_ether_addr
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_timeout
<LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_disassociate
</UL>

<P><STRONG><a name="[79e]"></a>wpa_supplicant_timeout</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1124<LI>Call Chain = wpa_supplicant_timeout &rArr; wpa_supplicant_disassociate &rArr; wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; eapol_sm_notify_portValid &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_notify_disassoc
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_flush
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_disassociate
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero_ether_addr
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disassoc_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
</UL>

<P><STRONG><a name="[12a]"></a>wpa_supplicant_auth_timer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wpa_supplicant_auth_timer &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.text)
</UL>
<P><STRONG><a name="[7a1]"></a>wpa_supplicant_req_auth_timeout</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wpa_supplicant_req_auth_timeout &rArr; tls_os_timer_change &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_eapol_cb
</UL>

<P><STRONG><a name="[7a2]"></a>wpa_supplicant_connect_timeout</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wpa_supplicant_connect_timeout &rArr; tls_os_timer_change &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
</UL>
<BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_connect_network
</UL>

<P><STRONG><a name="[12b]"></a>wpa_supplicant_connect_timer</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.text)
</UL>
<P><STRONG><a name="[7a3]"></a>wpa_supplicant_rx_eapol</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1372<LI>Call Chain = wpa_supplicant_rx_eapol &rArr; wpa_sm_rx_eapol &rArr; wpa_supplicant_process_3_of_4 &rArr; wpa_supplicant_pairwise_gtk &rArr; wpa_supplicant_key_neg_complete &rArr; eapol_sm_notify_eap_success &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc_copy
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_rx_eapol
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_auth_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
</UL>

<P><STRONG><a name="[7a8]"></a>wpa_supplicant_set_state</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = wpa_supplicant_set_state &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_scan
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_psflag
</UL>
<BR>[Called By]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_mark_disassoc
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_scan_results
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_notify_eapol_done
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_eapol_cb
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
</UL>

<P><STRONG><a name="[7ad]"></a>wpa_supplicant_set_non_wpa_policy</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wpa_supplicant_set_non_wpa_policy &rArr; wpa_sm_set_assoc_wpa_ie &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_param
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_config
</UL>

<P><STRONG><a name="[7b2]"></a>wpa_set_wep_keys</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = wpa_set_wep_keys &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
</UL>

<P><STRONG><a name="[7b3]"></a>wpa_supplicant_set_suites</STRONG> (Thumb, 494 bytes, Stack size 128 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = wpa_supplicant_set_suites &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_pmk
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_param
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie_default
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_parse_own_wpa_ie
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_ie
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_config
</UL>

<P><STRONG><a name="[7bb]"></a>wpa_supplicant_deauthenticate</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1116<LI>Call Chain = wpa_supplicant_deauthenticate &rArr; wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; eapol_sm_notify_portValid &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_deauthenticate
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero_ether_addr
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_cancel
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_eapol_cb
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deauthenticate
</UL>

<P><STRONG><a name="[7bd]"></a>wpa_supplicant_associate</STRONG> (Thumb, 468 bytes, Stack size 344 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = wpa_supplicant_associate &rArr; wpa_drv_associate &rArr; wpa_drv_set_ssid &rArr; tls_wl_if_set_ssid &rArr; ieee80211_sta_req_auth &rArr; ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_assoc_req_ie
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_get_req_type
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_associate
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_ie
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_set_wep_keys
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_non_wpa_policy
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_auth_timeout
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_clear_keys
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_scan_results
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect
</UL>

<P><STRONG><a name="[935]"></a>wpa_config_set_network_defaults</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_wps_cred
</UL>

<P><STRONG><a name="[7c1]"></a>wpa_config_update_psk</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = wpa_config_update_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1
</UL>
<BR>[Called By]<UL><LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_validate_network_test
</UL>

<P><STRONG><a name="[7c2]"></a>wpa_supplicant_cleanup</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wpa_supplicant_cleanup &rArr; wpas_wps_deinit &rArr; eloop_cancel_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_deinit
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_scan
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deinit
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_cleanup
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_deinit
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_deinit
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_connect_network
</UL>

<P><STRONG><a name="[7c8]"></a>wpa_supplicant_reload_configs</STRONG> (Thumb, 564 bytes, Stack size 40 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = wpa_supplicant_reload_configs &rArr; tls_wifi_set_psflag &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_psflag
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_update_config
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_channel_to_frequency
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_connect_network
</UL>

<P><STRONG><a name="[7cb]"></a>supplicant_send_event</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = supplicant_send_event &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_scan
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_timer_task
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_reload_config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_eapol
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_assoc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disassoc
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disconnect_network
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_scan_completed
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disconnect_softap
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_reload_config4softap
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_from_unknown
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_mic_err
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_mgmt
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_ps
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_pspoll
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_sta_active
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_passive_scan
</UL>

<P><STRONG><a name="[128]"></a>supplicant_ps_pkt_timer_expire</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = supplicant_ps_pkt_timer_expire &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ap.o(.text)
</UL>
<P><STRONG><a name="[76]"></a>supplicant_event_rx_mgmt</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = supplicant_event_rx_mgmt &rArr; supplicant_send_event &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[74]"></a>supplicant_event_mic_err</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = supplicant_event_mic_err &rArr; supplicant_send_event &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>supplicant_event_rx_from_unknown</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = supplicant_event_rx_from_unknown &rArr; supplicant_send_event &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>supplicant_event_net_up</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = supplicant_event_net_up &rArr; hostapd_ps_pkt_timer_start &rArr; tls_os_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ps_pkt_timer_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>supplicant_event_net_down</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = supplicant_event_net_down &rArr; hostapd_ps_pkt_timer_stop &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ps_pkt_timer_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[7cc]"></a>supplicant_event_reload_config4softap</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = supplicant_event_reload_config4softap &rArr; supplicant_send_event &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
</UL>

<P><STRONG><a name="[7cd]"></a>supplicant_event_disconnect_softap</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = supplicant_event_disconnect_softap &rArr; supplicant_send_event &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_destroy
</UL>

<P><STRONG><a name="[73]"></a>supplicant_event_scan_completed</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = supplicant_event_scan_completed &rArr; supplicant_send_event &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[7ce]"></a>supplicant_event_disconnect_network</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = supplicant_event_disconnect_network &rArr; supplicant_send_event &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_disconnect
</UL>

<P><STRONG><a name="[72]"></a>supplicant_event_disassoc</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = supplicant_event_disassoc &rArr; supplicant_send_event &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[71]"></a>supplicant_event_assoc</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = supplicant_event_assoc &rArr; supplicant_send_event &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[75]"></a>supplicant_event_rx_eapol</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = supplicant_event_rx_eapol &rArr; supplicant_send_event &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>supplicant_event_update_stat</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[7cf]"></a>supplicant_event_reload_config</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = supplicant_event_reload_config &rArr; supplicant_send_event &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_bssid
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wps_start_pin
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wps_start_pbc
</UL>

<P><STRONG><a name="[7d0]"></a>wpa_supplicant_init_default_configs</STRONG> (Thumb, 444 bytes, Stack size 808 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132<LI>Call Chain = wpa_supplicant_init_default_configs &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_cfg
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_encrypt_cfg
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_channel_to_frequency
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
</UL>

<P><STRONG><a name="[7d3]"></a>tls_supplicant_timer_task</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tls_supplicant_timer_task &rArr; supplicant_send_event &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_receive
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.text)
</UL>
<P><STRONG><a name="[7e4]"></a>tls_supplicant_task</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1412<LI>Call Chain = tls_supplicant_task &rArr; tls_supplicant_sta_event_handle &rArr; wpa_supplicant_event_assoc &rArr; wpa_supplicant_rx_eapol &rArr; wpa_sm_rx_eapol &rArr; wpa_supplicant_process_3_of_4 &rArr; wpa_supplicant_pairwise_gtk &rArr; wpa_supplicant_key_neg_complete &rArr; eapol_sm_notify_eap_success &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.text)
</UL>
<P><STRONG><a name="[571]"></a>wpa_supplicant_init</STRONG> (Thumb, 464 bytes, Stack size 48 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1180<LI>Call Chain = wpa_supplicant_init &rArr; wpa_supplicant_init_default_configs &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_create
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_wsc_register
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_default_configs
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[86f]"></a>wpa_cipher2host</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_current_bss
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
</UL>

<P><STRONG><a name="[1f2]"></a>wpa_supplicant_get_mac</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_proc
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qmac_proc
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_init
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
</UL>

<P><STRONG><a name="[32e]"></a>wpa_supplicant_set_mac</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_proc
</UL>

<P><STRONG><a name="[86e]"></a>tls_get_wpa_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_current_bss
</UL>

<P><STRONG><a name="[7e7]"></a>tls_get_ieee80211_if_data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tls_wl_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_change_channel_info
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_standby
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sleep
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_ps
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_isr
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mgmt_tx_isr
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mac_isr
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_release
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_acquire
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_channel_info_updata
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_change_chanel
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_pm_isr
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_tx
</UL>

<P><STRONG><a name="[97]"></a>tls_wl_mac_isr</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tls_wl_mac_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>tls_wl_data_tx_isr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tls_wl_data_tx_isr &rArr; tls_wl_litepoint_test &rArr; tls_tx_send_litepoint &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_litepoint_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>tls_wl_mgmt_tx_isr</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_wl_mgmt_tx_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>tls_wl_rx_isr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tls_wl_rx_isr &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_venus.o(RESET)
</UL>
<P><STRONG><a name="[7ea]"></a>tls_wl_pm_isr</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, tls_wl_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
</UL>

<P><STRONG><a name="[7f4]"></a>standby_timeout</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tls_wl_core.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tls_wl_core.o(.text)
</UL>
<P><STRONG><a name="[7ed]"></a>tls_wl_power_save_awake</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_wl_power_save_awake &rArr; tls_wl_hw_wake_up &rArr; tls_sys_clk_set
</UL>
<BR>[Calls]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_wl_core.o(.text)
</UL>
<P><STRONG><a name="[570]"></a>tls_wl_init</STRONG> (Thumb, 468 bytes, Stack size 40 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = tls_wl_init &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_task_create
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_tx_init
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_init
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_init
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_init
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_enable_rx
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_enable_mac_int
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_init
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_list_init
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init_ifdata
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_start
</UL>

<P><STRONG><a name="[7f7]"></a>tls_wl_mem_reinit</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_enable
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_irq_disable
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_tx_init
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_init
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_init
<LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_enable_rx
<LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_enable_mac_int
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_disble_rx
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_disable_mac_int
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
</UL>

<P><STRONG><a name="[7fa]"></a>ieee80211_hw_config</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_config
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_change_channel_info
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_switch_channel_width
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_change_chanel
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_scan_task
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_init
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_freq
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_scan_completed
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_enable_ht
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
</UL>

<P><STRONG><a name="[7fc]"></a>ieee80211_bss_info_change_notify</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ieee80211_bss_info_change_notify &rArr; tls_wl_hw_bss_info_changed &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_bss_info_changed
</UL>
<BR>[Called By]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_del_beacon
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_beacon
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
</UL>

<P><STRONG><a name="[9c9]"></a>ieee80211_reset_erp_info</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tls_wl_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
</UL>

<P><STRONG><a name="[b90]"></a>tls_wl_print_stats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tls_wl_core.o(.text), UNUSED)

<P><STRONG><a name="[b91]"></a>ieee80211_disconnect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tls_wl_core.o(.text), UNUSED)

<P><STRONG><a name="[7fe]"></a>ieee80211_change_iface</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ieee80211_change_iface &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_mode
</UL>

<P><STRONG><a name="[7ff]"></a>tls_wl_power_save</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tls_wl_power_save &rArr; tls_os_timer_change &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
</UL>

<P><STRONG><a name="[32c]"></a>ieee80211_get_tx_gain</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tls_wl_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txg_proc
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_init
<LI><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_tx_gain_max
</UL>

<P><STRONG><a name="[74a]"></a>tls_get_wif_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tls_wl_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_release
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_acquire
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hw_set_multicast_key
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hw_del_multicast_key
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ethernet_ip_rx_callback
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ethernet_data_rx_callback
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_deinit_ap
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_init
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_bssid
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_remove_key
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_send_eapol
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_auth_params
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_auth_alg
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_freq
</UL>

<P><STRONG><a name="[801]"></a>tls_wl_cleanup</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tls_wl_cleanup &rArr; tls_wl_mlme_cleanup &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_cleanup
</UL>

<P><STRONG><a name="[7f5]"></a>tls_wl_hw_enable_mac_int</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tls_wl_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[7f8]"></a>tls_wl_hw_disable_mac_int</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tls_wl_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[b92]"></a>tls_wl_pmu_fini</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tls_wl_hw.o(.text), UNUSED)

<P><STRONG><a name="[b93]"></a>tls_wl_pmu_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tls_wl_hw.o(.text), UNUSED)

<P><STRONG><a name="[7f6]"></a>tls_wl_hw_enable_rx</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tls_wl_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[7f9]"></a>tls_wl_hw_disble_rx</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tls_wl_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[7ac]"></a>tls_wl_hw_wake_up</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_wl_hw_wake_up &rArr; tls_sys_clk_set
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_set
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_ps
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_acquire
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_power_save_awake
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_tx
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_start_scan
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_delba
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_addba_resp
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
</UL>

<P><STRONG><a name="[800]"></a>tls_wl_hw_sleep</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_wl_hw_sleep &rArr; tls_sys_clk_set
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_set
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_ps
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_power_save
</UL>

<P><STRONG><a name="[803]"></a>tls_wl_change_chanel</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tls_wl_hw.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hw_config
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
</UL>
<BR>[Called By]<UL><LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_change_chanel
</UL>

<P><STRONG><a name="[248]"></a>tls_wl_change_channel_info</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tls_wl_change_channel_info &rArr; ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hw_config
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_change_chanel
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_test_channel
</UL>

<P><STRONG><a name="[7ef]"></a>tls_wl_hw_init</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_tx_gain
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
<LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rc_init
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_bbp_init
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hw_config
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[9ef]"></a>tls_wl_hw_reset_tsf</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tls_wl_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_config_auth
</UL>

<P><STRONG><a name="[7fb]"></a>tls_wl_hw_config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tls_wl_hw_config &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hw_config
</UL>

<P><STRONG><a name="[7fd]"></a>tls_wl_hw_bss_info_changed</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_wl_hw_bss_info_changed &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_beacon_get
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_set_tx_rate_and_power
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_change_notify
</UL>

<P><STRONG><a name="[80f]"></a>tls_sec_find_hw_idx</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_sec_find_hw_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hw_del_multicast_key
</UL>

<P><STRONG><a name="[80c]"></a>hed_sec_set_mac_addr</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hed_sec_set_mac_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_multicast_key
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_ccmp_key
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_tkip_key
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_wep_key
</UL>

<P><STRONG><a name="[80e]"></a>hed_sec_clr_mac_addr</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hed_sec_clr_mac_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_del_key
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_del_multicast_key
</UL>

<P><STRONG><a name="[80a]"></a>hed_hw_set_multicast_key</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hed_hw_set_multicast_key &rArr; hed_sec_set_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_mac_addr
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_get_key_table_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hw_set_multicast_key
</UL>

<P><STRONG><a name="[52a]"></a>tls_hw_set_multicast_key</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tls_hw_set_multicast_key &rArr; hed_hw_set_multicast_key &rArr; hed_sec_set_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_multicast_key
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_igmp_mac_filter
</UL>

<P><STRONG><a name="[80d]"></a>hed_hw_del_multicast_key</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hed_hw_del_multicast_key &rArr; hed_sec_clr_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_clr_mac_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hw_del_multicast_key
</UL>

<P><STRONG><a name="[52b]"></a>tls_hw_del_multicast_key</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tls_hw_del_multicast_key &rArr; hed_hw_del_multicast_key &rArr; hed_sec_clr_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_del_multicast_key
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sec_find_hw_idx
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_igmp_mac_filter
</UL>

<P><STRONG><a name="[814]"></a>tls_wl_hw_set_key</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tls_wl_hw_set_key &rArr; hed_hw_set_ccmp_key &rArr; hed_sec_set_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_ccmp_key
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_tkip_key
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_wep_key
</UL>
<BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_add
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_link
</UL>

<P><STRONG><a name="[817]"></a>tls_wl_hw_del_key</STRONG> (Thumb, 328 bytes, Stack size 28 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tls_wl_hw_del_key &rArr; hed_sec_clr_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_clr_mac_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_free
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_key_destroy
</UL>

<P><STRONG><a name="[750]"></a>tls_wl_if_set_mode</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tls_wl_if_set_mode &rArr; ieee80211_change_iface &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_change_iface
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_create_ap
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_mode
</UL>

<P><STRONG><a name="[920]"></a>tls_wl_if_clear_mode</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tls_wl_if.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_cleanup
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_deinit_ap
</UL>

<P><STRONG><a name="[819]"></a>tls_wl_if_get_scan_res</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tls_wl_if_get_scan_res &rArr; ieee80211_bss_flush &rArr; ieee80211_bss_del &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_flush
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_scan_rslt
</UL>

<P><STRONG><a name="[7a0]"></a>tls_wl_if_sta_flush</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = tls_wl_if_sta_flush &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_deauthenticate
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_timeout
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_flush
</UL>

<P><STRONG><a name="[81c]"></a>tls_wl_if_sta_deauth</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tls_wl_if_sta_deauth &rArr; ieee80211_send_deauth_disassoc &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_deauth_disassoc
</UL>
<BR>[Called By]<UL><LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_deauthenticate
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_deauth
</UL>

<P><STRONG><a name="[81e]"></a>tls_wl_if_sta_disassoc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tls_wl_if_sta_disassoc &rArr; ieee80211_send_deauth_disassoc &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_deauth_disassoc
</UL>
<BR>[Called By]<UL><LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_disassoc
</UL>

<P><STRONG><a name="[a6b]"></a>tls_wl_if_set_tx_queue_params</STRONG> (Thumb, 166 bytes, Stack size 20 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tls_wl_if_set_tx_queue_params
</UL>
<BR>[Called By]<UL><LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_tx_queue_params
</UL>

<P><STRONG><a name="[74c]"></a>tls_wl_if_set_sta_flags</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_wl_if_set_sta_flags &rArr; sta_info_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_flags
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_pkt2sta
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_all_pkt2sta
</UL>

<P><STRONG><a name="[822]"></a>tls_wl_if_send_mlme</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = tls_wl_if_send_mlme &rArr; ieee80211_send_mgmt &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt
</UL>
<BR>[Called By]<UL><LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_switch_channel_width
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_channel_switch
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_send_mlme
</UL>

<P><STRONG><a name="[748]"></a>tls_wl_if_send_channel_switch</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = tls_wl_if_send_channel_switch &rArr; tls_wl_if_send_mlme &rArr; ieee80211_send_mgmt &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_mlme
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_channel_check
</UL>

<P><STRONG><a name="[824]"></a>tls_wl_if_switch_channel_width</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tls_wl_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_mlme
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hw_config
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[825]"></a>tls_wl_if_channel_info_updata</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_wl_if_channel_info_updata
</UL>
<BR>[Calls]<UL><LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
</UL>
<BR>[Called By]<UL><LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_freq
</UL>

<P><STRONG><a name="[91f]"></a>tls_wl_if_set_bssid</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_wl_if_set_bssid
</UL>
<BR>[Called By]<UL><LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_bssid
</UL>

<P><STRONG><a name="[826]"></a>tls_wl_if_set_rate_mode</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_wl_if_set_rate_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_get_rate_table
</UL>
<BR>[Called By]<UL><LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_ap
</UL>

<P><STRONG><a name="[827]"></a>tls_wl_if_set_beacon</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tls_wl_if_set_beacon &rArr; ieee80211_bss_info_change_notify &rArr; tls_wl_hw_bss_info_changed &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_change_notify
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_ap
</UL>

<P><STRONG><a name="[828]"></a>tls_wl_if_del_beacon</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tls_wl_if_del_beacon &rArr; ieee80211_bss_info_change_notify &rArr; tls_wl_hw_bss_info_changed &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_change_notify
</UL>
<BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_deinit_ap
</UL>

<P><STRONG><a name="[829]"></a>tls_wl_if_scan</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = tls_wl_if_scan &rArr; alloc_scan_req &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_request_scan
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_scan_req
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_scan
</UL>

<P><STRONG><a name="[82c]"></a>tls_wl_if_set_ssid</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = tls_wl_if_set_ssid &rArr; ieee80211_sta_req_auth &rArr; ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_set_ssid
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_req_auth
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_deauth_disassoc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_ssid
</UL>

<P><STRONG><a name="[82f]"></a>tls_wl_if_set_freq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tls_wl_if_set_freq &rArr; ieee80211_set_freq &rArr; ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_freq
</UL>

<P><STRONG><a name="[91c]"></a>tls_wl_if_set_auth</STRONG> (Thumb, 362 bytes, Stack size 28 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tls_wl_if_set_auth
</UL>
<BR>[Called By]<UL><LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_auth_params
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_auth_alg
</UL>

<P><STRONG><a name="[831]"></a>tls_wl_if_remove_key</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_del_key
</UL>
<BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_disconnect
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_deinit_ap
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_remove_key
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_add_key
</UL>

<P><STRONG><a name="[833]"></a>tls_wl_if_add_key</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_flags
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_add_key
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_remove_key
</UL>
<BR>[Called By]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
</UL>

<P><STRONG><a name="[74d]"></a>tls_wl_if_xmit</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_proc_beacon_done
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_pkt2sta
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_all_pkt2sta
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_eapol
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_deliver_frame
</UL>

<P><STRONG><a name="[836]"></a>tls_wl_if_send_eapol</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = tls_wl_if_send_eapol &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_xmit
</UL>
<BR>[Called By]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_send_eapol
</UL>

<P><STRONG><a name="[b94]"></a>tls_wl_if_get_rates</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tls_wl_if.o(.text), UNUSED)

<P><STRONG><a name="[837]"></a>tls_wl_if_sta_add</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tls_wl_if_sta_add &rArr; ieee80211_rate_control_init &rArr; rc_init &rArr; rc_wl_select_max_rate &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_flags
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_set_key
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_add_with_mode
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rate_control_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_add
</UL>

<P><STRONG><a name="[83a]"></a>tls_wl_if_sta_remove</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = tls_wl_if_sta_remove &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_free
</UL>
<BR>[Called By]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_remove
</UL>

<P><STRONG><a name="[83c]"></a>tls_wl_if_get_inact_sec</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_wl_if_get_inact_sec &rArr; sta_info_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
</UL>
<BR>[Called By]<UL><LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_get_inact_sec
</UL>

<P><STRONG><a name="[7e3]"></a>tls_wl_if_disconnect</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = tls_wl_if_disconnect &rArr; ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_remove_key
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
</UL>

<P><STRONG><a name="[83e]"></a>tls_wl_if_set_max_rate</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tls_wl_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_get_rate_table
</UL>

<P><STRONG><a name="[b95]"></a>tls_wl_if_get_max_rate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tls_wl_if.o(.text), UNUSED)

<P><STRONG><a name="[922]"></a>tls_wl_if_set_adhoc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tls_wl_if.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_associate
</UL>

<P><STRONG><a name="[923]"></a>tls_wl_if_set_ps_mode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tls_wl_if.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_associate
</UL>

<P><STRONG><a name="[263]"></a>tls_wl_if_ps</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tls_wl_if_ps &rArr; tls_wl_hw_sleep &rArr; tls_sys_clk_set
</UL>
<BR>[Calls]<UL><LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_sleep
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_ps
</UL>

<P><STRONG><a name="[264]"></a>tls_wl_if_standby</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tls_wl_if_standby &rArr; tls_os_timer_change &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_ps
</UL>

<P><STRONG><a name="[265]"></a>tls_wl_if_sleep</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = tls_wl_if_sleep &rArr; tls_os_timer_change &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_ps
</UL>

<P><STRONG><a name="[7a9]"></a>tls_wl_if_set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tls_wl_if.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_bssid
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wps_start_pin
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wps_start_pbc
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_scan_results
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_auth
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_deauth
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
</UL>

<P><STRONG><a name="[87b]"></a>tls_wl_if_get_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tls_wl_if.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_scan_results
<LI><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_errno
</UL>

<P><STRONG><a name="[83f]"></a>tls_wl_if_perror</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tls_wl_if.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_perror
</UL>

<P><STRONG><a name="[87e]"></a>tls_wl_if_get_errinfo</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tls_wl_if.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_errinfo
</UL>

<P><STRONG><a name="[32b]"></a>rf_spi_write</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tls_wl_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rf_spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfw_proc
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_wave_start
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_set_channel
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_iqmismatch
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_wave_stop
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_band_switch
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Mismatch_method
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_func_method
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_fft
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_Leakage_correlation
</UL>

<P><STRONG><a name="[2d8]"></a>rf_spi_read</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tls_wl_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rf_spi_read
</UL>
<BR>[Calls]<UL><LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rfr_proc
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
</UL>

<P><STRONG><a name="[b96]"></a>rf_spi_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tls_wl_rf.o(.text), UNUSED)

<P><STRONG><a name="[804]"></a>delay_us</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tls_wl_rf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rx_data_from_adc
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_init
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_band_switch
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Mismatch_method
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_func_method
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_acquire_once
</UL>

<P><STRONG><a name="[807]"></a>wm_rf_init</STRONG> (Thumb, 772 bytes, Stack size 56 bytes, tls_wl_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_lo
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_iq_phase
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_tx_iq_gain
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rf_vcg_ctrl_op
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_lo
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_iq_phase
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_iq_gain
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_freq_err_op
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_read
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_iqmismatch
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_loleakage_cal
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_init
</UL>

<P><STRONG><a name="[843]"></a>wm_rf_band_switch</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, tls_wl_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wm_rf_band_switch &rArr; rf_spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_set_channel
</UL>

<P><STRONG><a name="[131]"></a>wm_rf_set_channel</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, tls_wl_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wm_rf_set_channel &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_band_switch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_wl_hw.o(.text)
</UL>
<P><STRONG><a name="[844]"></a>tls_tx_wave_stop</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, tls_wl_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_tx_wave_stop &rArr; rf_spi_write
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_wave_start
</UL>

<P><STRONG><a name="[335]"></a>tls_tx_wave_start</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, tls_wl_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tls_tx_wave_start &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_wave_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_sin
</UL>

<P><STRONG><a name="[336]"></a>tls_rx_data_from_adc</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, tls_wl_rf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tls_rx_data_from_adc &rArr; tls_os_time_delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rx_wave
</UL>

<P><STRONG><a name="[7e8]"></a>tls_wl_litepoint_test</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tls_wl_litepoint_test &rArr; tls_tx_send_litepoint &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_data_tx_isr
</UL>

<P><STRONG><a name="[7f2]"></a>tls_wl_tx_init</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tls_wl_tx_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[846]"></a>ieee80211_set_qos_hdr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ieee80211_set_qos_hdr &rArr; ieee80211_get_qos_ctl
</UL>
<BR>[Calls]<UL><LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_qos_ctl
</UL>
<BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
</UL>

<P><STRONG><a name="[848]"></a>ieee80211_tx_encrypt_add_iv</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ieee80211_tx_encrypt_add_iv &rArr; ieee80211_wep_get_iv
</UL>
<BR>[Calls]<UL><LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_wep_get_iv
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_tx_start
</UL>

<P><STRONG><a name="[84a]"></a>ieee80211_tx_rate_ctrl</STRONG> (Thumb, 494 bytes, Stack size 40 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_rate
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_is_ht
</UL>
<BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
</UL>

<P><STRONG><a name="[84d]"></a>ieee80211_tx_michael_mic_add</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ieee80211_tx_michael_mic_add
</UL>
<BR>[Calls]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mic_block
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_has_a4
</UL>
<BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
</UL>

<P><STRONG><a name="[835]"></a>tls_wl_if_tx</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_xmit
</UL>

<P><STRONG><a name="[528]"></a>tls_wifi_buffer_acquire</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tls_wifi_buffer_acquire &rArr; tls_os_sem_acquire &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[529]"></a>tls_wifi_buffer_release</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tls_wifi_buffer_release &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
</UL>

<P><STRONG><a name="[858]"></a>ieee80211_send_data</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, tls_wl_tx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_frequency_to_channel
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hdrlen
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_set_tx_rate_and_power2
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_data
</UL>

<P><STRONG><a name="[217]"></a>tls_wifi_data_recv_cb_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_stop_clear_data
</UL>

<P><STRONG><a name="[b97]"></a>tls_wifi_data_ext_recv_cb_register</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_wifi_api.o(.text), UNUSED)

<P><STRONG><a name="[537]"></a>tls_wifi_status_change_cb_register</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
</UL>

<P><STRONG><a name="[535]"></a>tls_ethernet_data_rx_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_ethernet_data_rx_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
</UL>

<P><STRONG><a name="[536]"></a>tls_ethernet_ip_rx_callback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_ethernet_ip_rx_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
</UL>
<BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
</UL>

<P><STRONG><a name="[218]"></a>tls_wifi_scan_result_cb_register</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_scan
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_stop_clear_data
</UL>

<P><STRONG><a name="[23a]"></a>tls_wifi_scan</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_wifi_scan &rArr; supplicant_send_event &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_scan
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[85b]"></a>tls_wifi_passive_scan</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[237]"></a>tls_wifi_get_scan_rslt</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tls_wifi_get_scan_rslt &rArr; tls_wl_if_get_scan_res &rArr; ieee80211_bss_flush &rArr; ieee80211_bss_del &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_scan_res
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_wscan_cmplt
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_scan_result_deal
</UL>

<P><STRONG><a name="[23f]"></a>tls_wifi_set_listen_mode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[a16]"></a>tls_wifi_get_listen_mode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_mgmt_filter
</UL>

<P><STRONG><a name="[b98]"></a>tls_filter_mcast_mac</STRONG> (Thumb, 182 bytes, Stack size 20 bytes, wm_wifi_api.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>tls_wifi_set_bcast_mac_filter</STRONG> (Thumb, 344 bytes, Stack size 36 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tls_wifi_set_bcast_mac_filter
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_airkiss_recv
</UL>

<P><STRONG><a name="[244]"></a>tls_wifi_restore_bcast_mac_filter</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_airkiss_recv
</UL>

<P><STRONG><a name="[85c]"></a>tls_wifi_change_chanel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_change_chanel
</UL>

<P><STRONG><a name="[85d]"></a>wpa_update_ssid</STRONG> (Thumb, 176 bytes, Stack size 96 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = wpa_update_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
</UL>

<P><STRONG><a name="[85e]"></a>wpa_update_ssid2</STRONG> (Thumb, 116 bytes, Stack size 88 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = wpa_update_ssid2 &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
</UL>

<P><STRONG><a name="[860]"></a>wpa_update_encrypt_cfg2</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wpa_update_encrypt_cfg2
</UL>
<BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_encrypt2
</UL>

<P><STRONG><a name="[85f]"></a>wpa_update_encrypt2</STRONG> (Thumb, 82 bytes, Stack size 96 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = wpa_update_encrypt2 &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_encrypt_cfg2
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
</UL>

<P><STRONG><a name="[861]"></a>wpa_update_key_cfg2</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wpa_update_key_cfg2 &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap2
</UL>

<P><STRONG><a name="[862]"></a>wpa_update_key_4_ap2</STRONG> (Thumb, 230 bytes, Stack size 136 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_digit
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_cfg2
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
</UL>

<P><STRONG><a name="[863]"></a>wpa_update_ip_info2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>

<P><STRONG><a name="[864]"></a>wpa_update_dnsname</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = wpa_update_dnsname &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
</UL>

<P><STRONG><a name="[865]"></a>wpa_update_bssid</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = wpa_update_bssid &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_bssid
</UL>

<P><STRONG><a name="[867]"></a>wpa_update_mode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = wpa_update_mode &rArr; __wpa_update_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_update_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_bssid
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wps_start_pin
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wps_start_pbc
</UL>

<P><STRONG><a name="[868]"></a>wpa_update_key</STRONG> (Thumb, 132 bytes, Stack size 160 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_bssid
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
</UL>

<P><STRONG><a name="[7d1]"></a>wpa_update_encrypt_cfg</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wpa_update_encrypt_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_default_configs
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_encrypt
</UL>

<P><STRONG><a name="[869]"></a>wpa_update_encrypt</STRONG> (Thumb, 80 bytes, Stack size 96 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_encrypt_cfg
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[7d2]"></a>wpa_update_key_cfg</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wpa_update_key_cfg &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_default_configs
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap
</UL>

<P><STRONG><a name="[86a]"></a>wpa_update_key_4_ap</STRONG> (Thumb, 172 bytes, Stack size 104 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_to_digit
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_cfg
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[86b]"></a>wpa_update_ip_info</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_get_ethif
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_set_addr
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcp_stop
</UL>

<P><STRONG><a name="[21b]"></a>tls_wifi_connect</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = tls_wifi_connect &rArr; wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_reload_config
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_mode
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join_net
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_finish
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect
</UL>

<P><STRONG><a name="[231]"></a>tls_wifi_connect_by_bssid</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = tls_wifi_connect_by_bssid &rArr; wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_reload_config
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_mode
<LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_bssid
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join_net
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_bssid
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect
</UL>

<P><STRONG><a name="[245]"></a>tls_wifi_connect_by_ssid_bssid</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = tls_wifi_connect_by_ssid_bssid &rArr; wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_reload_config
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_mode
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_finish
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_ssid_bssid
</UL>

<P><STRONG><a name="[86c]"></a>tls_wifi_get_state</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_freq
</UL>

<P><STRONG><a name="[27d]"></a>tls_wifi_softap_create</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_channel_to_frequency
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_reload_config4softap
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_state
<LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_dnsname
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap2
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_encrypt2
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid2
<LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_update_mode
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_net
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect_softap
</UL>

<P><STRONG><a name="[281]"></a>tls_wifi_softap_destroy</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_wifi_softap_destroy &rArr; supplicant_event_disconnect_softap &rArr; supplicant_send_event &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disconnect_softap
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_disconnect_network
</UL>

<P><STRONG><a name="[1f3]"></a>tls_wifi_get_authed_sta_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tls_wifi_get_authed_sta_info &rArr; ap_get_authed_sta
</UL>
<BR>[Calls]<UL><LI><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_authed_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_sta_detail
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
</UL>

<P><STRONG><a name="[57b]"></a>tls_wifi_softap_get_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_wifi_api.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_status_changed
</UL>

<P><STRONG><a name="[b99]"></a>tls_wifi_softap_client_event_register</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_wifi_api.o(.text), UNUSED)

<P><STRONG><a name="[b9a]"></a>tls_wifi_ibss_create</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_wifi_api.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>tls_wifi_disconnect</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_wifi_disconnect &rArr; supplicant_event_disconnect_network &rArr; supplicant_send_event &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disconnect_network
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_disconnect_network
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_wait_disconnect
</UL>

<P><STRONG><a name="[1d0]"></a>tls_wifi_auto_connect_flag</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateWifiTask
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_disconnect_network
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
</UL>

<P><STRONG><a name="[2f4]"></a>tls_wifi_get_current_bss</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tls_wifi_get_current_bss &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[86e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wpa_data
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_cipher2host
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_frequency_to_channel
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjoin_proc
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_success
</UL>

<P><STRONG><a name="[870]"></a>tls_wps_get_pin</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_generate_pin
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_snprintf
</UL>

<P><STRONG><a name="[873]"></a>tls_wps_set_pin</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[342]"></a>tls_wps_start_pin</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = tls_wps_start_pin &rArr; wpa_update_mode &rArr; __wpa_update_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_reload_config
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwps_proc
</UL>

<P><STRONG><a name="[343]"></a>tls_wps_start_pbc</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = tls_wps_start_pbc &rArr; wpa_update_mode &rArr; __wpa_update_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_reload_config
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwps_proc
</UL>

<P><STRONG><a name="[64e]"></a>tls_wifi_set_psflag</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = tls_wifi_set_psflag &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_exit
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_enter
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configs
</UL>

<P><STRONG><a name="[7ab]"></a>tls_wifi_get_psflag</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_wifi_get_psflag &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
</UL>

<P><STRONG><a name="[874]"></a>tls_wifi_send_oneshotdata</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
</UL>

<P><STRONG><a name="[876]"></a>tls_wifi_get_tx_gain_max</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_tx_gain
</UL>

<P><STRONG><a name="[877]"></a>tls_wifi_send_mgmt</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt_by_rate
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[879]"></a>tls_wifi_send_data</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_data
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[87a]"></a>tls_wifi_get_errno</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_errno
</UL>

<P><STRONG><a name="[87c]"></a>tls_wifi_perror</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_perror
</UL>

<P><STRONG><a name="[87d]"></a>tls_wifi_get_errinfo</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_wifi_api.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_errinfo
</UL>

<P><STRONG><a name="[882]"></a>decrypt_data</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, wm_wifi_oneshot_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = decrypt_data
</UL>
<BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_probereq
</UL>

<P><STRONG><a name="[880]"></a>decode_data</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, wm_wifi_oneshot_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = decode_data &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_probereq
</UL>

<P><STRONG><a name="[881]"></a>tls_wifi_oneshotinfo_resolve_probereq</STRONG> (Thumb, 618 bytes, Stack size 40 bytes, wm_wifi_oneshot_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_wifi_oneshotinfo_resolve_probereq &rArr; decode_data &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_data
<LI><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrypt_data
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_clear_1shot_info
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_resolve_info
</UL>

<P><STRONG><a name="[b9b]"></a>tls_wifi_get_oneshot_chan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wm_wifi_oneshot_api.o(.text), UNUSED)

<P><STRONG><a name="[883]"></a>tls_wifi_oneshot_resolve_info</STRONG> (Thumb, 340 bytes, Stack size 96 bytes, wm_wifi_oneshot_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tls_wifi_oneshot_resolve_info &rArr; tls_wifi_oneshotinfo_resolve_probereq &rArr; decode_data &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc8
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_probereq
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decode_new_oneshot_data
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pbreq_recv
</UL>

<P><STRONG><a name="[884]"></a>tls_wifi_pbreq_encry_data</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, wm_wifi_oneshot_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tls_wifi_pbreq_encry_data &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pbreq_recv
</UL>

<P><STRONG><a name="[885]"></a>tls_wifi_pbreq_recv</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, wm_wifi_oneshot_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = tls_wifi_pbreq_recv &rArr; tls_wifi_oneshot_resolve_info &rArr; tls_wifi_oneshotinfo_resolve_probereq &rArr; decode_data &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_flag
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pbreq_encry_data
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_resolve_info
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_clear_1shot_info
</UL>
<BR>[Called By]<UL><LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_check_frame
</UL>

<P><STRONG><a name="[22e]"></a>tls_wifi_decode_new_oneshot_data</STRONG> (Thumb, 324 bytes, Stack size 64 bytes, wm_wifi_oneshot_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = tls_wifi_decode_new_oneshot_data &rArr; tls_get_mac_addr &rArr; tls_ft_param_get &rArr; tls_fls_read &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_mac_addr
<LI><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_resolve_info
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_clear_1shot_info
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot
</UL>

<P><STRONG><a name="[36a]"></a>tls_litepoint_start</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, litepoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = tls_litepoint_start &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_lpinit
</UL>

<P><STRONG><a name="[845]"></a>tls_tx_send_litepoint</STRONG> (Thumb, 404 bytes, Stack size 40 bytes, litepoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = tls_tx_send_litepoint &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_mac
<LI><a href="#[886]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_type
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_get_rate_table
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_ieee80211_if_data
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_litepoint_test_start
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_litepoint_test
</UL>

<P><STRONG><a name="[331]"></a>tls_set_test_channel</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, litepoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tls_set_test_channel &rArr; tls_wl_change_channel_info &rArr; ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_change_channel_info
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpchl_proc
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rx_litepoint_test_start
</UL>

<P><STRONG><a name="[b9c]"></a>tls_tx_litepoint_param_update</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, litepoint.o(.text), UNUSED)

<P><STRONG><a name="[332]"></a>tls_tx_litepoint_test_start</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, litepoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = tls_tx_litepoint_test_start &rArr; tls_tx_send_litepoint &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptstr_proc
</UL>

<P><STRONG><a name="[333]"></a>tls_txrx_litepoint_test_stop</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, litepoint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpstpr_proc
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpstpt_proc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lprstp_proc
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptstp_proc
</UL>

<P><STRONG><a name="[887]"></a>tls_txrx_litepoint_clear_data</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, litepoint.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[2d6]"></a>tls_tx_litepoint_test_get_totalsnd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, litepoint.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
</UL>

<P><STRONG><a name="[334]"></a>tls_rx_litepoint_test_start</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, litepoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tls_rx_litepoint_test_start &rArr; tls_set_test_channel &rArr; tls_wl_change_channel_info &rArr; ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_set_test_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lprstr_proc
</UL>

<P><STRONG><a name="[2d7]"></a>tls_rx_litepoint_test_result</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, litepoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_rx_litepoint_test_result
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
</UL>

<P><STRONG><a name="[2d9]"></a>tls_rx_litepoint_pwr_result</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, litepoint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tls_rx_litepoint_pwr_result
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
</UL>

<P><STRONG><a name="[b9d]"></a>tls_rx_litepoint_test_rate</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, litepoint.o(.text), UNUSED)

<P><STRONG><a name="[888]"></a>wpa_bss_remove</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wpa_bss_remove &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
</UL>

<P><STRONG><a name="[889]"></a>wpa_bss_add</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wpa_bss_add &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
</UL>

<P><STRONG><a name="[7c5]"></a>wpa_bss_deinit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wpa_bss_deinit &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
</UL>

<P><STRONG><a name="[7b5]"></a>wpa_bss_get_ie</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_bss_get_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[88e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_bit_rates
<LI><a href="#[88d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_max_rate
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_security_workaround
</UL>

<P><STRONG><a name="[7b4]"></a>wpa_bss_get_vendor_ie</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wpa_bss_get_vendor_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_security_workaround
</UL>

<P><STRONG><a name="[88a]"></a>wpa_bss_get_vendor_ie_multi</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, bss.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[88d]"></a>wpa_bss_get_max_rate</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, bss.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_ie
</UL>

<P><STRONG><a name="[88e]"></a>wpa_bss_get_bit_rates</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, bss.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_ie
</UL>

<P><STRONG><a name="[88f]"></a>wpa_supplicant_connect</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_drv_associate &rArr; wpa_drv_set_ssid &rArr; tls_wl_if_set_ssid &rArr; ieee80211_sta_req_auth &rArr; ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_scan
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_connect_timeout
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_scan_results
</UL>

<P><STRONG><a name="[7e0]"></a>wpa_supplicant_event_assoc</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1396<LI>Call Chain = wpa_supplicant_event_assoc &rArr; wpa_supplicant_rx_eapol &rArr; wpa_sm_rx_eapol &rArr; wpa_supplicant_process_3_of_4 &rArr; wpa_supplicant_pairwise_gtk &rArr; wpa_supplicant_key_neg_complete &rArr; eapol_sm_notify_eap_success &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_portValid
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_portEnabled
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_auth_timeout
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_disassociate
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_auth_timeout
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_add_randomness
<LI><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_notify_assoc
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_eap_success
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_config
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_associnfo
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
</UL>

<P><STRONG><a name="[894]"></a>wpa_supplicant_update_key_wep</STRONG> (Thumb, 392 bytes, Stack size 240 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = wpa_supplicant_update_key_wep &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2digit
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
</UL>

<P><STRONG><a name="[897]"></a>wpa_supplicant_update_key_wpa</STRONG> (Thumb, 304 bytes, Stack size 240 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = wpa_supplicant_update_key_wpa &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[895]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2digit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
</UL>

<P><STRONG><a name="[798]"></a>wpa_supplicant_mark_disassoc</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1076<LI>Call Chain = wpa_supplicant_mark_disassoc &rArr; eapol_sm_notify_portValid &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_portValid
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_portEnabled
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_connection
</UL>

<P><STRONG><a name="[7e1]"></a>wpa_supplicant_event_disassoc</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1092<LI>Call Chain = wpa_supplicant_event_disassoc &rArr; wpa_supplicant_mark_disassoc &rArr; eapol_sm_notify_portValid &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_mark_disassoc
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_notify_disassoc
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
</UL>

<P><STRONG><a name="[7df]"></a>wpa_supplicant_event_scan_results</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = wpa_supplicant_event_scan_results &rArr; wpa_supplicant_connect &rArr; wpa_supplicant_associate &rArr; wpa_drv_associate &rArr; wpa_drv_set_ssid &rArr; tls_wl_if_set_ssid &rArr; ieee80211_sta_req_auth &rArr; ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect
<LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
<LI><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
</UL>

<P><STRONG><a name="[8a5]"></a>hostapd_setup_wpa_psk</STRONG> (Thumb, 118 bytes, Stack size 64 bytes, hostapd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = hostapd_setup_wpa_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[731]"></a>hostapd_interface_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hostapd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hostapd_interface_free &rArr; hostapd_clean_ps_multicast &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_clean_ps_multicast
</UL>
<BR>[Called By]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ap_destroy
</UL>

<P><STRONG><a name="[8ad]"></a>hostapd_rate_found</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, hostapd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_prepare_rates
</UL>

<P><STRONG><a name="[8ac]"></a>hostapd_prepare_rates</STRONG> (Thumb, 166 bytes, Stack size 144 bytes, hostapd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hostapd_prepare_rates &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_rate_found
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface
</UL>

<P><STRONG><a name="[751]"></a>hostapd_setup_interface</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, hostapd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = hostapd_setup_interface &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init_gmk_and_counter &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_bssid
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_tx_queue_params
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_freq
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_prepare_rates
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_create_ap
</UL>

<P><STRONG><a name="[730]"></a>hostapd_interface_deinit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hostapd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; ap_free_sta &rArr; hostapd_drv_sta_remove &rArr; tls_wl_if_sta_remove &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_deinit_wpa
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_flush_old_stations
</UL>
<BR>[Called By]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ap_destroy
</UL>

<P><STRONG><a name="[8b3]"></a>hostapd_new_assoc_sta</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, hostapd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = hostapd_new_assoc_sta &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_associated
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_deauth
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
</UL>

<P><STRONG><a name="[8b9]"></a>ieee802_1x_set_sta_authorized</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ieee802_1x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ieee802_1x_set_sta_authorized &rArr; ap_sta_set_authorized &rArr; hostapd_client_event
</UL>
<BR>[Calls]<UL><LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_authorized
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
</UL>
<BR>[Called By]<UL><LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_eapol
</UL>

<P><STRONG><a name="[741]"></a>ieee802_1x_receive</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, ieee802_1x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = ieee802_1x_receive &rArr; wpa_receive &rArr; wpa_sta_disconnect &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
</UL>

<P><STRONG><a name="[8bd]"></a>hostapd_notif_assoc</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = hostapd_notif_assoc &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_add_randomness
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_new_assoc_sta
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_init
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_parse_elems
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_disassoc
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc
</UL>

<P><STRONG><a name="[8cd]"></a>hostapd_eid_supp_rates</STRONG> (Thumb, 114 bytes, Stack size 28 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hostapd_eid_supp_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_assoc_resp
</UL>

<P><STRONG><a name="[8ce]"></a>hostapd_eid_ext_supp_rates</STRONG> (Thumb, 114 bytes, Stack size 28 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = hostapd_eid_ext_supp_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_assoc_resp
</UL>

<P><STRONG><a name="[8cc]"></a>hostapd_own_capab_info</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ieee802_11.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_assoc_resp
</UL>

<P><STRONG><a name="[8c8]"></a>ieee802_11_print_ssid</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ieee802_11_print_ssid
</UL>
<BR>[Called By]<UL><LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_assoc_ies
</UL>

<P><STRONG><a name="[736]"></a>ieee802_11_mgmt</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = ieee802_11_mgmt &rArr; handle_assoc &rArr; handle_assoc_cb &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_client_event
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_disassociate_indication
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deauthenticate_indication
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_remove
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_auth
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_mgmt_rx
</UL>

<P><STRONG><a name="[742]"></a>ieee802_11_rx_from_unknown</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = ieee802_11_rx_from_unknown &rArr; hostapd_drv_sta_deauth &rArr; tls_wl_if_sta_deauth &rArr; ieee80211_send_deauth_disassoc &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_deauth
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_disassoc
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
</UL>

<P><STRONG><a name="[8be]"></a>hostapd_parse_elems</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, ieee802_11_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hostapd_parse_elems
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_assoc_ies
</UL>

<P><STRONG><a name="[b9e]"></a>ieee802_11_ie_count</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ieee802_11_common.o(.text), UNUSED)

<P><STRONG><a name="[8dc]"></a>ieee802_11_vendor_ie_concat</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, ieee802_11_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_scan_result_text
</UL>

<P><STRONG><a name="[735]"></a>get_hdr_bssid</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ieee802_11_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_hdr_bssid
</UL>
<BR>[Called By]<UL><LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_mgmt_rx
</UL>

<P><STRONG><a name="[8dd]"></a>os_zalloc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, os_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_init
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_wpa
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_eapol
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_init
<LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_init
</UL>

<P><STRONG><a name="[753]"></a>os_realloc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, os_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_resize
</UL>

<P><STRONG><a name="[8de]"></a>os_strdup</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, os_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = os_strdup &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_init
<LI><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_device_data_dup
</UL>

<P><STRONG><a name="[7dd]"></a>wpa_supplicant_req_scan</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wpa_supplicant_req_scan &rArr; tls_os_timer_change &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
</UL>
<BR>[Called By]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_scan_results
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_connect_network
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_reassoc
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_eapol_cb
</UL>

<P><STRONG><a name="[7e2]"></a>wpa_supplicant_scan</STRONG> (Thumb, 248 bytes, Stack size 80 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = wpa_supplicant_scan &rArr; wpa_drv_scan &rArr; tls_wl_if_scan &rArr; alloc_scan_req &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_scan
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_extra_ies
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zalloc
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
</UL>

<P><STRONG><a name="[7aa]"></a>wpa_supplicant_cancel_scan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wpa_supplicant_cancel_scan &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_cancel
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_eapol_cb
</UL>

<P><STRONG><a name="[129]"></a>wpa_supplicant_scan_timer</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wpa_supplicant_scan_timer &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.text)
</UL>
<P><STRONG><a name="[899]"></a>wpa_scan_get_ie</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_scan_get_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ssid_bss_match
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
</UL>

<P><STRONG><a name="[89a]"></a>wpa_scan_get_vendor_ie</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = wpa_scan_get_vendor_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ssid_bss_match
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
</UL>

<P><STRONG><a name="[8e1]"></a>wpa_scan_get_vendor_ie_multi</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wpa_scan_get_vendor_ie_multi &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
</UL>
<BR>[Called By]<UL><LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_ssid_wildcard_ok
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_ssid_bss_match
</UL>

<P><STRONG><a name="[8e3]"></a>wpa_scan_results_free</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, scan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>

<P><STRONG><a name="[7ba]"></a>pbkdf2_sha1</STRONG> (Thumb, 86 bytes, Stack size 80 bytes, sha1-pbkdf2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_update_psk
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa_psk
</UL>

<P><STRONG><a name="[86d]"></a>ap_get_authed_sta</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ap_get_authed_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_authed_sta_info
</UL>

<P><STRONG><a name="[b9f]"></a>ap_for_each_sta</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, hostapd_sta_info.o(.text), UNUSED)

<P><STRONG><a name="[73e]"></a>ap_get_sta</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ap_get_sta &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ps_rx
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;michael_mic_failure
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_receive
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_rx_from_unknown
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc_cb
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_eapol
</UL>

<P><STRONG><a name="[8ec]"></a>ap_sta_hash_add</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
</UL>

<P><STRONG><a name="[8ba]"></a>ap_sta_set_authorized</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ap_sta_set_authorized &rArr; hostapd_client_event
</UL>
<BR>[Calls]<UL><LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_client_event
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_set_sta_authorized
</UL>

<P><STRONG><a name="[8e9]"></a>ap_handle_timer</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ap_handle_timer &rArr; ap_free_sta &rArr; hostapd_drv_sta_remove &rArr; tls_wl_if_sta_remove &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_deauth
<LI><a href="#[8ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_get_inact_sec
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_disassociate_indication
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deauthenticate_indication
<LI><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_disassoc
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hostapd_sta_info.o(.text)
</UL>
<P><STRONG><a name="[8c3]"></a>ap_free_sta</STRONG> (Thumb, 446 bytes, Stack size 24 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ap_free_sta &rArr; hostapd_drv_sta_remove &rArr; tls_wl_if_sta_remove &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_deinit
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_clear_pspkt
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_remove
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_free_stas
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
</UL>

<P><STRONG><a name="[8b8]"></a>hostapd_free_stas</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = hostapd_free_stas &rArr; ap_free_sta &rArr; hostapd_drv_sta_remove &rArr; tls_wl_if_sta_remove &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_deauth
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deauthenticate_indication
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_flush_old_stations
</UL>

<P><STRONG><a name="[8bf]"></a>ap_sta_add</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = ap_sta_add &rArr; eloop_register_timeout &rArr; tls_os_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[8ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_hash_add
<LI><a href="#[8e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_clear_pspkt
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_auth
</UL>

<P><STRONG><a name="[8da]"></a>ap_sta_disconnect</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_deauth
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_remove
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deauthenticate_indication
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
</UL>
<BR>[Called By]<UL><LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc_cb
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sta_disconnect
</UL>

<P><STRONG><a name="[8ee]"></a>ieee80211_tkip_countermeasures_deinit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tkip_countermeasures.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ieee80211_tkip_countermeasures_deinit &rArr; eloop_cancel_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_deinit_wpa
</UL>

<P><STRONG><a name="[743]"></a>michael_mic_failure</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tkip_countermeasures.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = michael_mic_failure &rArr; ieee80211_tkip_countermeasures_start &rArr; wpa_gtk_rekey &rArr; wpa_gtk_update &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[8ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_local_mic_failure_report
<LI><a href="#[8f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_michaelmicfailure_indication
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive_error_report
</UL>

<P><STRONG><a name="[8f4]"></a>wpa_eapol_key_send</STRONG> (Thumb, 88 bytes, Stack size 56 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_ether_send
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
<LI><a href="#[8f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_zero_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_4_of_4
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_4
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_key_request
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_2
</UL>

<P><STRONG><a name="[8f8]"></a>wpa_sm_key_request</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = wpa_sm_key_request &rArr; wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_alloc_eapol
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_byte_array
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rekey_ptk
</UL>

<P><STRONG><a name="[8fb]"></a>wpa_supplicant_send_2_of_4</STRONG> (Thumb, 198 bytes, Stack size 80 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = wpa_supplicant_send_2_of_4 &rArr; wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_alloc_eapol
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
</UL>

<P><STRONG><a name="[907]"></a>wpa_supplicant_send_4_of_4</STRONG> (Thumb, 190 bytes, Stack size 80 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = wpa_supplicant_send_4_of_4 &rArr; wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_alloc_eapol
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
</UL>

<P><STRONG><a name="[7a7]"></a>wpa_sm_rx_eapol</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1348<LI>Call Chain = wpa_sm_rx_eapol &rArr; wpa_supplicant_process_3_of_4 &rArr; wpa_supplicant_pairwise_gtk &rArr; wpa_supplicant_key_neg_complete &rArr; eapol_sm_notify_eap_success &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
</UL>

<P><STRONG><a name="[7b0]"></a>wpa_sm_set_assoc_wpa_ie</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wpa_sm_set_assoc_wpa_ie &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_non_wpa_policy
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_associnfo
</UL>

<P><STRONG><a name="[799]"></a>wpa_sm_set_config</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpa_sm_set_config &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_connection
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_clear_wps
</UL>

<P><STRONG><a name="[916]"></a>wpa_sm_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wpa_sm_init &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_wpa
</UL>

<P><STRONG><a name="[7c4]"></a>wpa_sm_deinit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wpa_sm_deinit &rArr; eloop_cancel_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
</UL>

<P><STRONG><a name="[7b7]"></a>wpa_sm_parse_own_wpa_ie</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpa_sm_parse_own_wpa_ie &rArr; wpa_parse_wpa_ie &rArr; wpa_parse_wpa_ie_wpa
</UL>
<BR>[Calls]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
</UL>

<P><STRONG><a name="[7b9]"></a>wpa_sm_set_pmk</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_sm_set_pmk &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
</UL>

<P><STRONG><a name="[7b1]"></a>wpa_sm_set_param</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_sm_set_param
</UL>
<BR>[Called By]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_non_wpa_policy
</UL>

<P><STRONG><a name="[7d6]"></a>wpa_sm_set_own_addr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wpa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_connect_network
</UL>

<P><STRONG><a name="[7ae]"></a>wpa_sm_set_ap_wpa_ie</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wpa_sm_set_ap_wpa_ie &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_non_wpa_policy
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_associnfo
</UL>

<P><STRONG><a name="[7af]"></a>wpa_sm_set_ap_rsn_ie</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wpa_sm_set_ap_rsn_ie &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_non_wpa_policy
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_associnfo
</UL>

<P><STRONG><a name="[7b8]"></a>wpa_sm_set_assoc_wpa_ie_default</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wpa_sm_set_assoc_wpa_ie_default &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gen_wpa_ie
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
</UL>

<P><STRONG><a name="[892]"></a>wpa_sm_notify_assoc</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wpa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>

<P><STRONG><a name="[79f]"></a>wpa_sm_notify_disassoc</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_sm_notify_disassoc
</UL>
<BR>[Calls]<UL><LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_timeout
</UL>

<P><STRONG><a name="[872]"></a>os_snprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, wpa_debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = os_snprintf &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[919]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_start_pin
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wps_get_pin
</UL>

<P><STRONG><a name="[8e0]"></a>wpa_drv_scan</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = wpa_drv_scan &rArr; tls_wl_if_scan &rArr; alloc_scan_req &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_scan
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
</UL>

<P><STRONG><a name="[91a]"></a>wpa_drv_set_freq</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wpa_drv_set_freq &rArr; tls_wl_if_set_freq &rArr; ieee80211_set_freq &rArr; ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_freq
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_associate
<LI><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_freq
</UL>

<P><STRONG><a name="[91b]"></a>wpa_drv_set_auth_alg</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = wpa_drv_set_auth_alg &rArr; tls_wl_if_set_auth
</UL>
<BR>[Calls]<UL><LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_auth
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_associate
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_ap
</UL>

<P><STRONG><a name="[91d]"></a>wpa_drv_set_auth_params</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = wpa_drv_set_auth_params &rArr; tls_wl_if_set_auth
</UL>
<BR>[Calls]<UL><LI><a href="#[91c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_auth
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_associate
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_ap
</UL>

<P><STRONG><a name="[91e]"></a>wpa_drv_set_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpa_drv_set_mode &rArr; tls_wl_if_set_mode &rArr; ieee80211_change_iface &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_associate
</UL>

<P><STRONG><a name="[8ae]"></a>wpa_drv_set_bssid</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_drv_set_bssid &rArr; tls_wl_if_set_bssid
</UL>
<BR>[Calls]<UL><LI><a href="#[91f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_bssid
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_associate
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface
</UL>

<P><STRONG><a name="[732]"></a>wpa_drv_deinit_ap</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wpa_drv_deinit_ap &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_del_beacon
<LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_clear_mode
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_remove_key
</UL>
<BR>[Called By]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ap_destroy
</UL>

<P><STRONG><a name="[7c6]"></a>wpa_drv_cleanup</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wpa_drv_cleanup &rArr; tls_wl_cleanup &rArr; tls_wl_mlme_cleanup &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_clear_mode
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
</UL>

<P><STRONG><a name="[921]"></a>wpa_drv_set_ssid</STRONG> (Thumb, 88 bytes, Stack size 72 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = wpa_drv_set_ssid &rArr; tls_wl_if_set_ssid &rArr; ieee80211_sta_req_auth &rArr; ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_ssid
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_associate
</UL>

<P><STRONG><a name="[7c0]"></a>wpa_drv_associate</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = wpa_drv_associate &rArr; wpa_drv_set_ssid &rArr; tls_wl_if_set_ssid &rArr; ieee80211_sta_req_auth &rArr; ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_channel_check
<LI><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_bssid
<LI><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_ps_mode
<LI><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_adhoc
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_ssid
<LI><a href="#[91e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_mode
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_auth_params
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_auth_alg
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_freq
<LI><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher2drv
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
</UL>

<P><STRONG><a name="[7bc]"></a>wpa_drv_deauthenticate</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = wpa_drv_deauthenticate &rArr; tls_wl_if_sta_flush &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_deauth
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deauthenticate
</UL>

<P><STRONG><a name="[925]"></a>wpa_drv_send_eapol</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = wpa_drv_send_eapol &rArr; tls_wl_if_send_eapol &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_eapol
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_eapol_send
<LI><a href="#[8f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_ether_send
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_hapd_send_eapol
</UL>

<P><STRONG><a name="[79d]"></a>wpa_drv_disassociate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_disassociate
</UL>

<P><STRONG><a name="[796]"></a>wpa_drv_set_key</STRONG> (Thumb, 192 bytes, Stack size 144 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_add_key
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_broadcast_ether_addr
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_set_wep_keys
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_clear_keys
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_key
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_eapol_cb
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_set_wep_key
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_key
</UL>

<P><STRONG><a name="[8a8]"></a>wpa_drv_remove_key</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wpa_drv_remove_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_wif_data
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_remove_key
<LI><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_broadcast_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[7b6]"></a>wpa_parse_wpa_ie</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wpa_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_parse_wpa_ie &rArr; wpa_parse_wpa_ie_wpa
</UL>
<BR>[Calls]<UL><LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_wpa
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
</UL>
<BR>[Called By]<UL><LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_parse_own_wpa_ie
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ssid_bss_match
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_security_workaround
</UL>

<P><STRONG><a name="[917]"></a>wpa_gen_wpa_ie</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, wpa_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wpa_gen_wpa_ie &rArr; wpa_gen_wpa_ie_rsn
</UL>
<BR>[Calls]<UL><LI><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gen_wpa_ie_rsn
<LI><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gen_wpa_ie_wpa
</UL>
<BR>[Called By]<UL><LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie_default
</UL>

<P><STRONG><a name="[8fd]"></a>wpa_supplicant_parse_ies</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, wpa_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = wpa_supplicant_parse_ies &rArr; wpa_parse_generic
</UL>
<BR>[Calls]<UL><LI><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_generic
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
</UL>

<P><STRONG><a name="[88c]"></a>wpabuf_put</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wpabuf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_assoc_req_ie
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie_multi
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process_fragment
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_build_msg
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_zeropad
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_vendor_ie_concat
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_msg_type
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_decrypt_encr_settings
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_ie_encapsulate
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_version
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_resp_type
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_req_type
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_dev_name
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_assoc_resp_ie
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be32
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_msg_alloc
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_os_version
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_device_attrs
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_model_number
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_model_name
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_manufacturer
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_encr_settings
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_conn_type_flags
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildIdentity
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be32
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be24
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_build_expanded_nak
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildNak
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_init
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_derive_shared
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_e_hash
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[88b]"></a>wpabuf_alloc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wpabuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_assoc_req_ie
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc_copy
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie_multi
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process_fragment
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_zeropad
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_probe_req_ie
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_resize
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie_multi
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_vendor_ie_concat
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_nack
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_ack
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_decrypt_encr_settings
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_ie_encapsulate
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_assoc_resp_ie
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_msg_alloc
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_init
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_derive_shared
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_done
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m3
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[8e5]"></a>wpabuf_resize</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, wpabuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wpabuf_resize &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_realloc
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_extra_ies
</UL>

<P><STRONG><a name="[92c]"></a>wpabuf_dup</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wpabuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wpabuf_dup &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
</UL>
<BR>[Called By]<UL><LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_get_msg
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_public_key
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_received
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SEND_RESPONSE_Enter
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
</UL>

<P><STRONG><a name="[7a4]"></a>wpabuf_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wpabuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wpabuf_free &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_assoc_req_ie
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_deinit
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_rx_eapol
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_deinit
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_ssid_wildcard_ok
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_ssid_bss_match
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie_multi
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_build_msg
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_deinit
<LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_scan_result_text
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_zeropad
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_probe_req_ie
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie_multi
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_extra_ies
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_nack
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_ack
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_decrypt_encr_settings
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_keys
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_ie_encapsulate
<LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_get_msg
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_assoc_resp_ie
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_abort
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_BE_RESPONSE_Enter
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_BE_Step
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_deinit
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_public_key
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_NOTIFICATION_Enter
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_received
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SEND_RESPONSE_Enter
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_METHOD_Enter
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_GET_METHOD_Enter
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_init
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_derive_shared
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_done
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m3
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[7a5]"></a>wpabuf_alloc_copy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wpabuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wpabuf_alloc_copy &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
</UL>
<BR>[Called By]<UL><LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_rx_eapol
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
</UL>

<P><STRONG><a name="[92e]"></a>wpabuf_zeropad</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, wpabuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wpabuf_zeropad &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_keys
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_public_key
</UL>

<P><STRONG><a name="[7d5]"></a>wpa_supplicant_init_wpa</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wpas_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wpa_supplicant_init_wpa &rArr; wpa_sm_init &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_init
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_connect_network
</UL>

<P><STRONG><a name="[ba0]"></a>wpa_supplicant_rsn_supp_set_config</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wpas_glue.o(.text), UNUSED)

<P><STRONG><a name="[8f9]"></a>wpa_sm_alloc_eapol</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, wpas_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wpa_sm_alloc_eapol &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_4_of_4
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_4
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_key_request
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_2
</UL>

<P><STRONG><a name="[8ff]"></a>wpa_sm_deauthenticate</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wpas_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1124<LI>Call Chain = wpa_sm_deauthenticate &rArr; wpa_supplicant_deauthenticate &rArr; wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; eapol_sm_notify_portValid &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deauthenticate
</UL>
<BR>[Called By]<UL><LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
</UL>

<P><STRONG><a name="[8f7]"></a>wpa_sm_ether_send</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, wpas_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = wpa_sm_ether_send &rArr; wpa_drv_send_eapol &rArr; tls_wl_if_send_eapol &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_send_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
</UL>

<P><STRONG><a name="[903]"></a>wpa_sm_set_key</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, wpas_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = wpa_sm_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_ptk
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_gtk
</UL>

<P><STRONG><a name="[918]"></a>wpa_sm_disassociate</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wpas_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1124<LI>Call Chain = wpa_sm_disassociate &rArr; wpa_supplicant_disassociate &rArr; wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; eapol_sm_notify_portValid &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_disassociate
</UL>
<BR>[Called By]<UL><LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_report_ie_mismatch
</UL>

<P><STRONG><a name="[901]"></a>wpa_sm_cancel_auth_timeout</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wpas_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = wpa_sm_cancel_auth_timeout &rArr; wpa_supplicant_cancel_auth_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_auth_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
</UL>

<P><STRONG><a name="[911]"></a>wpa_supplicant_get_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpas_glue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_notify_disassoc
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[7da]"></a>wpa_supplicant_init_eapol</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wpas_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1100<LI>Call Chain = wpa_supplicant_init_eapol &rArr; eapol_sm_init &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_init
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_connect_network
</UL>

<P><STRONG><a name="[93c]"></a>is_nil_uuid</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wps_supplicant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_set_uuid
</UL>

<P><STRONG><a name="[92f]"></a>wpas_wps_eapol_cb</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, wps_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1132<LI>Call Chain = wpas_wps_eapol_cb &rArr; wpa_supplicant_deauthenticate &rArr; wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; eapol_sm_notify_portValid &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deauthenticate
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_is_wps_pin_enrollee
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_clear_wps
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_eapol_cb
</UL>

<P><STRONG><a name="[7be]"></a>wpas_wps_get_req_type</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wps_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = wpas_wps_get_req_type &rArr; eap_is_wps_pin_enrollee &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_is_wps_pin_enrollee
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_is_wps_pbc_enrollee
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_extra_ies
</UL>

<P><STRONG><a name="[7db]"></a>wpas_wps_start_pbc</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, wps_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = wpas_wps_start_pbc &rArr; wpas_clear_wps &rArr; eloop_cancel_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_reassoc
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_clear_wps
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_connect_network
</UL>

<P><STRONG><a name="[7dc]"></a>wpas_wps_start_pin</STRONG> (Thumb, 176 bytes, Stack size 160 bytes, wps_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = wpas_wps_start_pin &rArr; wps_generate_pin &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_generate_pin
<LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_snprintf
<LI><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_reassoc
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_clear_wps
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_connect_network
</UL>

<P><STRONG><a name="[93a]"></a>wpas_wps_cancel</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wps_supplicant.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_scan
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deauthenticate
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_clear_wps
</UL>

<P><STRONG><a name="[7d9]"></a>wpas_wps_init</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, wps_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = wpas_wps_init &rArr; wpas_wps_set_uuid &rArr; uuid_gen_mac_addr &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_set_uuid
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_connect_network
</UL>

<P><STRONG><a name="[7c7]"></a>wpas_wps_deinit</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, wps_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wpas_wps_deinit &rArr; eloop_cancel_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
</UL>

<P><STRONG><a name="[8a0]"></a>wpas_wps_ssid_bss_match</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, wps_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = wpas_wps_ssid_bss_match &rArr; wps_is_addr_authorized &rArr; wps_parse_msg &rArr; wps_set_attr &rArr; wps_parse_vendor_ext_wfa
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_is_selected_pbc_registrar
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_is_addr_authorized
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_is_wps_pin_enrollee
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_is_wps_pbc_enrollee
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
</UL>

<P><STRONG><a name="[89f]"></a>wpas_wps_ssid_wildcard_ok</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, wps_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = wpas_wps_ssid_wildcard_ok &rArr; wps_is_addr_authorized &rArr; wps_parse_msg &rArr; wps_set_attr &rArr; wps_parse_vendor_ext_wfa
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_is_selected_pbc_registrar
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_is_addr_authorized
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_is_wps_pin_enrollee
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_is_wps_pbc_enrollee
<LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
</UL>

<P><STRONG><a name="[940]"></a>wpas_wps_scan_result_text</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wps_supplicant.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_attr_text
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_vendor_ie_concat
</UL>

<P><STRONG><a name="[7ca]"></a>wpas_wps_update_config</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, wps_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = wpas_wps_update_config &rArr; wpas_wps_set_uuid &rArr; uuid_gen_mac_addr &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_set_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configs
</UL>

<P><STRONG><a name="[7e6]"></a>eap_peer_wsc_register</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, eap_wsc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = eap_peer_wsc_register &rArr; eap_peer_method_alloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_method_register
<LI><a href="#[953]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_method_free
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_method_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
</UL>

<P><STRONG><a name="[931]"></a>eapol_sm_get_key</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = eapol_sm_get_key &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_key_available
<LI><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_eapKeyData
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_eapol_cb
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_processKey
</UL>

<P><STRONG><a name="[960]"></a>eapol_sm_notify_lower_layer_success</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = eapol_sm_notify_lower_layer_success &rArr;  eapol_sm_step (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_notify_lower_layer_success
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step
</UL>
<BR>[Called By]<UL><LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_processKey
</UL>

<P><STRONG><a name="[954]"></a>eapol_sm_step</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step
<LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_KEY_RX_KEY_RECEIVE_Enter
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_PAE_Step
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_BE_Step
</UL>
<BR>[Called By]<UL><LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_rx_eapol
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_portValid
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_portEnabled
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_portControl
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_eap_success
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_eap_fail
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_init
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_cached
<LI><a href="#[976]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_logoff
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_lower_layer_success
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_pending
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_port_timers_tick
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step_timeout
</UL>

<P><STRONG><a name="[ba1]"></a>eapol_sm_configure</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, eapol_supp_sm.o(.text), UNUSED)

<P><STRONG><a name="[970]"></a>eapol_sm_get_method_name</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[971]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_get_method_name
</UL>

<P><STRONG><a name="[7a6]"></a>eapol_sm_rx_eapol</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1092<LI>Call Chain = eapol_sm_rx_eapol &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc_copy
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_set_port_unauthorized
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_enable_timer_tick
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
</UL>

<P><STRONG><a name="[ba2]"></a>eapol_sm_notify_tx_eapol_key</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text), UNUSED)

<P><STRONG><a name="[7d7]"></a>eapol_sm_notify_portEnabled</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = eapol_sm_notify_portEnabled &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step
</UL>
<BR>[Called By]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_mark_disassoc
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_connect_network
</UL>

<P><STRONG><a name="[7d8]"></a>eapol_sm_notify_portValid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = eapol_sm_notify_portValid &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step
</UL>
<BR>[Called By]<UL><LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_mark_disassoc
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_connect_network
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
</UL>

<P><STRONG><a name="[893]"></a>eapol_sm_notify_eap_success</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068<LI>Call Chain = eapol_sm_notify_eap_success &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_notify_success
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_config
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
</UL>

<P><STRONG><a name="[8a2]"></a>eapol_sm_notify_eap_fail</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = eapol_sm_notify_eap_fail &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_config
</UL>

<P><STRONG><a name="[79a]"></a>eapol_sm_notify_config</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eapol_sm_notify_config
</UL>
<BR>[Calls]<UL><LI><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_set_workaround
<LI><a href="#[975]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_set_force_disabled
<LI><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_set_fast_reauth
</UL>
<BR>[Called By]<UL><LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_clear_connection
<LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_config
<LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_clear_wps
</UL>

<P><STRONG><a name="[976]"></a>eapol_sm_notify_logoff</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step
</UL>

<P><STRONG><a name="[977]"></a>eapol_sm_notify_cached</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, eapol_supp_sm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[972]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_notify_success
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_set_port_authorized
</UL>

<P><STRONG><a name="[ba3]"></a>eapol_sm_notify_pmkid_attempt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text), UNUSED)

<P><STRONG><a name="[978]"></a>eapol_sm_register_scard_ctx</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[979]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_register_scard_ctx
</UL>

<P><STRONG><a name="[8a3]"></a>eapol_sm_notify_portControl</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = eapol_sm_notify_portControl &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step
</UL>
<BR>[Called By]<UL><LI><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_config
</UL>

<P><STRONG><a name="[97a]"></a>eapol_sm_request_reauth</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_txStart
</UL>

<P><STRONG><a name="[97b]"></a>eapol_sm_invalidate_cached_session</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_invalidate_cached_session
</UL>

<P><STRONG><a name="[932]"></a>eapol_sm_init</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1084<LI>Call Chain = eapol_sm_init &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_init
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_eapol
</UL>

<P><STRONG><a name="[7c3]"></a>eapol_sm_deinit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = eapol_sm_deinit &rArr; eloop_cancel_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
</UL>

<P><STRONG><a name="[945]"></a>wps_init</STRONG> (Thumb, 272 bytes, Stack size 504 bytes, wps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = wps_init &rArr; os_strdup &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strdup
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zalloc
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_init
</UL>

<P><STRONG><a name="[947]"></a>wps_deinit</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, wps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wps_deinit &rArr; wps_device_data_free &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[981]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_device_data_free
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh5_free
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_deinit
</UL>

<P><STRONG><a name="[94f]"></a>wps_process_msg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4280<LI>Call Chain = wps_process_msg &rArr; wps_enrollee_process_msg &rArr; wps_process_wsc_msg &rArr; wps_process_m2 &rArr; wps_derive_keys &rArr; dh5_derive_shared &rArr; dh_derive_shared &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; tls_crypto_exptmod &rArr; mp_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_process_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process
</UL>

<P><STRONG><a name="[950]"></a>wps_get_msg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3072<LI>Call Chain = wps_get_msg &rArr; wps_enrollee_get_msg &rArr; wps_build_m1 &rArr; wps_build_public_key &rArr; dh5_init &rArr; dh_init &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; tls_crypto_exptmod &rArr; mp_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_get_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process
</UL>

<P><STRONG><a name="[93e]"></a>wps_is_selected_pbc_registrar</STRONG> (Thumb, 44 bytes, Stack size 496 bytes, wps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = wps_is_selected_pbc_registrar &rArr; wps_parse_msg &rArr; wps_set_attr &rArr; wps_parse_vendor_ext_wfa
</UL>
<BR>[Calls]<UL><LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_ssid_wildcard_ok
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_ssid_bss_match
</UL>

<P><STRONG><a name="[985]"></a>wps_is_selected_pin_registrar</STRONG> (Thumb, 26 bytes, Stack size 496 bytes, wps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_selected_pin_registrar
</UL>

<P><STRONG><a name="[93f]"></a>wps_is_addr_authorized</STRONG> (Thumb, 100 bytes, Stack size 520 bytes, wps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = wps_is_addr_authorized &rArr; wps_parse_msg &rArr; wps_set_attr &rArr; wps_parse_vendor_ext_wfa
</UL>
<BR>[Calls]<UL><LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[986]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_selected_pin_registrar
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_ssid_wildcard_ok
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_ssid_bss_match
</UL>

<P><STRONG><a name="[987]"></a>wps_ap_priority_compar</STRONG> (Thumb, 84 bytes, Stack size 1000 bytes, wps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
</UL>

<P><STRONG><a name="[988]"></a>wps_get_uuid_e</STRONG> (Thumb, 22 bytes, Stack size 496 bytes, wps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
</UL>

<P><STRONG><a name="[989]"></a>wps_is_20</STRONG> (Thumb, 30 bytes, Stack size 496 bytes, wps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
</UL>

<P><STRONG><a name="[7bf]"></a>wps_build_assoc_req_ie</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, wps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wps_build_assoc_req_ie &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wfa_ext
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_version
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_req_type
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be32
</UL>
<BR>[Called By]<UL><LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
</UL>

<P><STRONG><a name="[98e]"></a>wps_build_assoc_resp_ie</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, wps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wfa_ext
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_version
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_resp_type
<LI><a href="#[98a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be32
</UL>

<P><STRONG><a name="[8e4]"></a>wps_build_probe_req_ie</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, wps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wps_build_probe_req_ie &rArr; wps_ie_encapsulate &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_ie_encapsulate
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_version
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_uuid_e
<LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_secondary_dev_type
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_rf_bands
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_req_type
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_req_dev_type
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_primary_dev_type
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_dev_password_id
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_dev_name
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_config_methods
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_config_error
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_assoc_state
</UL>
<BR>[Called By]<UL><LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_extra_ies
</UL>

<P><STRONG><a name="[941]"></a>wps_attr_text</STRONG> (Thumb, 24 bytes, Stack size 496 bytes, wps.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[940]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_scan_result_text
</UL>

<P><STRONG><a name="[99b]"></a>wps_kdf</STRONG> (Thumb, 164 bytes, Stack size 104 bytes, wps_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 780<LI>Call Chain = wps_kdf &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_keys
</UL>

<P><STRONG><a name="[99c]"></a>wps_derive_keys</STRONG> (Thumb, 222 bytes, Stack size 200 bytes, wps_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3224<LI>Call Chain = wps_derive_keys &rArr; dh5_derive_shared &rArr; dh_derive_shared &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; tls_crypto_exptmod &rArr; mp_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_vector
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_zeropad
<LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh5_derive_shared
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_kdf
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh5_free
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
</UL>

<P><STRONG><a name="[99e]"></a>wps_derive_psk</STRONG> (Thumb, 78 bytes, Stack size 64 bytes, wps_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 772<LI>Call Chain = wps_derive_psk &rArr; hmac_sha256 &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m3
</UL>

<P><STRONG><a name="[99f]"></a>wps_decrypt_encr_settings</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, wps_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = wps_decrypt_encr_settings &rArr; aes_128_cbc_decrypt &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_cbc_decrypt
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
</UL>

<P><STRONG><a name="[9a2]"></a>wps_pin_checksum</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, wps_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_generate_pin
<LI><a href="#[9a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_pin_valid
</UL>

<P><STRONG><a name="[9a1]"></a>wps_pin_valid</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wps_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_pin_checksum
</UL>

<P><STRONG><a name="[871]"></a>wps_generate_pin</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, wps_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = wps_generate_pin &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[9a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_pin_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_start_pin
<LI><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wps_get_pin
</UL>

<P><STRONG><a name="[9a3]"></a>wps_fail_event</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, wps_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wps_fail_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_nack
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
</UL>

<P><STRONG><a name="[ac6]"></a>wps_success_event</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wps_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_ack
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_done
</UL>

<P><STRONG><a name="[9a4]"></a>wps_pwd_auth_fail_event</STRONG> (Thumb, 44 bytes, Stack size 72 bytes, wps_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wps_pwd_auth_fail_event
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce2
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce1
</UL>

<P><STRONG><a name="[9a5]"></a>wps_dev_type_str2bin</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, wps_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2bin
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[ba4]"></a>wps_dev_type_bin2str</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wps_common.o(.text), UNUSED)

<P><STRONG><a name="[93d]"></a>uuid_gen_mac_addr</STRONG> (Thumb, 84 bytes, Stack size 64 bytes, wps_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = uuid_gen_mac_addr &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_vector
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_set_uuid
</UL>

<P><STRONG><a name="[9a6]"></a>wps_config_methods_str2bin</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, wps_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>

<P><STRONG><a name="[9a7]"></a>wps_build_wsc_ack</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wps_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wps_build_wsc_ack &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_registrar_nonce
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_msg_type
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_enrollee_nonce
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wfa_ext
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_version
</UL>
<BR>[Called By]<UL><LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_get_msg
</UL>

<P><STRONG><a name="[9ab]"></a>wps_build_wsc_nack</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, wps_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wps_build_wsc_nack &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_registrar_nonce
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_msg_type
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_enrollee_nonce
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wfa_ext
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_version
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_config_error
</UL>
<BR>[Called By]<UL><LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_get_msg
</UL>

<P><STRONG><a name="[9ac]"></a>ieee80211_bss_put</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ieee80211_bss_put &rArr; kref_put &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_put
</UL>
<BR>[Called By]<UL><LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_config_auth
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
</UL>

<P><STRONG><a name="[9ae]"></a>ieee80211_bss_del</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ieee80211_bss_del &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_put
</UL>
<BR>[Called By]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_flush
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_flush_by_age
</UL>

<P><STRONG><a name="[81a]"></a>ieee80211_bss_flush</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ieee80211_bss_flush &rArr; ieee80211_bss_del &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_del
</UL>
<BR>[Called By]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_scan_res
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_start_scan
</UL>

<P><STRONG><a name="[9af]"></a>ieee80211_bss_flush_by_age</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ieee80211_bss_flush_by_age &rArr; ieee80211_bss_del &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_del
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_bss_mgmt_task
</UL>

<P><STRONG><a name="[9b0]"></a>ieee80211_bss_timeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ieee80211_bss_timeout &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_wl_bss.o(.text)
</UL>
<P><STRONG><a name="[7f1]"></a>ieee80211_bss_list_init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ieee80211_bss_list_init &rArr; tls_os_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
</UL>

<P><STRONG><a name="[9b1]"></a>ieee80211_bss_add</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ieee80211_bss_add &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
</UL>

<P><STRONG><a name="[9b2]"></a>ieee80211_bss_get</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ieee80211_bss_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_get
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
</UL>

<P><STRONG><a name="[9b4]"></a>ieee80211_bss_info_update</STRONG> (Thumb, 1062 bytes, Stack size 64 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = ieee80211_bss_info_update &rArr; wpa_update_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_put
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_init
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_get
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_get
<LI><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_add
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_bss_info
</UL>

<P><STRONG><a name="[ba5]"></a>find_ie</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tls_wl_bss.o(.text), UNUSED)

<P><STRONG><a name="[9b6]"></a>ieee80211_get_match_bss</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ieee80211_get_match_bss &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_get
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_config_auth
</UL>

<P><STRONG><a name="[130]"></a>tls_wl_bss_mgmt_task</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tls_wl_bss_mgmt_task &rArr; ieee80211_bss_flush_by_age &rArr; ieee80211_bss_del &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_flush_by_age
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_wl_core.o(.text)
</UL>
<P><STRONG><a name="[84f]"></a>mic_block</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tls_wl_key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx_michael_mic_add
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_michael_mic_verify
</UL>

<P><STRONG><a name="[9b7]"></a>ieee80211_wep_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tls_wl_key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>

<P><STRONG><a name="[9b8]"></a>ieee80211_key_alloc</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, tls_wl_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ieee80211_key_alloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_add_key
</UL>

<P><STRONG><a name="[9b9]"></a>ieee80211_key_link</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tls_wl_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ieee80211_key_link &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_set_key
<LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_key_destroy
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_key_replace
</UL>
<BR>[Called By]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_add_key
</UL>

<P><STRONG><a name="[9bc]"></a>ieee80211_key_free</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tls_wl_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_key_free
</UL>
<BR>[Called By]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_free
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_del_key
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_add_key
</UL>

<P><STRONG><a name="[834]"></a>ieee80211_add_key</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tls_wl_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ieee80211_add_key &rArr; ieee80211_key_link &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_free
<LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_link
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_add_key
</UL>

<P><STRONG><a name="[832]"></a>ieee80211_del_key</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tls_wl_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_free
</UL>
<BR>[Called By]<UL><LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_remove_key
</UL>

<P><STRONG><a name="[9be]"></a>ieee80211_free_keys</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tls_wl_key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_key_free
</UL>

<P><STRONG><a name="[9bf]"></a>tls_wl_get_mgmt_txbuf</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>
<BR>[Called By]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt_by_rate
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_deauth_disassoc
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_delba
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_addba_resp
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_pspoll
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_nullfunc
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_rsp
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_auth
</UL>

<P><STRONG><a name="[875]"></a>ieee80211_send_probe_req</STRONG> (Thumb, 458 bytes, Stack size 96 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ieee80211_send_probe_req &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_scan_task
<LI><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_oneshotdata
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
</UL>

<P><STRONG><a name="[9c2]"></a>ieee80211_send_auth</STRONG> (Thumb, 370 bytes, Stack size 72 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ieee80211_send_auth &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_auth
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_authenticate
</UL>

<P><STRONG><a name="[9c4]"></a>ieee80211_bss_get_ie</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ieee80211_bss_get_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
</UL>

<P><STRONG><a name="[9c3]"></a>ieee80211_send_assoc</STRONG> (Thumb, 874 bytes, Stack size 80 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ieee80211_send_assoc &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_get_ie
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_get
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_put
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associate
</UL>

<P><STRONG><a name="[9c5]"></a>ieee80211_send_probe_rsp</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, tls_wl_mgmt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[81d]"></a>ieee80211_send_deauth_disassoc</STRONG> (Thumb, 242 bytes, Stack size 72 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ieee80211_send_deauth_disassoc &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_ssid
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_disassoc
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_deauth
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
</UL>

<P><STRONG><a name="[9c6]"></a>ieee80211_send_nullfunc</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ieee80211_send_nullfunc &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
</UL>

<P><STRONG><a name="[9c7]"></a>ieee80211_send_pspoll</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ieee80211_send_pspoll &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
</UL>

<P><STRONG><a name="[823]"></a>ieee80211_send_mgmt</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ieee80211_send_mgmt &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hdrlen
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_mlme
</UL>

<P><STRONG><a name="[878]"></a>ieee80211_send_mgmt_by_rate</STRONG> (Thumb, 154 bytes, Stack size 72 bytes, tls_wl_mgmt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hdrlen
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd4power
<LI><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_enable_tx_mgmt_frm
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_mgmt
</UL>

<P><STRONG><a name="[83d]"></a>ieee80211_set_disassoc</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_reset_erp_info
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_change_notify
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hw_config
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_flush
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_deauth_disassoc
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_send_apinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_disconnect
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_req_auth
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_deauth
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
</UL>

<P><STRONG><a name="[9cb]"></a>ieee80211_ht_cap_ie_to_sta_ht_cap</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ieee80211_ht_cap_ie_to_sta_ht_cap
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
</UL>

<P><STRONG><a name="[9d1]"></a>ieee80211_sta_rx_notify</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ieee80211_sta_rx_notify &rArr; tls_os_timer_change &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
</UL>
<BR>[Called By]<UL><LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
</UL>

<P><STRONG><a name="[9d7]"></a>disable_rd</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = disable_rd &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_free
</UL>

<P><STRONG><a name="[9d8]"></a>ieee80211_send_delba</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_set_tx_rate_and_power
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_stop_tx_ba_cb
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_stop_rx_ba_session
</UL>

<P><STRONG><a name="[9d9]"></a>__ieee80211_stop_rx_ba_session</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = __ieee80211_stop_rx_ba_session &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_delba
</UL>
<BR>[Called By]<UL><LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_process_delba
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_tear_down_BA_sessions
</UL>

<P><STRONG><a name="[9da]"></a>ieee80211_stop_tx_ba_cb</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_delba
</UL>
<BR>[Called By]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___ieee80211_stop_tx_ba_session
</UL>

<P><STRONG><a name="[9db]"></a>___ieee80211_stop_tx_ba_session</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_stop_tx_ba_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_process_delba
<LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_stop_tx_ba_session
</UL>

<P><STRONG><a name="[9dc]"></a>__ieee80211_stop_tx_ba_session</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___ieee80211_stop_tx_ba_session
</UL>
<BR>[Called By]<UL><LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_tear_down_BA_sessions
</UL>

<P><STRONG><a name="[9dd]"></a>ieee80211_sta_tear_down_BA_sessions</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_stop_tx_ba_session
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_stop_rx_ba_session
</UL>
<BR>[Called By]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_free
</UL>

<P><STRONG><a name="[9de]"></a>ieee80211_enable_ht</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ieee80211_enable_ht &rArr; ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hw_config
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_channel_to_frequency
</UL>
<BR>[Called By]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
</UL>

<P><STRONG><a name="[ba6]"></a>ieee80211_stop_tx_ba_session</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tls_wl_mlme.o(.text), UNUSED)

<P><STRONG><a name="[9e0]"></a>ieee80211_process_addba_request</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ieee80211_process_addba_request &rArr; ieee80211_send_addba_resp &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_addba_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_action
</UL>

<P><STRONG><a name="[ba7]"></a>ieee80211_process_addba_resp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, tls_wl_mlme.o(.text), UNUSED)

<P><STRONG><a name="[9e1]"></a>ieee80211_process_delba</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ieee80211_process_delba &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___ieee80211_stop_tx_ba_session
<LI><a href="#[9d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_stop_rx_ba_session
</UL>
<BR>[Called By]<UL><LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_action
</UL>

<P><STRONG><a name="[9e2]"></a>ieee80211_process_chanswitch</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ieee80211_process_chanswitch &rArr; ieee80211_get_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_channel_to_frequency
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_action
</UL>

<P><STRONG><a name="[9eb]"></a>ieee80211_sta_rx_mgmt</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ieee80211_sta_rx_mgmt &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
</UL>

<P><STRONG><a name="[82e]"></a>ieee80211_sta_req_auth</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ieee80211_sta_req_auth &rArr; ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_ssid
</UL>

<P><STRONG><a name="[9ed]"></a>ieee80211_sta_commit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_set_ssid
</UL>

<P><STRONG><a name="[82d]"></a>ieee80211_sta_set_ssid</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ieee80211_sta_set_ssid &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_commit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_ssid
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_config_auth
</UL>

<P><STRONG><a name="[9ee]"></a>ieee80211_sta_config_auth</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ieee80211_sta_config_auth &rArr; alloc_scan_req &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[9ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_reset_tsf
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_set_ssid
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_freq
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_request_scan
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_scan_req
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_match_bss
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_put
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_task
</UL>

<P><STRONG><a name="[9f0]"></a>ieee80211_sta_timer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ieee80211_sta_timer &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_wl_mlme.o(.text)
</UL>
<P><STRONG><a name="[7ee]"></a>tls_wl_mlme_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tls_wl_mlme_init &rArr; tls_os_timer_create &rArr; xTimerCreateExt &rArr; prvCheckForValidListAndQueue &rArr; xQueueCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
</UL>

<P><STRONG><a name="[12e]"></a>tls_wl_mlme_task</STRONG> (Thumb, 204 bytes, Stack size 0 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = tls_wl_mlme_task &rArr; ieee80211_sta_rx_queued_mgmt &rArr; ieee80211_rx_mgmt_assoc_resp &rArr; ieee80211_associated &rArr; ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_config_auth
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_authenticate
<LI><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_and_clear_bit
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associate
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_wl_core.o(.text)
</UL>
<P><STRONG><a name="[802]"></a>tls_wl_mlme_cleanup</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = tls_wl_mlme_cleanup &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_cleanup
</UL>

<P><STRONG><a name="[840]"></a>tls_wl_delay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tls_wl_phy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_read
</UL>

<P><STRONG><a name="[805]"></a>tls_wl_bbp_init</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, tls_wl_phy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = tls_wl_bbp_init &rArr; tls_get_tx_iq_phase &rArr; tls_ft_param_get &rArr; tls_fls_read &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_iq_phase
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_tx_iq_gain
</UL>
<BR>[Called By]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_init
</UL>

<P><STRONG><a name="[9fa]"></a>rate_supported</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tls_wl_rc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_control_send_low
</UL>

<P><STRONG><a name="[809]"></a>hw_set_tx_rate_and_power</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hw_set_tx_rate_and_power
</UL>
<BR>[Called By]<UL><LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_bss_info_changed
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_delba
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_addba_resp
<LI><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd
</UL>

<P><STRONG><a name="[85a]"></a>hw_set_tx_rate_and_power2</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tls_wl_rc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_data
<LI><a href="#[9c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_mac_txbd4power
</UL>

<P><STRONG><a name="[7ec]"></a>rc_get_rate_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tls_wl_rc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_rate_mode
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init_ifdata
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_max_rate
</UL>

<P><STRONG><a name="[839]"></a>ieee80211_rate_control_init</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ieee80211_rate_control_init &rArr; rc_init &rArr; rc_wl_select_max_rate &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_add
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
</UL>

<P><STRONG><a name="[9f9]"></a>rate_control_send_low</STRONG> (Thumb, 128 bytes, Stack size 28 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[9fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_supported
</UL>
<BR>[Called By]<UL><LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_set_rate
</UL>

<P><STRONG><a name="[84b]"></a>ieee80211_set_rate</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_set_rate
</UL>
<BR>[Called By]<UL><LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx_rate_ctrl
</UL>

<P><STRONG><a name="[806]"></a>tls_wl_rc_init</STRONG> (Thumb, 352 bytes, Stack size 20 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tls_wl_rc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_init
</UL>

<P><STRONG><a name="[7f3]"></a>tls_wl_rx_init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tls_wl_rx_init
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mem_reinit
</UL>

<P><STRONG><a name="[9ea]"></a>tls_wl_free_rxbuf</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = tls_wl_free_rxbuf &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_defragment
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_reassemble_find
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
</UL>

<P><STRONG><a name="[9fe]"></a>ieee80211_rx_defragment</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, tls_wl_rx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hdrlen
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_reassemble_find
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_free_rxbuf
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[a07]"></a>ieee80211_deliver_frame</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = ieee80211_deliver_frame &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_xmit
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_bssid
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_h_amsdu
</UL>

<P><STRONG><a name="[12f]"></a>tls_wl_rx_task</STRONG> (Thumb, 640 bytes, Stack size 16 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = tls_wl_rx_task &rArr; ieee80211_rx_mgmt_handle &rArr; ieee80211_bss_info_update &rArr; wpa_update_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_mgmt_filter
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_pspoll
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_data
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_mgmt
<LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_has_a4
<LI><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atomic_sub_return
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_check_frame
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_for_handlers
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_free_rxbuf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_wl_core.o(.text)
</UL>
<P><STRONG><a name="[82a]"></a>alloc_scan_req</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, tls_wl_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = alloc_scan_req &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_frequency_to_channel
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_scan
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_config_auth
</UL>

<P><STRONG><a name="[a17]"></a>ieee80211_start_scan</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tls_wl_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ieee80211_start_scan &rArr; ieee80211_bss_flush &rArr; ieee80211_bss_del &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
<LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_request_scan
</UL>

<P><STRONG><a name="[a18]"></a>ieee80211_scan_completed</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tls_wl_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ieee80211_scan_completed &rArr; ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hw_config
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_scan_task
</UL>

<P><STRONG><a name="[82b]"></a>ieee80211_request_scan</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tls_wl_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ieee80211_request_scan &rArr; ieee80211_start_scan &rArr; ieee80211_bss_flush &rArr; ieee80211_bss_del &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[a17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_start_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_scan
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_config_auth
</UL>

<P><STRONG><a name="[12d]"></a>tls_wl_scan_task</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, tls_wl_scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = tls_wl_scan_task &rArr; ieee80211_send_probe_req &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hw_config
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
<LI><a href="#[a18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_scan_completed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_wl_core.o(.text)
</UL>
<P><STRONG><a name="[81f]"></a>sta_info_get</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tls_wl_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sta_info_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_get
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_sta_flags
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_inact_sec
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_remove
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_add_key
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_remove_key
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_deliver_frame
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_action
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_probe_resp
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
</UL>

<P><STRONG><a name="[821]"></a>sta_info_put</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tls_wl_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sta_info_put &rArr; kref_put &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_put
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_sta_flags
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_inact_sec
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_remove
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_add
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_add_key
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_remove_key
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_deliver_frame
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_action
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_probe_resp
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
</UL>

<P><STRONG><a name="[838]"></a>sta_info_add_with_mode</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tls_wl_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = sta_info_add_with_mode &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_init
<LI><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_get
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_add
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
</UL>

<P><STRONG><a name="[83b]"></a>sta_info_free</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, tls_wl_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_del_key
<LI><a href="#[9dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_tear_down_BA_sessions
<LI><a href="#[9d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_rd
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_free
<LI><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kref_put
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_flush
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_remove
</UL>

<P><STRONG><a name="[81b]"></a>sta_info_flush</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, tls_wl_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_flush
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
</UL>

<P><STRONG><a name="[7f0]"></a>sta_info_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tls_wl_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sta_info_init &rArr; tls_os_sem_create &rArr; xQueueCreateCountingSemaphore &rArr; xQueueCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_create
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
</UL>

<P><STRONG><a name="[ba8]"></a>kref_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tls_wl_util.o(.text), UNUSED)

<P><STRONG><a name="[9b5]"></a>kref_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tls_wl_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_add_with_mode
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
</UL>

<P><STRONG><a name="[9b3]"></a>kref_get</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tls_wl_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = kref_get &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_add_with_mode
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_match_bss
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_get
</UL>

<P><STRONG><a name="[9ad]"></a>kref_put</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tls_wl_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = kref_put &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_free
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
<LI><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_del
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_put
</UL>

<P><STRONG><a name="[ba9]"></a>ieee80211_sta_get_rates</STRONG> (Thumb, 100 bytes, Stack size 28 bytes, tls_wl_util.o(.text), UNUSED)

<P><STRONG><a name="[857]"></a>ieee80211_get_bssid</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, tls_wl_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ieee80211_get_bssid
</UL>
<BR>[Calls]<UL><LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_data
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_ctl
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_has_a4
</UL>
<BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_deliver_frame
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_michael_mic_verify
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_for_handlers
</UL>

<P><STRONG><a name="[7c9]"></a>ieee80211_channel_to_frequency</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tls_wl_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_default_configs
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configs
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_process_chanswitch
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_enable_ht
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_probe_resp
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_bss_info
</UL>

<P><STRONG><a name="[746]"></a>ieee80211_frequency_to_channel</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tls_wl_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_current_bss
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_channel_check
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_data
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_scan_req
</UL>

<P><STRONG><a name="[9d3]"></a>ieee80211_get_channel</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, tls_wl_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ieee80211_get_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_freq
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_process_chanswitch
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_probe_resp
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_bss_info
</UL>

<P><STRONG><a name="[9d5]"></a>ieee802_11_parse_elems</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, tls_wl_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ieee802_11_parse_elems
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_auth
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_probe_resp
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
</UL>

<P><STRONG><a name="[830]"></a>ieee80211_set_freq</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tls_wl_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ieee80211_set_freq &rArr; ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hw_config
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_freq
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_config_auth
</UL>

<P><STRONG><a name="[859]"></a>ieee80211_hdrlen</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tls_wl_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ieee80211_hdrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[a19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_data
<LI><a href="#[a1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_ctl
<LI><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_has_a4
</UL>
<BR>[Called By]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt_by_rate
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_data
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_defragment
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_data_to_8023
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_check_frame
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_h_amsdu
</UL>

<P><STRONG><a name="[a1c]"></a>ieee80211_ssid_txt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tls_wl_util.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[808]"></a>ieee80211_beacon_get</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tls_wl_util.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ieee80211_beacon_get &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_bss_info_changed
</UL>

<P><STRONG><a name="[72a]"></a>ieee80211_get_tim_ie</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tls_wl_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_clear_multicast_ps_bit
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ps_rx
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_beacon_done
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_clear_unicast_ps_bit
</UL>

<P><STRONG><a name="[747]"></a>ieee80211_get_ds_ie</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tls_wl_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_channel_check
</UL>

<P><STRONG><a name="[a1d]"></a>IQ_mismatch_power_cal</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, tls_rf_tx_iq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = IQ_mismatch_power_cal &rArr; rf_data_sample_correlation_cal &rArr; read_IQ_data
</UL>
<BR>[Calls]<UL><LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_correlation_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_correlation_method
</UL>

<P><STRONG><a name="[a1f]"></a>IQ_mismatch_correlation_method</STRONG> (Thumb, 1438 bytes, Stack size 128 bytes, tls_rf_tx_iq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = IQ_mismatch_correlation_method &rArr; IQ_mismatch_power_cal &rArr; rf_data_sample_correlation_cal &rArr; read_IQ_data
</UL>
<BR>[Calls]<UL><LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_power_cal
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Mismatch_method
</UL>

<P><STRONG><a name="[a21]"></a>IQ_mismatch_phase_adjust_fft</STRONG> (Thumb, 1608 bytes, Stack size 128 bytes, tls_rf_tx_iq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = IQ_mismatch_phase_adjust_fft &rArr; rf_data_sample_fft_cal_t &rArr; fft &rArr; fftr2_dit_new
</UL>
<BR>[Calls]<UL><LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_fft_cal_t
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_fft_cal
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Mismatch_method
</UL>

<P><STRONG><a name="[a24]"></a>IQ_Mismatch_method</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, tls_rf_tx_iq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = IQ_Mismatch_method &rArr; IQ_mismatch_correlation_method &rArr; IQ_mismatch_power_cal &rArr; rf_data_sample_correlation_cal &rArr; read_IQ_data
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_IQ_data
<LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_phase_adjust_fft
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_correlation_method
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_iqmismatch
</UL>

<P><STRONG><a name="[842]"></a>tx_iqmismatch</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tls_rf_tx_iq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = tx_iqmismatch &rArr; IQ_Mismatch_method &rArr; IQ_mismatch_correlation_method &rArr; IQ_mismatch_power_cal &rArr; rf_data_sample_correlation_cal &rArr; read_IQ_data
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Mismatch_method
</UL>
<BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
</UL>

<P><STRONG><a name="[a25]"></a>prepare_IQ_data</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, tx_lo_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prepare_IQ_data
</UL>
<BR>[Called By]<UL><LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Mismatch_method
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_func_method
</UL>

<P><STRONG><a name="[baa]"></a>prepare_IQ_data_fft</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tx_lo_cal.o(.text), UNUSED)

<P><STRONG><a name="[a26]"></a>data_acquire_once</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tx_lo_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = data_acquire_once
</UL>
<BR>[Calls]<UL><LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_fft_cal_t
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_fft_cal
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_correlation_cal
</UL>

<P><STRONG><a name="[a27]"></a>read_IQ_data</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, tx_lo_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_IQ_data
</UL>
<BR>[Called By]<UL><LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_fft_cal_t
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_fft_cal
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_correlation_cal
</UL>

<P><STRONG><a name="[a22]"></a>rf_data_sample_fft_cal</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tx_lo_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rf_data_sample_fft_cal &rArr; fft &rArr; fftr2_dit_new
</UL>
<BR>[Calls]<UL><LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_IQ_data
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_acquire_once
</UL>
<BR>[Called By]<UL><LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_phase_adjust_fft
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_fft
</UL>

<P><STRONG><a name="[a23]"></a>rf_data_sample_fft_cal_t</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tx_lo_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rf_data_sample_fft_cal_t &rArr; fft &rArr; fftr2_dit_new
</UL>
<BR>[Calls]<UL><LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
<LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_IQ_data
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_acquire_once
</UL>
<BR>[Called By]<UL><LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_phase_adjust_fft
</UL>

<P><STRONG><a name="[a1e]"></a>rf_data_sample_correlation_cal</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, tx_lo_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rf_data_sample_correlation_cal &rArr; read_IQ_data
</UL>
<BR>[Calls]<UL><LI><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_IQ_data
<LI><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_acquire_once
</UL>
<BR>[Called By]<UL><LI><a href="#[a1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_power_cal
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_Leakage_correlation
</UL>

<P><STRONG><a name="[a29]"></a>LO_Leakage_correlation</STRONG> (Thumb, 1792 bytes, Stack size 88 bytes, tx_lo_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LO_Leakage_correlation &rArr; rf_data_sample_correlation_cal &rArr; read_IQ_data
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
<LI><a href="#[a1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_correlation_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_func_method
</UL>

<P><STRONG><a name="[a2a]"></a>LO_leakage_fft</STRONG> (Thumb, 1550 bytes, Stack size 72 bytes, tx_lo_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LO_leakage_fft &rArr; rf_data_sample_fft_cal &rArr; fft &rArr; fftr2_dit_new
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_fft_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_func_method
</UL>

<P><STRONG><a name="[a2b]"></a>LO_leakage_func_method</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, tx_lo_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = LO_leakage_func_method &rArr; LO_Leakage_correlation &rArr; rf_data_sample_correlation_cal &rArr; read_IQ_data
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_spi_write
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_IQ_data
<LI><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_fft
<LI><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_Leakage_correlation
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_loleakage_cal
</UL>

<P><STRONG><a name="[841]"></a>rf_loleakage_cal</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, tx_lo_cal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = rf_loleakage_cal &rArr; LO_leakage_func_method &rArr; LO_Leakage_correlation &rArr; rf_data_sample_correlation_cal &rArr; read_IQ_data
</UL>
<BR>[Calls]<UL><LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_func_method
</UL>
<BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
</UL>

<P><STRONG><a name="[a2c]"></a>aes_128_cbc_encrypt</STRONG> (Thumb, 118 bytes, Stack size 816 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = aes_128_cbc_encrypt &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_aes_encrypt_decrypt
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_aes_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_encr_settings
</UL>

<P><STRONG><a name="[9a0]"></a>aes_128_cbc_decrypt</STRONG> (Thumb, 112 bytes, Stack size 816 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = aes_128_cbc_decrypt &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_aes_encrypt_decrypt
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_aes_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_decrypt_encr_settings
</UL>

<P><STRONG><a name="[90e]"></a>aes_unwrap</STRONG> (Thumb, 180 bytes, Stack size 840 bytes, aes_unwrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = aes_unwrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_aes_encrypt_decrypt
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_aes_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
</UL>

<P><STRONG><a name="[a2d]"></a>mlme_deletekeys_request</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ap_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = mlme_deletekeys_request &rArr; wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_remove_ptk
</UL>
<BR>[Called By]<UL><LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_reassociate_indication
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_disassociate_indication
<LI><a href="#[8d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deauthenticate_indication
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_authenticate_indication
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_associate_indication
</UL>

<P><STRONG><a name="[8c5]"></a>mlme_authenticate_indication</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ap_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = mlme_authenticate_indication &rArr; mlme_deletekeys_request &rArr; wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deletekeys_request
</UL>
<BR>[Called By]<UL><LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_auth
</UL>

<P><STRONG><a name="[8d3]"></a>mlme_deauthenticate_indication</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ap_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = mlme_deauthenticate_indication &rArr; mlme_deletekeys_request &rArr; wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deletekeys_request
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_free_stas
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
</UL>

<P><STRONG><a name="[8d8]"></a>mlme_associate_indication</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ap_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = mlme_associate_indication &rArr; mlme_deletekeys_request &rArr; wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deletekeys_request
</UL>
<BR>[Called By]<UL><LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc_cb
</UL>

<P><STRONG><a name="[8d7]"></a>mlme_reassociate_indication</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ap_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = mlme_reassociate_indication &rArr; mlme_deletekeys_request &rArr; wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deletekeys_request
</UL>
<BR>[Called By]<UL><LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc_cb
</UL>

<P><STRONG><a name="[8d6]"></a>mlme_disassociate_indication</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ap_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = mlme_disassociate_indication &rArr; mlme_deletekeys_request &rArr; wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deletekeys_request
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disassoc_cb_timeout
</UL>

<P><STRONG><a name="[8f0]"></a>mlme_michaelmicfailure_indication</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ap_mlme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;michael_mic_failure
</UL>

<P><STRONG><a name="[8cf]"></a>hostapd_eid_wmm</STRONG> (Thumb, 158 bytes, Stack size 20 bytes, beacon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = hostapd_eid_wmm
</UL>
<BR>[Called By]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_assoc_resp
</UL>

<P><STRONG><a name="[8c9]"></a>hostapd_eid_wmm_valid</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, beacon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_assoc_ies
</UL>

<P><STRONG><a name="[8d2]"></a>handle_probe_req</STRONG> (Thumb, 342 bytes, Stack size 72 bytes, beacon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = handle_probe_req &rArr; hostapd_drv_send_mlme &rArr; tls_wl_if_send_mlme &rArr; ieee80211_send_mgmt &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_parse_elems
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_wmm
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_send_mlme
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_print_ssid
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_own_capab_info
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_ext_supp_rates
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_supp_rates
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_wpa
<LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_ds_params
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
</UL>

<P><STRONG><a name="[8b1]"></a>ieee802_11_set_beacon</STRONG> (Thumb, 592 bytes, Stack size 40 bytes, beacon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ieee802_11_set_beacon &rArr; hostapd_drv_set_ap &rArr; tls_wl_if_set_beacon &rArr; ieee80211_bss_info_change_notify &rArr; tls_wl_hw_bss_info_changed &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_wmm
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_own_capab_info
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_ext_supp_rates
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_supp_rates
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_ap
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_wpa
<LI><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_ds_params
<LI><a href="#[a31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_erp_info
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc
</UL>

<P><STRONG><a name="[a34]"></a>wpa_ssid_txt</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[a35]"></a>hex2byte</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hex2byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2num
</UL>
<BR>[Called By]<UL><LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2bin
</UL>

<P><STRONG><a name="[936]"></a>hexstr2bin</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hexstr2bin &rArr; hex2byte
</UL>
<BR>[Calls]<UL><LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2byte
</UL>
<BR>[Called By]<UL><LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_new_ap_settings
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_wps_cred
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_dev_type_str2bin
</UL>

<P><STRONG><a name="[8fa]"></a>inc_byte_array</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_byte_array
</UL>
<BR>[Called By]<UL><LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_byte_array
<LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_key_request
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_AUTHENTICATION2_Enter
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
</UL>

<P><STRONG><a name="[a37]"></a>wpa_get_ntp_timestamp</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpa_get_ntp_timestamp
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
</UL>
<BR>[Called By]<UL><LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init_gmk_and_counter
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
</UL>

<P><STRONG><a name="[a38]"></a>Arc4Init</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, rc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Arc4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc4_skip
</UL>

<P><STRONG><a name="[a39]"></a>Arc4_skip</STRONG> (Thumb, 148 bytes, Stack size 28 bytes, rc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Arc4_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc4_skip
</UL>

<P><STRONG><a name="[90d]"></a>rc4_skip</STRONG> (Thumb, 44 bytes, Stack size 800 bytes, rc4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 828<LI>Call Chain = rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[a39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arc4_skip
<LI><a href="#[a38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Arc4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_processKey
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc4
</UL>

<P><STRONG><a name="[a3a]"></a>rc4</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rc4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc4_skip
</UL>

<P><STRONG><a name="[a5c]"></a>wpa_auth_for_each_sta</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wpa_auth_for_each_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_setkeys
</UL>

<P><STRONG><a name="[bab]"></a>wpa_auth_logger</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wpa_auth.o(.text), UNUSED)

<P><STRONG><a name="[a3f]"></a>__wpa_send_eapol</STRONG> (Thumb, 710 bytes, Stack size 96 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc4_skip
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_byte_array
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_sta_flags_to_drv
<LI><a href="#[a42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_hapd_send_eapol
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrap
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_eapol
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
</UL>

<P><STRONG><a name="[a2e]"></a>wpa_remove_ptk</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_key
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_INITIALIZE_Enter
<LI><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_deletekeys_request
</UL>

<P><STRONG><a name="[a5e]"></a>wpa_init</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = wpa_init &rArr; wpa_group_init_gmk_and_counter &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
<LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_set_key_len
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init_gmk_and_counter
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa
</UL>

<P><STRONG><a name="[8ab]"></a>wpa_init_keys</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = wpa_init_keys &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
</UL>
<BR>[Called By]<UL><LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[a61]"></a>wpa_deinit</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wpa_deinit &rArr; eloop_cancel_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_deinit_wpa
</UL>

<P><STRONG><a name="[a62]"></a>wpa_reconfig</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wpa_auth.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
<LI><a href="#[a60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_set_key_len
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[8c0]"></a>wpa_auth_sta_init</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wpa_auth_sta_init &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_assoc_ies
</UL>

<P><STRONG><a name="[8b6]"></a>wpa_auth_sta_associated</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = wpa_auth_sta_associated &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_client_event
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_new_assoc_sta
</UL>

<P><STRONG><a name="[8ca]"></a>wpa_auth_sta_no_wpa</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_assoc_ies
</UL>

<P><STRONG><a name="[8eb]"></a>wpa_auth_sta_deinit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wpa_auth_sta_deinit &rArr; eloop_cancel_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[8d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_client_event
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_free_sta_sm
</UL>
<BR>[Called By]<UL><LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
</UL>

<P><STRONG><a name="[8bc]"></a>wpa_receive</STRONG> (Thumb, 692 bytes, Stack size 96 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = wpa_receive &rArr; wpa_sta_disconnect &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_add_randomness
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_compare_rsn_ie
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_kde_ies
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive_error_report
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_request_new_ptk
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sta_disconnect
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_gtk
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_verify_key_mic
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_receive
</UL>

<P><STRONG><a name="[8b5]"></a>wpa_auth_sm_event</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_remove_ptk
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_new_assoc_sta
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_auth
</UL>

<P><STRONG><a name="[8f3]"></a>wpa_gtk_rekey</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = wpa_gtk_rekey &rArr; wpa_gtk_update &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_config_group_keys
</UL>
<BR>[Called By]<UL><LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
</UL>

<P><STRONG><a name="[8f2]"></a>wpa_auth_countermeasures_start</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
</UL>

<P><STRONG><a name="[bac]"></a>wpa_auth_pairwise_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wpa_auth.o(.text), UNUSED)

<P><STRONG><a name="[bad]"></a>wpa_auth_get_pairwise</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa_auth.o(.text), UNUSED)

<P><STRONG><a name="[bae]"></a>wpa_auth_sta_key_mgmt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wpa_auth.o(.text), UNUSED)

<P><STRONG><a name="[baf]"></a>wpa_auth_sta_wpa_version</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wpa_auth.o(.text), UNUSED)

<P><STRONG><a name="[bb0]"></a>wpa_auth_sta_clear_pmksa</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wpa_auth.o(.text), UNUSED)

<P><STRONG><a name="[bb1]"></a>wpa_auth_sta_get_pmksa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wpa_auth.o(.text), UNUSED)

<P><STRONG><a name="[8ef]"></a>wpa_auth_sta_local_mic_failure_report</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;michael_mic_failure
</UL>

<P><STRONG><a name="[a33]"></a>wpa_auth_get_wpa_ie</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_wpa
</UL>

<P><STRONG><a name="[8b2]"></a>hostapd_deinit_wpa</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wpa_auth_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = hostapd_deinit_wpa &rArr; wpa_deinit &rArr; eloop_cancel_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_deinit
<LI><a href="#[a61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_interface_deinit
</UL>

<P><STRONG><a name="[8aa]"></a>hostapd_setup_wpa</STRONG> (Thumb, 100 bytes, Stack size 80 bytes, wpa_auth_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init_gmk_and_counter &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[a65]"></a>wpa_write_rsn_ie</STRONG> (Thumb, 360 bytes, Stack size 56 bytes, wpa_auth_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wpa_write_rsn_ie &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
</UL>

<P><STRONG><a name="[a5f]"></a>wpa_auth_gen_wpa_ie</STRONG> (Thumb, 106 bytes, Stack size 152 bytes, wpa_auth_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wpa_auth_gen_wpa_ie &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_write_rsn_ie
<LI><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_write_wpa_ie
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_reconfig
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
</UL>

<P><STRONG><a name="[a46]"></a>wpa_add_kde</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, wpa_auth_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_add_kde &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter
</UL>

<P><STRONG><a name="[8c1]"></a>wpa_validate_wpa_ie</STRONG> (Thumb, 492 bytes, Stack size 40 bytes, wpa_auth_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wpa_validate_wpa_ie &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_wpa
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_assoc_ies
</UL>

<P><STRONG><a name="[a63]"></a>wpa_parse_kde_ies</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, wpa_auth_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = wpa_parse_kde_ies &rArr; wpa_parse_generic
</UL>
<BR>[Calls]<UL><LI><a href="#[a67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_generic
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>

<P><STRONG><a name="[bb2]"></a>wpa_auth_uses_mfp</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wpa_auth_ie.o(.text), UNUSED)

<P><STRONG><a name="[8f6]"></a>wpa_eapol_key_mic</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, wpa_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_verify_key_mic
</UL>

<P><STRONG><a name="[a4f]"></a>rsn_pmkid</STRONG> (Thumb, 54 bytes, Stack size 80 bytes, wpa_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = rsn_pmkid &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKSTART_Enter
</UL>

<P><STRONG><a name="[8fe]"></a>wpa_pmk_to_ptk</STRONG> (Thumb, 156 bytes, Stack size 128 bytes, wpa_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = wpa_pmk_to_ptk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKCALCNEGOTIATING_Enter
</UL>

<P><STRONG><a name="[bb3]"></a>wpa_cipher_txt</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, wpa_common.o(.text), UNUSED)

<P><STRONG><a name="[905]"></a>wpa_compare_rsn_ie</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wpa_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = wpa_compare_rsn_ie &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_validate_ie
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>

<P><STRONG><a name="[928]"></a>wpa_parse_wpa_ie_rsn</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, wpa_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_parse_wpa_ie_rsn
</UL>
<BR>[Calls]<UL><LI><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_selector_to_bitfield
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
</UL>

<P><STRONG><a name="[927]"></a>wpa_parse_wpa_ie_wpa</STRONG> (Thumb, 422 bytes, Stack size 32 bytes, wpa_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_parse_wpa_ie_wpa
</UL>
<BR>[Calls]<UL><LI><a href="#[a69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_selector_to_bitfield
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
</UL>

<P><STRONG><a name="[895]"></a>hex2digit</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wpa_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wpa
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wep
</UL>

<P><STRONG><a name="[8d4]"></a>hostapd_drv_sta_remove</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = hostapd_drv_sta_remove &rArr; tls_wl_if_sta_remove &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
<LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_remove
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc_cb
</UL>

<P><STRONG><a name="[8db]"></a>hostapd_set_sta_flags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc_cb
</UL>

<P><STRONG><a name="[a41]"></a>hostapd_sta_flags_to_drv</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_add
<LI><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_authorized
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
</UL>

<P><STRONG><a name="[8d9]"></a>hostapd_drv_sta_add</STRONG> (Thumb, 76 bytes, Stack size 64 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = hostapd_drv_sta_add &rArr; tls_wl_if_sta_add &rArr; ieee80211_rate_control_init &rArr; rc_init &rArr; rc_wl_select_max_rate &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_add
<LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_sta_flags_to_drv
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc_cb
</UL>

<P><STRONG><a name="[8c6]"></a>hostapd_drv_send_mlme</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = hostapd_drv_send_mlme &rArr; tls_wl_if_send_mlme &rArr; ieee80211_send_mgmt &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_mlme
</UL>
<BR>[Called By]<UL><LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_assoc_resp
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_auth
</UL>

<P><STRONG><a name="[a32]"></a>hostapd_drv_set_ap</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = hostapd_drv_set_ap &rArr; tls_wl_if_set_beacon &rArr; ieee80211_bss_info_change_notify &rArr; tls_wl_hw_bss_info_changed &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_beacon
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_rate_mode
<LI><a href="#[91d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_auth_params
<LI><a href="#[91b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_auth_alg
<LI><a href="#[a6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cipher2drv
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[bb4]"></a>hostapd_drv_sta_set_flags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text), UNUSED)

<P><STRONG><a name="[8a9]"></a>hostapd_drv_set_key</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_key
</UL>

<P><STRONG><a name="[a45]"></a>hostapd_get_seqnum</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter
</UL>

<P><STRONG><a name="[8ed]"></a>hostapd_drv_set_countermeasures</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_stop
</UL>

<P><STRONG><a name="[a42]"></a>hostapd_drv_hapd_send_eapol</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = hostapd_drv_hapd_send_eapol &rArr; wpa_drv_send_eapol &rArr; tls_wl_if_send_eapol &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_send_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
</UL>

<P><STRONG><a name="[8af]"></a>hostapd_set_freq</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = hostapd_set_freq &rArr; wpa_drv_set_freq &rArr; tls_wl_if_set_freq &rArr; ieee80211_set_freq &rArr; ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_channel_info_updata
<LI><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_state
<LI><a href="#[91a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface
</UL>

<P><STRONG><a name="[bb5]"></a>hostapd_sta_set_flags</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text), UNUSED)

<P><STRONG><a name="[8ea]"></a>hostapd_drv_get_inact_sec</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hostapd_drv_get_inact_sec &rArr; tls_wl_if_get_inact_sec &rArr; sta_info_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_inact_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
</UL>

<P><STRONG><a name="[8bb]"></a>hostapd_set_authorized</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hostapd_set_authorized
</UL>
<BR>[Calls]<UL><LI><a href="#[a41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_sta_flags_to_drv
</UL>
<BR>[Called By]<UL><LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_set_sta_authorized
</UL>

<P><STRONG><a name="[8b7]"></a>hostapd_drv_sta_flush</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = hostapd_drv_sta_flush &rArr; tls_wl_if_sta_flush &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_flush_old_stations
</UL>

<P><STRONG><a name="[8b4]"></a>hostapd_drv_sta_deauth</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = hostapd_drv_sta_deauth &rArr; tls_wl_if_sta_deauth &rArr; ieee80211_send_deauth_disassoc &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_deauth
</UL>
<BR>[Called By]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_rx_from_unknown
<LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_free_stas
<LI><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_new_assoc_sta
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_flush_old_stations
<LI><a href="#[8f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tkip_countermeasures_start
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
</UL>

<P><STRONG><a name="[8c2]"></a>hostapd_drv_sta_disassoc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = hostapd_drv_sta_disassoc &rArr; tls_wl_if_sta_disassoc &rArr; ieee80211_send_deauth_disassoc &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_disassoc
</UL>
<BR>[Called By]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_rx_from_unknown
<LI><a href="#[8e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_handle_timer
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
</UL>

<P><STRONG><a name="[bb6]"></a>hostapd_if_add</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text), UNUSED)

<P><STRONG><a name="[8b0]"></a>hostapd_set_tx_queue_params</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hostapd_set_tx_queue_params &rArr; tls_wl_if_set_tx_queue_params
</UL>
<BR>[Calls]<UL><LI><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_tx_queue_params
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface
</UL>

<P><STRONG><a name="[a6c]"></a>dh5_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dh_group5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3008<LI>Call Chain = dh5_init &rArr; dh_init &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; tls_crypto_exptmod &rArr; mp_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_set
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_init
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_groups_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_public_key
</UL>

<P><STRONG><a name="[99d]"></a>dh5_derive_shared</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dh_group5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3024<LI>Call Chain = dh5_derive_shared &rArr; dh_derive_shared &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; tls_crypto_exptmod &rArr; mp_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_set
<LI><a href="#[a6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_groups_get
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_derive_shared
</UL>
<BR>[Called By]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_keys
</UL>

<P><STRONG><a name="[982]"></a>dh5_free</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dh_group5.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_keys
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_deinit
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_public_key
</UL>

<P><STRONG><a name="[94c]"></a>eap_hdr_validate</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, eap_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = eap_hdr_validate
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_NOTIFICATION_Enter
</UL>

<P><STRONG><a name="[949]"></a>eap_msg_alloc</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, eap_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = eap_msg_alloc &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process_fragment
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_build_msg
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildIdentity
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_build_expanded_nak
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_NOTIFICATION_Enter
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildNak
</UL>

<P><STRONG><a name="[a8f]"></a>eap_update_len</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, eap_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_build_expanded_nak
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildNak
</UL>

<P><STRONG><a name="[94d]"></a>eap_get_id</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, eap_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process
</UL>

<P><STRONG><a name="[bb7]"></a>eap_get_type</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, eap_common.o(.text), UNUSED)

<P><STRONG><a name="[a75]"></a>eapol_set_bool</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eapol_set_bool
</UL>
<BR>[Called By]<UL><LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_abort
<LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_notify_lower_layer_success
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_DISCARD_Enter
<LI><a href="#[a7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_FAILURE_Enter
<LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SUCCESS_Enter
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SEND_RESPONSE_Enter
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_INITIALIZE_Enter
</UL>

<P><STRONG><a name="[a71]"></a>eap_get_config</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_config_phase1
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_config_identity
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_config_fragment_size
<LI><a href="#[a8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_config_phase2
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildIdentity
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_allowed_method
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_GET_METHOD_Enter
</UL>

<P><STRONG><a name="[a70]"></a>eap_allowed_method</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eap_allowed_method
</UL>
<BR>[Calls]<UL><LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_build_expanded_nak
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildNak
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_GET_METHOD_Enter
</UL>

<P><STRONG><a name="[bb8]"></a>eap_sm_request_identity</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, eap.o(.text), UNUSED)

<P><STRONG><a name="[a7d]"></a>eap_sm_buildIdentity</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = eap_sm_buildIdentity &rArr; eap_msg_alloc &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_msg_alloc
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_config
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_received
</UL>

<P><STRONG><a name="[97d]"></a>eap_peer_sm_init</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = eap_peer_sm_init &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_init
</UL>

<P><STRONG><a name="[95a]"></a>eap_sm_abort</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = eap_sm_abort &rArr; wpabuf_free &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_set_bool
</UL>
<BR>[Called By]<UL><LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_deinit
<LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_BE_Step
</UL>

<P><STRONG><a name="[97e]"></a>eap_peer_sm_deinit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eap_peer_sm_deinit &rArr; eap_sm_abort &rArr; wpabuf_free &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_abort
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_deinit_prev_method
</UL>
<BR>[Called By]<UL><LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_deinit
</UL>

<P><STRONG><a name="[96f]"></a>eap_peer_sm_step</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = eap_peer_sm_step &rArr; sm_EAP_Step &rArr; eap_peer_sm_step_local &rArr; eap_peer_sm_step_received &rArr; sm_EAP_GET_METHOD_Enter &rArr; eap_sm_buildNak &rArr; eap_sm_build_expanded_nak &rArr; eap_msg_alloc &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>
<BR>[Called By]<UL><LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step
</UL>

<P><STRONG><a name="[971]"></a>eap_sm_get_method_name</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eap.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[970]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_get_method_name
</UL>

<P><STRONG><a name="[bb9]"></a>eap_sm_request_password</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, eap.o(.text), UNUSED)

<P><STRONG><a name="[bba]"></a>eap_sm_request_new_password</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, eap.o(.text), UNUSED)

<P><STRONG><a name="[bbb]"></a>eap_sm_request_pin</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, eap.o(.text), UNUSED)

<P><STRONG><a name="[bbc]"></a>eap_sm_request_otp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, eap.o(.text), UNUSED)

<P><STRONG><a name="[bbd]"></a>eap_sm_request_passphrase</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, eap.o(.text), UNUSED)

<P><STRONG><a name="[973]"></a>eap_set_fast_reauth</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, eap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_config
</UL>

<P><STRONG><a name="[974]"></a>eap_set_workaround</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_config
</UL>

<P><STRONG><a name="[943]"></a>eap_get_config_identity</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eap_get_config_identity
</UL>
<BR>[Calls]<UL><LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_config
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_init
</UL>

<P><STRONG><a name="[944]"></a>eap_get_config_phase1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eap_get_config_phase1
</UL>
<BR>[Calls]<UL><LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_config
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_init
</UL>

<P><STRONG><a name="[a8b]"></a>eap_get_config_phase2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, eap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_config
</UL>

<P><STRONG><a name="[946]"></a>eap_get_config_fragment_size</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eap_get_config_fragment_size
</UL>
<BR>[Calls]<UL><LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_config
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_init
</UL>

<P><STRONG><a name="[956]"></a>eap_key_available</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_get_key
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_BE_SUCCESS_Enter
</UL>

<P><STRONG><a name="[972]"></a>eap_notify_success</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, eap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_eap_success
<LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_cached
</UL>

<P><STRONG><a name="[961]"></a>eap_notify_lower_layer_success</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eap_notify_lower_layer_success &rArr; eapol_set_bool
</UL>
<BR>[Calls]<UL><LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_set_bool
<LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_get_bool
</UL>
<BR>[Called By]<UL><LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_lower_layer_success
</UL>

<P><STRONG><a name="[95f]"></a>eap_get_eapKeyData</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, eap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_get_key
</UL>

<P><STRONG><a name="[97f]"></a>eap_get_eapRespData</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_BE_RESPONSE_Enter
</UL>

<P><STRONG><a name="[979]"></a>eap_register_scard_ctx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eap.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[978]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_register_scard_ctx
</UL>

<P><STRONG><a name="[bbe]"></a>eap_set_config_blob</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eap.o(.text), UNUSED)

<P><STRONG><a name="[bbf]"></a>eap_get_config_blob</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eap.o(.text), UNUSED)

<P><STRONG><a name="[975]"></a>eap_set_force_disabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_config
</UL>

<P><STRONG><a name="[bc0]"></a>eap_notify_pending</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eap.o(.text), UNUSED)

<P><STRONG><a name="[97c]"></a>eap_invalidate_cached_session</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_deinit_prev_method
</UL>
<BR>[Called By]<UL><LI><a href="#[97b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_invalidate_cached_session
</UL>

<P><STRONG><a name="[938]"></a>eap_is_wps_pbc_enrollee</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = eap_is_wps_pbc_enrollee &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_get_req_type
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_ssid_wildcard_ok
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_ssid_bss_match
</UL>

<P><STRONG><a name="[934]"></a>eap_is_wps_pin_enrollee</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = eap_is_wps_pin_enrollee &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_get_req_type
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_ssid_wildcard_ok
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_ssid_bss_match
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_eapol_cb
</UL>

<P><STRONG><a name="[a78]"></a>eap_peer_get_eap_method</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, eap_methods.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_GET_METHOD_Enter
</UL>

<P><STRONG><a name="[a92]"></a>eap_peer_get_type</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, eap_methods.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[a8c]"></a>eap_peer_get_methods</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, eap_methods.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildNak
</UL>

<P><STRONG><a name="[951]"></a>eap_peer_method_alloc</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, eap_methods.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = eap_peer_method_alloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_wsc_register
</UL>

<P><STRONG><a name="[953]"></a>eap_peer_method_free</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, eap_methods.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = eap_peer_method_free &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_wsc_register
</UL>

<P><STRONG><a name="[952]"></a>eap_peer_method_register</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, eap_methods.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eap_peer_method_register &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_wsc_register
</UL>

<P><STRONG><a name="[a93]"></a>eap_peer_unregister_methods</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, eap_methods.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>

<P><STRONG><a name="[a94]"></a>wps_build_public_key</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, wps_attr_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3032<LI>Call Chain = wps_build_public_key &rArr; dh5_init &rArr; dh_init &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; tls_crypto_exptmod &rArr; mp_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_zeropad
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
<LI><a href="#[982]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh5_free
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_buf
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh5_init
</UL>
<BR>[Called By]<UL><LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[98c]"></a>wps_build_req_type</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wps_attr_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wps_build_req_type &rArr; wpabuf_put_be16
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_assoc_req_ie
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_probe_req_ie
</UL>

<P><STRONG><a name="[98f]"></a>wps_build_resp_type</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wps_attr_build.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_assoc_resp_ie
</UL>

<P><STRONG><a name="[990]"></a>wps_build_config_methods</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wps_attr_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wps_build_config_methods &rArr; wpabuf_put_be16
</UL>
<BR>[Calls]<UL><LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_probe_req_ie
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[991]"></a>wps_build_uuid_e</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wps_attr_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wps_build_uuid_e &rArr; wpabuf_put_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_probe_req_ie
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[996]"></a>wps_build_dev_password_id</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wps_attr_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wps_build_dev_password_id &rArr; wpabuf_put_be16
</UL>
<BR>[Calls]<UL><LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_probe_req_ie
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[995]"></a>wps_build_config_error</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wps_attr_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wps_build_config_error &rArr; wpabuf_put_be16
</UL>
<BR>[Calls]<UL><LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_probe_req_ie
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_nack
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[a98]"></a>wps_build_authenticator</STRONG> (Thumb, 102 bytes, Stack size 72 bytes, wps_attr_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 748<LI>Call Chain = wps_build_authenticator &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m3
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
</UL>

<P><STRONG><a name="[98b]"></a>wps_build_version</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wps_attr_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wps_build_version &rArr; wpabuf_put_be16
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_assoc_req_ie
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_probe_req_ie
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_nack
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_ack
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_assoc_resp_ie
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_done
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m3
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[98d]"></a>wps_build_wfa_ext</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wps_attr_build.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_assoc_req_ie
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_nack
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_ack
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_assoc_resp_ie
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_done
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m3
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[9a8]"></a>wps_build_msg_type</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wps_attr_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wps_build_msg_type &rArr; wpabuf_put_be16
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_nack
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_ack
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_done
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m3
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[9a9]"></a>wps_build_enrollee_nonce</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wps_attr_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wps_build_enrollee_nonce &rArr; wpabuf_put_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_nack
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_ack
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_done
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[9aa]"></a>wps_build_registrar_nonce</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wps_attr_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wps_build_registrar_nonce &rArr; wpabuf_put_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_nack
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_ack
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_done
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m3
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
</UL>

<P><STRONG><a name="[a9a]"></a>wps_build_auth_type_flags</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wps_attr_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wps_build_auth_type_flags &rArr; wpabuf_put_be16
</UL>
<BR>[Calls]<UL><LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[a9b]"></a>wps_build_encr_type_flags</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wps_attr_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wps_build_encr_type_flags &rArr; wpabuf_put_be16
</UL>
<BR>[Calls]<UL><LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[a9c]"></a>wps_build_conn_type_flags</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wps_attr_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wps_build_conn_type_flags &rArr; wpabuf_put_be16
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[994]"></a>wps_build_assoc_state</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wps_attr_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wps_build_assoc_state &rArr; wpabuf_put_be16
</UL>
<BR>[Calls]<UL><LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_probe_req_ie
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[a9d]"></a>wps_build_key_wrap_auth</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, wps_attr_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = wps_build_key_wrap_auth &rArr; hmac_sha256 &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
</UL>

<P><STRONG><a name="[a9e]"></a>wps_build_encr_settings</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, wps_attr_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = wps_build_encr_settings &rArr; aes_128_cbc_encrypt &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_buf
<LI><a href="#[a95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_cbc_encrypt
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
</UL>

<P><STRONG><a name="[99a]"></a>wps_ie_encapsulate</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, wps_attr_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wps_ie_encapsulate &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_probe_req_ie
</UL>

<P><STRONG><a name="[980]"></a>wps_parse_msg</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, wps_attr_parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wps_parse_msg &rArr; wps_set_attr &rArr; wps_parse_vendor_ext_wfa
</UL>
<BR>[Calls]<UL><LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_set_attr
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[93e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_is_selected_pbc_registrar
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_is_addr_authorized
<LI><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_attr_text
<LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_process_msg
<LI><a href="#[989]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_is_20
<LI><a href="#[988]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_get_uuid_e
<LI><a href="#[987]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_ap_priority_compar
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_is_selected_pin_registrar
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_init
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_nack
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_ack
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_e
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
</UL>

<P><STRONG><a name="[aa2]"></a>wps_build_manufacturer</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wps_dev_attr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wps_build_manufacturer &rArr; wpabuf_put_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_device_attrs
</UL>

<P><STRONG><a name="[aa5]"></a>wps_build_model_name</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wps_dev_attr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wps_build_model_name &rArr; wpabuf_put_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_device_attrs
</UL>

<P><STRONG><a name="[aa6]"></a>wps_build_model_number</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wps_dev_attr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wps_build_model_number &rArr; wpabuf_put_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_device_attrs
</UL>

<P><STRONG><a name="[992]"></a>wps_build_primary_dev_type</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wps_dev_attr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wps_build_primary_dev_type &rArr; wpabuf_put_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_probe_req_ie
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_device_attrs
</UL>

<P><STRONG><a name="[998]"></a>wps_build_secondary_dev_type</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wps_dev_attr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wps_build_secondary_dev_type &rArr; wpabuf_put_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_probe_req_ie
</UL>

<P><STRONG><a name="[997]"></a>wps_build_req_dev_type</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, wps_dev_attr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wps_build_req_dev_type &rArr; wpabuf_put_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_probe_req_ie
</UL>

<P><STRONG><a name="[999]"></a>wps_build_dev_name</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, wps_dev_attr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wps_build_dev_name &rArr; wpabuf_put_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_probe_req_ie
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_device_attrs
</UL>

<P><STRONG><a name="[aa7]"></a>wps_build_device_attrs</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, wps_dev_attr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wps_build_device_attrs &rArr; wps_build_primary_dev_type &rArr; wpabuf_put_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_primary_dev_type
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_dev_name
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_model_number
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_model_name
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_manufacturer
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[aa8]"></a>wps_build_os_version</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wps_dev_attr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wps_build_os_version &rArr; wpabuf_put_be16
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[993]"></a>wps_build_rf_bands</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wps_dev_attr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wps_build_rf_bands &rArr; wpabuf_put_be16
</UL>
<BR>[Calls]<UL><LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[aa9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_probe_req_ie
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[aaa]"></a>wps_build_vendor_ext</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wps_dev_attr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[aa3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>

<P><STRONG><a name="[aab]"></a>wps_process_device_attrs</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, wps_dev_attr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = wps_process_device_attrs &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
</UL>

<P><STRONG><a name="[bc1]"></a>wps_process_os_version</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wps_dev_attr.o(.text), UNUSED)

<P><STRONG><a name="[bc2]"></a>wps_process_rf_bands</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wps_dev_attr.o(.text), UNUSED)

<P><STRONG><a name="[aac]"></a>wps_device_data_dup</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wps_dev_attr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strdup
</UL>

<P><STRONG><a name="[981]"></a>wps_device_data_free</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wps_dev_attr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wps_device_data_free &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_deinit
</UL>

<P><STRONG><a name="[984]"></a>wps_enrollee_get_msg</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3072<LI>Call Chain = wps_enrollee_get_msg &rArr; wps_build_m1 &rArr; wps_build_public_key &rArr; dh5_init &rArr; dh_init &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; tls_crypto_exptmod &rArr; mp_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
<LI><a href="#[9ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_nack
<LI><a href="#[9a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_ack
<LI><a href="#[ab4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wsc_done
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
<LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m3
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>
<BR>[Called By]<UL><LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_get_msg
</UL>

<P><STRONG><a name="[983]"></a>wps_enrollee_process_msg</STRONG> (Thumb, 102 bytes, Stack size 512 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4280<LI>Call Chain = wps_enrollee_process_msg &rArr; wps_process_wsc_msg &rArr; wps_process_m2 &rArr; wps_derive_keys &rArr; dh5_derive_shared &rArr; dh_derive_shared &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; tls_crypto_exptmod &rArr; mp_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_nack
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_ack
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_msg
</UL>

<P><STRONG><a name="[acb]"></a>fftr2_dit_new</STRONG> (Thumb, 180 bytes, Stack size 44 bytes, tls_rf_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = fftr2_dit_new
</UL>
<BR>[Called By]<UL><LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
</UL>

<P><STRONG><a name="[aca]"></a>ReverseBits</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tls_rf_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ReverseBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_rev
</UL>

<P><STRONG><a name="[ac9]"></a>NumberOfBitsNeeded</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tls_rf_fft.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_rev
</UL>

<P><STRONG><a name="[ac8]"></a>bit_rev</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, tls_rf_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bit_rev &rArr; ReverseBits
</UL>
<BR>[Calls]<UL><LI><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NumberOfBitsNeeded
<LI><a href="#[aca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReverseBits
</UL>
<BR>[Called By]<UL><LI><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fft
</UL>

<P><STRONG><a name="[a28]"></a>fft</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, tls_rf_fft.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fft &rArr; fftr2_dit_new
</UL>
<BR>[Calls]<UL><LI><a href="#[ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_rev
<LI><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fftr2_dit_new
</UL>
<BR>[Called By]<UL><LI><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_fft_cal_t
<LI><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_data_sample_fft_cal
</UL>

<P><STRONG><a name="[a40]"></a>aes_wrap</STRONG> (Thumb, 164 bytes, Stack size 832 bytes, aes_wrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_aes_encrypt_decrypt
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_aes_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
</UL>

<P><STRONG><a name="[acc]"></a>crypto_mod_exp</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, dh_groups.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2952<LI>Call Chain = crypto_mod_exp &rArr; bignum_exptmod &rArr; tls_crypto_exptmod &rArr; mp_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_set_unsigned_bin
<LI><a href="#[acd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_init
<LI><a href="#[ad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_get_unsigned_bin
<LI><a href="#[acf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_exptmod
<LI><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bignum_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_init
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_derive_shared
</UL>

<P><STRONG><a name="[a6d]"></a>dh_groups_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dh_groups.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh5_derive_shared
<LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh5_init
</UL>

<P><STRONG><a name="[a6e]"></a>dh_init</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, dh_groups.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2992<LI>Call Chain = dh_init &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; tls_crypto_exptmod &rArr; mp_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mod_exp
<LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[a6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh5_init
</UL>

<P><STRONG><a name="[a6f]"></a>dh_derive_shared</STRONG> (Thumb, 126 bytes, Stack size 56 bytes, dh_groups.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3008<LI>Call Chain = dh_derive_shared &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; tls_crypto_exptmod &rArr; mp_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mod_exp
<LI><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[99d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh5_derive_shared
</UL>

<P><STRONG><a name="[ab7]"></a>wps_process_authenticator</STRONG> (Thumb, 94 bytes, Stack size 80 bytes, wps_attr_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = wps_process_authenticator &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
</UL>

<P><STRONG><a name="[ab9]"></a>wps_process_key_wrap_auth</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, wps_attr_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = wps_process_key_wrap_auth &rArr; hmac_sha256 &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
</UL>

<P><STRONG><a name="[ac7]"></a>wps_process_cred</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, wps_attr_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wps_process_cred &rArr; wps_process_cred_network_key &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_workaround_cred_key
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_mac_addr
<LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_network_key
<LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_network_key_idx
<LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_encr_type
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_auth_type
<LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_ssid
</UL>
<BR>[Called By]<UL><LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_e
</UL>

<P><STRONG><a name="[abf]"></a>wps_process_ap_settings</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, wps_attr_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wps_process_ap_settings &rArr; wps_process_cred_network_key &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_workaround_cred_key
<LI><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_mac_addr
<LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_network_key
<LI><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_network_key_idx
<LI><a href="#[ad6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_encr_type
<LI><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_auth_type
<LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_ssid
</UL>
<BR>[Called By]<UL><LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
</UL>

<P><STRONG><a name="[acd]"></a>bignum_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bignum_init &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mod_exp
</UL>

<P><STRONG><a name="[ad1]"></a>bignum_deinit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bignum_deinit &rArr; mp_clear &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mod_exp
</UL>

<P><STRONG><a name="[ad0]"></a>bignum_get_unsigned_bin</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = bignum_get_unsigned_bin &rArr; mp_to_unsigned_bin &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_unsigned_bin_size
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin
</UL>
<BR>[Called By]<UL><LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mod_exp
</UL>

<P><STRONG><a name="[ace]"></a>bignum_set_unsigned_bin</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bignum_set_unsigned_bin &rArr; mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_copy &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
</UL>
<BR>[Called By]<UL><LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mod_exp
</UL>

<P><STRONG><a name="[acf]"></a>bignum_exptmod</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bignum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2896<LI>Call Chain = bignum_exptmod &rArr; tls_crypto_exptmod &rArr; mp_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
</UL>
<BR>[Called By]<UL><LI><a href="#[acc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crypto_mod_exp
</UL>

<P><STRONG><a name="[adb]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a20]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_phase_adjust_fft
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_correlation_method
</UL>

<P><STRONG><a name="[6f0]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrHToL
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_NOTIFICATION_Enter
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[14c]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[2f0]"></a>toupper</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, toupper.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrHToL
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrCaseStr
</UL>

<P><STRONG><a name="[6db]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrCaseStr
</UL>

<P><STRONG><a name="[48b]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_enter
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetRandomeNumber
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_wep_init
</UL>

<P><STRONG><a name="[6fe]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperInitRandomeNumber
<LI><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_wep_init
</UL>

<P><STRONG><a name="[bc3]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[bc4]"></a>___aeabi_memmove4$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[bc5]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SockRcvTaskProc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_read
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wwps_proc
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;txg_proc
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flsr_proc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_key_proc
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_ssid_proc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_proc
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntparam_proc
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_proc
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssid_proc
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skct_proc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjoin_proc
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_success
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_parse_func
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_format_func
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_atcmd_parse
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_filter_quotation
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_key
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_ssid
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_key
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_ssid
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_net
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_ssid
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_key
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_ssid
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_key
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_scan_cmplt
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_atcmd_line
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_tx
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_rpt_handle
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decode_new_oneshot_data
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_bssid_resolve
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decrypt_data
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_ssid_resolve
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pwd_resolve
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_customdata_resolve
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Start
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Config
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSNameErrGenAndSend
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSAnswerGenAndSend
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_input
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;low_level_output
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_send_response
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_current_bss
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_fill_buf
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_post
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_net_send
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custdata_proc
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect_softap
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_input
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_process
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_save_user
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_realloc_debug
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pkcs1Pad
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNum
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetSignature
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnConstructedOctetString
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_des_encrypt_decrypt
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_des_init
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_3des_encrypt_decrypt
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_3des_init
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_aes_encrypt_decrypt
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_aes_init
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_rc4
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_rc4_init
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_random_bytes
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strndup
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeValidity
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getImplicitBitString
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGeneralNames
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_write
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_fast_write
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_set
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ft_param_get
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_tx_data
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write_with_cmd
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_init
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSetURL
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersRemove
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersAdd
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Transform
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_alloc_ps_pkt
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Update
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_ssid
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_scan
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_beacon
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_get_scan_res
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_beacon_get
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_bss_info_changed
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_start_pin
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_start_pbc
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_cfg
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_pmk
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_config
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie_default
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_rx_eapol
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_default_configs
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_eapol
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_assoc
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_mgmt
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configs
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_ps
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_prf
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_extract
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5_vector
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_realloc
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa_psk
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wpa
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_res
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_validate_network_test
<LI><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie_multi
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_add
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pbreq_encry_data
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_probereq
<LI><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_data
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt_by_rate
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_data
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_mgmt
<LI><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wps_set_pin
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap2
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_cfg2
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid2
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_data
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_tx
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_set_ssid
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_scan_req
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_gen_mac_addr
<LI><a href="#[93b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_set_uuid
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_wps_cred
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_get_key
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_eapol_send
<LI><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_send_eapol
<LI><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_ssid
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_alloc_eapol
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pmk_to_ptk
<LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_unwrap
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_4_of_4
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_4
<LI><a href="#[915]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_decrypt_key_data
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_scan
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strdup
<LI><a href="#[8dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_vendor_ie_concat
<LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_assoc_ies
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[a1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_ssid_txt
<LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_defragment
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_h_amsdu
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_rsp
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_auth
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
<LI><a href="#[9a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_cbc_decrypt
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_decrypt_encr_settings
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_psk
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_kdf
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_processKey
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_init
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_device_attrs
<LI><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildIdentity
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SEND_RESPONSE_Enter
<LI><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_write_rsn_ie
<LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_add_kde
<LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_pmkid
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrap
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_AUTHENTICATION2_Enter
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKCALCNEGOTIATING_Enter
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_verify_key_mic
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_ssid_txt
<LI><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_wpa
<LI><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_128_cbc_encrypt
<LI><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_network_key
<LI><a href="#[ad4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_ssid
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
</UL>

<P><STRONG><a name="[259]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_socket
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_init_socket_cfg
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_post
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_start
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cookey
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModWrite
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModRead
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_rx
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_defaults
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_default_configs
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configs
<LI><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_prepare_rates
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wpa
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wep
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_open
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_add
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_wps_cred
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f
<LI><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_alloc
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_keys
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_processKey
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_init
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_reconfig
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
</UL>

<P><STRONG><a name="[bc6]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_oneshot_airkiss.o(.constdata)
</UL>
<P><STRONG><a name="[bc7]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_init_data
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_stop_clear_data
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_load_factory_default
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_pack
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_channel_switch
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_flush_old_stations
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_encr_settings
<LI><a href="#[a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_wrap
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[bc8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[bc9]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketUdp
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SockRcvTaskProc
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1Init
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1RxHandle
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_proc
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wjoin_proc
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_parse_func
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_exec
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_sta_detail
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_key
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_key
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_softap_key
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_join_net
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_key
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_fwup_rsp
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decode_new_oneshot_data
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_init_data
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decrypt_data
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_ssid_resolve
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_customdata_resolve
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_clear_oneshot_data
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_port_init
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_get_status
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_post
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custdata_proc
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_load_factory_default
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt_src
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaDecryptPriv
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psRsaCrypt
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strndup
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGeneralNames
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientOpenRequest
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersParse
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersRemove
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersFind
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersAdd
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionReset
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_alloc_ps_pkt
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_accept
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_switch_channel_width
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_default_configs
<LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_send_channel_switch
<LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_associated
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_clear_1shot_info
<LI><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_data
<LI><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_send_mgmt
<LI><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap2
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_eapol_send
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_zeropad
<LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_alloc_eapol
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_resize
<LI><a href="#[8dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_zalloc
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_assoc_resp
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_auth
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_ht_cap_ie_to_sta_ht_cap
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_processKey
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_verify_key_mic
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_remove_ptk
</UL>

<P><STRONG><a name="[1c7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPNakGenAndSend
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPOfferGenAndSend
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPAckGenAndSend
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketUdp
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flsw_proc
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flsr_proc
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_ssid_proc
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softap_lkstt_proc
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpc_proc
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_proc
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cntparam_proc
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssid_proc
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skstt_proc
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lkstt_proc
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_create_socket
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_create_default_socket
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_state
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_init
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_parse_func
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_encrypt
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_softap_ssid
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_wr_flash
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_encrypt
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_proc
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_scan
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_send
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_create
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_close
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_init_data
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_create
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decrypt_data
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pwd_resolve
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_customdata_resolve
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_oneshot_send_mac
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Start
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Config
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Stop
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_Start
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_alloc_socket
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_port_init
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_slave_spi_init
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_load_user
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_post
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_http_fwup
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_init
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_open
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer2_start
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_message_init
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_load_factory_default
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_ethernet_init
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tcpip_stack_init
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_struct
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_init
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psNewPubKey
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Final
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_final
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_final
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_3des_encrypt_decrypt
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_timer_init
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_init
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_init
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGeneralNames
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModWrite
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsaMulModRead
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_port_init
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write_with_cmd
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_send
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_recv
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientGetInfo
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientWriteData
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientOpenRequest
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionReset
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Transform
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_config_defaults
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHA1Final
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_tx_init
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init_ifdata
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_timer_task
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_default_configs
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_reload_config
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_eapol
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_assoc
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disassoc
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disconnect_network
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_scan_completed
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disconnect_softap
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_reload_config4softap
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_from_unknown
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_mic_err
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_mgmt
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_associate
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_ps
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_rx_pspoll
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_sta_active
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5_vector
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_init
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_alloc_bss_data
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa_psk
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_add
<LI><a href="#[887]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_txrx_litepoint_clear_data
<LI><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_clear_1shot_info
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
<LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt_by_rate
<LI><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_encrypt
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap2
<LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_encrypt2
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid2
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_passive_scan
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_tx_send_litepoint
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_add_with_mode
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_set_ssid
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_deauth_disassoc
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_scan_req
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_init
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_new_ap_settings
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_wps_cred
<LI><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_init
<LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_wpa
<LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_parse_ies
<LI><a href="#[916]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_init
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
<LI><a href="#[8fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_4
<LI><a href="#[8e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_scan
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_init
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_parse_elems
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_add
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
<LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_assoc_ies
<LI><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_Mismatch_method
<LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_phase_adjust_fft
<LI><a href="#[a1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_correlation_method
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_elems
<LI><a href="#[9d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_delba
<LI><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_addba_resp
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_pspoll
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_nullfunc
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_rsp
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_auth
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_pwd_auth_fail_event
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_fail_event
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[97d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_init
<LI><a href="#[951]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_method_alloc
<LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_kde_ies
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
<LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_ap
<LI><a href="#[a2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LO_leakage_func_method
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_ap_settings
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2d
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_e
</UL>

<P><STRONG><a name="[bca]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_oneshot_airkiss.o(.constdata)
</UL>
<P><STRONG><a name="[21d]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_bssid_resolve
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_ssid_resolve
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pwd_resolve
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_customdata_resolve
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTaskWithinSingleList
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientWriteData
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersSend
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersFind
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_probereq
</UL>

<P><STRONG><a name="[24b]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_printf
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrSearch
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersFind
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_init
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_new_ap_settings
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_is_wps_pin_enrollee
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_is_wps_pbc_enrollee
<LI><a href="#[9a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_config_methods_str2bin
</UL>

<P><STRONG><a name="[21f]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decrypt_data
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_ssid_resolve
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pwd_resolve
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientGetNextHeader
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersParse
<LI><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pbreq_encry_data
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_probereq
</UL>

<P><STRONG><a name="[2e5]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_atcmd_parse
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_first_comma
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrGetToken
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrCaseStr
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_new_ap_settings
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_dev_type_str2bin
</UL>

<P><STRONG><a name="[200]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_proc
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_proc
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_exec
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_filter_quotation
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_init_socket_cfg
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decode_new_oneshot_data
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_ssid_bssid
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect_by_bssid
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_ssid_resolve
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pwd_resolve
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshot_connect
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Start
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_Config
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_RecvCb
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSNameErrGenAndSend
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DNSAnswerGenAndSend
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_post
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_uint
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr_to_unit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;custdata_proc
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_gethostbyname_r
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_strstr
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnstr
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stricmp
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientFindFirstHeader
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientWriteData
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetHostByName
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrCaseStr
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrInsensitiveCompare
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientAddRequestHeaders
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSetURL
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersSend
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersFind
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_prf
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_new_ap_settings
<LI><a href="#[8e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1_f
<LI><a href="#[8de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_strdup
<LI><a href="#[99b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_kdf
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_dev_name
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_device_attrs
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_model_number
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_model_name
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_manufacturer
</UL>

<P><STRONG><a name="[2d3]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_exec
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
<LI><a href="#[952]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_method_register
<LI><a href="#[a92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_get_type
</UL>

<P><STRONG><a name="[361]"></a>memchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, memchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_atcmd_eol
</UL>

<P><STRONG><a name="[152]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CleanClientHistory
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ClientTableLookup
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_is_ssid_bssid_match
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_ClientDelete
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_input
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;param_to_flash
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnGetRemoteChunkLength
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnGetRemoteHeaders
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_mac_comp_empty
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wpa
<LI><a href="#[88f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
<LI><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_associnfo
<LI><a href="#[868]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_key_4_ap2
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid2
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_ssid
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_free
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_set_ssid
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_deauth_disassoc
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_init
<LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_is_addr_authorized
<LI><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_is_wps_pin_enrollee
<LI><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_is_wps_pbc_enrollee
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pmk_to_ptk
<LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_compare_rsn_ie
<LI><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_verify_eapol_key_mic
<LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_validate_ie
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_assoc_ies
<LI><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_auth
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_mgmt_filter
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_auth
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_deauth
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_probe_resp
<LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
<LI><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_match_bss
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_get
<LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_processKey
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_req_is_duplicate
<LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_init
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_verify_key_mic
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_key_wrap_auth
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_authenticator
<LI><a href="#[ac4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_nack
<LI><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_ack
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_e
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce2
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce1
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_enrollee_nonce
<LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_oneshot_airkiss.o(.constdata)
</UL>
<P><STRONG><a name="[207]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_func
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_default_socket_params
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_set_default_socket_params
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_proc
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_ssid_resolve
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pwd_resolve
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_customdata_resolve
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_customdata
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_ssidpwd
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_load_factory_default
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_save_user
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSetVerb
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersSend
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersFind
</UL>

<P><STRONG><a name="[4a7]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnstr
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_new_ap_settings
</UL>

<P><STRONG><a name="[664]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_ipaddr
</UL>

<P><STRONG><a name="[adf]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[aed]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[553]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_uint
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrinfo
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_init
<LI><a href="#[9a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_dev_type_str2bin
</UL>

<P><STRONG><a name="[6e1]"></a>atol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetHostByName
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersParse
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSetURL
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
</UL>

<P><STRONG><a name="[ae2]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ae6]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[ae7]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[717]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_stat
<LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[716]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_stat
<LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[701]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetRandomeNumber
</UL>

<P><STRONG><a name="[bcb]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibCurrent
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibVoltage
</UL>

<P><STRONG><a name="[700]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetRandomeNumber
</UL>

<P><STRONG><a name="[715]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_stat
</UL>

<P><STRONG><a name="[702]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetRandomeNumber
</UL>

<P><STRONG><a name="[1de]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibCurrent
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibVoltage
</UL>

<P><STRONG><a name="[af3]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bcc]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibCurrent
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibVoltage
</UL>

<P><STRONG><a name="[bcd]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[af6]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[add]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[bce]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[adc]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[bcf]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[ae3]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[bd0]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[ae0]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[ade]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[149]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[14a]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[ae1]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[bd1]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[bd2]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[ae8]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>

<P><STRONG><a name="[ae5]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[ae4]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[aeb]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[adc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[15c]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[aec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[bd3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[ae9]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[aed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[ade]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[aea]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[bd4]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[bd5]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[aee]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bd6]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[15f]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibCurrent
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEnergy
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrent
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteV9261fReg
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Meter
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Handle
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiTaskProc
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserWlanStatusChangedEvent
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUdpSock
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SockRcvTaskProc
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVoltage
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibVoltage
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1RxHandle
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Check
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2c_wait_ack
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRTC_Disable
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRTC_Enable
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_time_flag
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exrtc_save
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1TaskProc
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserMain
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_probe
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_broadcast
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_recv_cb
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_disp_task_stat_info
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_rx_data_from_adc
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;t_http_fwup
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_net_send
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDG_IRQHandler
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ipaddr
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psNewPubKey
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNum
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetSignature
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnConstructedOctetString
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Init
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Update
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Final
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Init
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Update
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Init
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Update
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeValidity
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getImplicitBitString
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGeneralNames
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_io_clk_config
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_adc_start_with_dma
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hspi_tx_data
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HS_IRQHandler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_request
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_stat
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_init
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_unpack
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req
<LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_accept
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_fwup
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_rf_init
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_perror
<LI><a href="#[a21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IQ_mismatch_phase_adjust_fft
</UL>

<P><STRONG><a name="[bd7]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[bd8]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[af0]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bd9]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[26e]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_http_client_err_callback
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_http_client_recv_callback
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_atcmd_exec
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_err_resp
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_format_func
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atcmd_ok_resp
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_sta_detail
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_scan_cmplt
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_rsp
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_rpt
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTaskWithinSingleList
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mactostr
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iptostr
</UL>

<P><STRONG><a name="[bda]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[bdb]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[af1]"></a>__0vsnprintf</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bdc]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[bdd]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[bde]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[919]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_snprintf
</UL>

<P><STRONG><a name="[41c]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_impl
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetSocketError
<LI><a href="#[aea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[bdf]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[be0]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[be1]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[be2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[648]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>

<P><STRONG><a name="[649]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1ae]"></a>Uart1RxHandle</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, wm_uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Uart1RxHandle &rArr; tls_uart_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_read
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1RxCb
</UL>

<P><STRONG><a name="[c1]"></a>Uart1RxCb</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wm_uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Uart1RxCb &rArr; Uart1RxHandle &rArr; tls_uart_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1RxHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_uart1.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>SockRcvTaskProc</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, wm_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = SockRcvTaskProc &rArr; recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Handle
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_wifi.o(.text)
</UL>
<P><STRONG><a name="[1c3]"></a>CreateUdpSock</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, wm_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = CreateUdpSock &rArr; closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketUdp
</UL>

<P><STRONG><a name="[1c6]"></a>SocketUdp</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, wm_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = SocketUdp &rArr; CreateUdpSock &rArr; closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateUdpSock
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WifiTaskProc
</UL>

<P><STRONG><a name="[c2]"></a>UserWlanStatusChangedEvent</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, wm_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UserWlanStatusChangedEvent &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_wifi.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>WifiTaskProc</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, wm_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = WifiTaskProc &rArr; oneshot_airkiss_send_reply &rArr; sendto &rArr; lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_receive
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_get_ethif
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oneshot_airkiss_send_reply
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SocketUdp
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserLcdBlink
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserLcdCtrl
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_wifi.o(.text)
</UL>
<P><STRONG><a name="[c3]"></a>KeyScanTimerProc</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, wm_wifi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = KeyScanTimerProc &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserLcdBlinkProc
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_read
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_gpio_cfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_wifi.o(.text)
</UL>
<P><STRONG><a name="[1d4]"></a>Read_Ack</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, wm_datahandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Read_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Meter
</UL>

<P><STRONG><a name="[1d3]"></a>Read_Meter</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, wm_datahandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Read_Meter &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; tls_i2c_wait_ack &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ack
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRelayStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Handle
</UL>

<P><STRONG><a name="[1d6]"></a>Write_Ack</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wm_datahandle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Meter
</UL>

<P><STRONG><a name="[1d5]"></a>Write_Meter</STRONG> (Thumb, 1154 bytes, Stack size 32 bytes, wm_datahandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Write_Meter &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; tls_os_time_delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Ack
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteDate
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRelayStatus
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserRelayCtrl
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Handle
</UL>

<P><STRONG><a name="[1d7]"></a>WriteV9261fReg</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, wm_meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = WriteV9261fReg &rArr; tls_uart_write &rArr; tls_uart_write_async &rArr; tls_uart_tx_chars_start &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_write
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MeterErrorRegPara_init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter_init
</UL>

<P><STRONG><a name="[1d9]"></a>MeterErrorRegPara_init</STRONG> (Thumb, 290 bytes, Stack size 40 bytes, wm_meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = MeterErrorRegPara_init &rArr; WriteV9261fReg &rArr; tls_uart_write &rArr; tls_uart_write_async &rArr; tls_uart_tx_chars_start &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteV9261fReg
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Meter_init
</UL>

<P><STRONG><a name="[1da]"></a>ReadV9261fReg</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, wm_meter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = ReadV9261fReg &rArr; tls_uart_write &rArr; tls_uart_write_async &rArr; tls_uart_tx_chars_start &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_write
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibCurrent
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadEnergy
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrent
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVoltage
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalibVoltage
</UL>

<P><STRONG><a name="[1ef]"></a>compare_ether_addr</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, dhcp_server.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_GetIpByMac
</UL>

<P><STRONG><a name="[c6]"></a>_DhcpTickHandle</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _DhcpTickHandle &rArr; sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dhcp_server.o(.text)
</UL>
<P><STRONG><a name="[1e2]"></a>_ClientTableLookup</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _ClientTableLookup &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
</UL>

<P><STRONG><a name="[1e3]"></a>_DHCPAckGenAndSend</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _DHCPAckGenAndSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_netif
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DhcpClientSMEHandle
</UL>

<P><STRONG><a name="[1ec]"></a>_DHCPOfferGenAndSend</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = _DHCPOfferGenAndSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_get_netif
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DhcpClientSMEHandle
</UL>

<P><STRONG><a name="[1ed]"></a>_CleanClientHistory</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _CleanClientHistory &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DhcpClientSMEHandle
</UL>

<P><STRONG><a name="[1f6]"></a>_DHCPNakGenAndSend</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = _DHCPNakGenAndSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
</UL>

<P><STRONG><a name="[1f5]"></a>_DhcpClientSMEHandle</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, dhcp_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = _DhcpClientSMEHandle &rArr; _DHCPOfferGenAndSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_CleanClientHistory
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPOfferGenAndSend
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DHCPAckGenAndSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHCPS_RecvCb
</UL>

<P><STRONG><a name="[1ff]"></a>_DNSAnswerGenAndSend</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, dns_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = _DNSAnswerGenAndSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_RecvCb
</UL>

<P><STRONG><a name="[202]"></a>_DNSNameErrGenAndSend</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, dns_server.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = _DNSNameErrGenAndSend &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DNSS_RecvCb
</UL>

<P><STRONG><a name="[212]"></a>tls_wifi_clear_oneshot_info</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = tls_wifi_clear_oneshot_info &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_init_data
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_stop_clear_data
</UL>

<P><STRONG><a name="[224]"></a>tls_compare_ether_addr</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_compare_mac_addr
</UL>

<P><STRONG><a name="[223]"></a>tls_wifi_compare_mac_addr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_wifi_compare_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_broadcast
</UL>

<P><STRONG><a name="[227]"></a>ieee80211_get_SA</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_broadcast
</UL>

<P><STRONG><a name="[228]"></a>ieee80211_get_DA</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_broadcast
</UL>

<P><STRONG><a name="[22f]"></a>tls_is_zero_ether_addr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_probe
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_lsd_oneshot
</UL>

<P><STRONG><a name="[23b]"></a>wifi_change_chanel</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_wifi_oneshot.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = wifi_change_chanel &rArr; tls_wl_change_channel_info &rArr; ieee80211_hw_config &rArr; tls_wl_hw_config &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_change_channel_info
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_task_handle
</UL>

<P><STRONG><a name="[153]"></a>oneshot_airkiss_printf</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wm_oneshot_airkiss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = oneshot_airkiss_printf &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_oneshot_airkiss.o(.constdata)
</UL>
<P><STRONG><a name="[24f]"></a>airkiss_lan_send</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, wm_oneshot_airkiss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = airkiss_lan_send &rArr; sendto &rArr; lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_lan_pack
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_lan_task
</UL>

<P><STRONG><a name="[ca]"></a>airkiss_lan_task</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, wm_oneshot_airkiss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = airkiss_lan_task &rArr; airkiss_lan_select_recv &rArr; recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_get_ethif
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_lan_recv
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_lan_select_recv
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_lan_send
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htons
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_htonl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_oneshot_airkiss.o(.text)
</UL>
<P><STRONG><a name="[24d]"></a>oneshot_airkiss_finish</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, wm_oneshot_airkiss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = oneshot_airkiss_finish &rArr; tls_wifi_connect_by_ssid_bssid &rArr; wpa_update_key &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_get_result
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect_by_ssid_bssid
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_connect
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_oneshot_is_ssid_bssid_match
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_airkiss_recv
</UL>

<P><STRONG><a name="[251]"></a>airkiss_lan_select_recv</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, wm_oneshot_airkiss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = airkiss_lan_select_recv &rArr; recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_lan_task
</UL>

<P><STRONG><a name="[cb]"></a>ResetTimerProc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[303]"></a>alloc_recvmit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = alloc_recvmit &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_recvmit
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_state_changed_ATCMD
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_state_changed
</UL>

<P><STRONG><a name="[304]"></a>free_recvmit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = free_recvmit &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_recvmit
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_close_socket
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_close_default_socket
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_socket_state_changed_ATCMD
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_state_changed
</UL>

<P><STRONG><a name="[307]"></a>hostif_default_socket_create_tmr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hostif_default_socket_create_tmr &rArr; tls_os_timer_change &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_create
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_create_default_socket
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_net_status_changed
</UL>

<P><STRONG><a name="[cf]"></a>hostif_default_socket_state_changed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hostif_default_socket_state_changed &rArr; alloc_recvmit &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_recvmit
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_recvmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>hostif_default_socket_err</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = hostif_default_socket_err &rArr; tls_os_timer_change &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_auto_mode
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[cd]"></a>hostif_socket_recv</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hostif_socket_recv &rArr; tls_cmd_get_socket_state &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_get_socket_state
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_recv_data
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_tx_msg
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[cc]"></a>hostif_default_socket_setup</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = hostif_default_socket_setup &rArr; tls_hostif_create_default_socket &rArr; tls_socket_create &rArr; net_alloc_socket &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_create_default_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>hostif_socket_rpt_handle</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hostif_socket_rpt_handle &rArr; tls_hostif_process_cmdrsp &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_recvmit
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[d1]"></a>hostif_socket_rpt</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = hostif_socket_rpt &rArr; tls_wl_task_callback &rArr; tls_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[d3]"></a>hostif_socket_state_changed_ATCMD</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hostif_socket_state_changed_ATCMD &rArr; tls_hostif_send_event_tcp_dis &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_dis
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_join
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_recvmit
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_recvmit
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[d2]"></a>hostif_socket_state_changed_RICMD</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hostif_socket_state_changed_RICMD &rArr; tls_hostif_send_event_tcp_conn &rArr; tls_hostif_send_event &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_dis
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_join
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_tcp_conn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[d4]"></a>tls_hostif_net_status_changed</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tls_hostif_net_status_changed &rArr; tls_hostif_send_event_wjoin_success &rArr; tls_wifi_get_current_bss &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_linkdown
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_failed
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_wjoin_success
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event_port_check
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_event
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_stop_tmr
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostif_default_socket_create_tmr
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>ping_proc</STRONG> (Thumb, 68 bytes, Stack size 80 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = ping_proc &rArr; ping_test_create_task &rArr; tls_os_task_create &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_stop
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_start
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_create_task
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.data)
</UL>
<P><STRONG><a name="[344]"></a>hspi_socket_recv</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hspi_socket_recv &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_fill_hdr
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_tx
</UL>

<P><STRONG><a name="[d7]"></a>hspi_tx</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hspi_tx &rArr; hspi_socket_recv &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_socket_recv
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[345]"></a>hspi_fwup_rsp</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = hspi_fwup_rsp &rArr; tls_hostif_process_cmdrsp &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_rx_data
</UL>

<P><STRONG><a name="[d6]"></a>hspi_rx_data</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = hspi_rx_data &rArr; tls_hostif_send_data &rArr; tls_socket_send &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_send_data
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hspi_fwup_rsp
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_sync
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_get_current_session_id
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_current_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[d5]"></a>hspi_rx_cmd</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = hspi_rx_cmd &rArr; tls_hostif_cmd_handler &rArr; tls_hostif_atcmd_exec &rArr; at_parse_func &rArr; string_to_ipaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[d8]"></a>tls_hspi_rx_cmd_cb</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tls_hspi_rx_cmd_cb &rArr; tls_wl_task_callback_static &rArr; tls_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback_static
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>tls_hspi_rx_data_cb</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = tls_hspi_rx_data_cb &rArr; tls_wl_task_callback_static &rArr; tls_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback_static
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[da]"></a>tls_hspi_tx_data_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[db]"></a>hspi_send_tx_msg</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = hspi_send_tx_msg &rArr; tls_wl_task_callback &rArr; tls_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_tx_msg_buffer
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[e2]"></a>uart_send_tx_msg</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = uart_send_tx_msg &rArr; tls_wl_task_callback &rArr; tls_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_tx_msg_buffer
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[e3]"></a>uart_get_uart1_port</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[e4]"></a>uart_set_uart1_mode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = uart_set_uart1_mode &rArr; tls_uart_set_fc_status &rArr; tls_uart_tx_chars &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_fc_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[e1]"></a>uart_set_uart0_mode</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = uart_set_uart0_mode &rArr; tls_uart_set_fc_status &rArr; tls_uart_tx_chars &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_fc_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>uart_set_uart1_sock_param</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[df]"></a>tls_timer2_isr</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tls_timer2_isr &rArr; tls_wl_task_callback_static &rArr; tls_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback_static
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timer2_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[35c]"></a>uart_fwup_rsp</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = uart_fwup_rsp &rArr; tls_hostif_process_cmdrsp &rArr; tls_hostif_get_tx_msg &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_process_cmdrsp
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_fwup_send
</UL>

<P><STRONG><a name="[360]"></a>find_atcmd_eol</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = find_atcmd_eol
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memchr
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_atcmd_eol
</UL>

<P><STRONG><a name="[362]"></a>parse_atcmd_eol</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = parse_atcmd_eol &rArr; find_atcmd_eol
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modify_atcmd_tail
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_atcmd_eol
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_atcmd_line
</UL>

<P><STRONG><a name="[e0]"></a>tls_uart0_task_rx_cb</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tls_uart0_task_rx_cb &rArr; tls_wl_task_callback_static &rArr; tls_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_task_callback_static
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_fc_status
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_atcmd_line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[364]"></a>parse_atcmd_line</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = parse_atcmd_line &rArr; tls_hostif_cmd_handler &rArr; tls_hostif_atcmd_exec &rArr; at_parse_func &rArr; string_to_ipaddr &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_string
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_cmd_handler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart0_task_rx_cb
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_atcmd_eol
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart1_task_rx_cb
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx
</UL>

<P><STRONG><a name="[2eb]"></a>get_unaligned_le32</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_parse_func
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_format_func
</UL>

<P><STRONG><a name="[2ec]"></a>put_unaligned_le16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_format_func
</UL>

<P><STRONG><a name="[2ea]"></a>put_unaligned_be16</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ri_format_func
</UL>

<P><STRONG><a name="[311]"></a>hostif_default_socket_stop_tmr</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = hostif_default_socket_stop_tmr &rArr; tls_hostif_close_default_socket &rArr; tls_socket_close &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_close_default_socket
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_net_status_changed
</UL>

<P><STRONG><a name="[330]"></a>atcmd_lpinit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = atcmd_lpinit &rArr; tls_cmd_disconnect_network &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_cmd_disconnect_network
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_litepoint_start
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lprstr_proc
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lptstr_proc
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpchl_proc
</UL>

<P><STRONG><a name="[dc]"></a>uart_tx_socket_finish_callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = uart_tx_socket_finish_callback &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_cmd.o(.text)
</UL>
<P><STRONG><a name="[351]"></a>cache_tcp_recv</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, wm_cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = cache_tcp_recv &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hostif_get_recvmit
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
</UL>
<BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx
</UL>

<P><STRONG><a name="[363]"></a>modify_atcmd_tail</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wm_cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_atcmd_eol
</UL>

<P><STRONG><a name="[37a]"></a>prvListTaskWithinSingleList1</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetTaskByPriority
</UL>

<P><STRONG><a name="[388]"></a>prvUnlockQueue</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[389]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[38e]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[390]"></a>prvCopyDataToQueue</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[39d]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreate
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateExt
</UL>

<P><STRONG><a name="[3a4]"></a>prvListTaskWithinSingleList</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usTaskCheckFreeStackSpace
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
</UL>

<P><STRONG><a name="[3aa]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[3ab]"></a>prvSampleTimeNow</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[e6]"></a>prvTimerTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_rtos.o(.text)
</UL>
<P><STRONG><a name="[e7]"></a>prvIdleTask</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_watchdog_clr
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_rtos.o(.text)
</UL>
<P><STRONG><a name="[3c3]"></a>prvCheckDelayedList</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portENABLE_INTERRUPTS
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;portDISABLE_INTERRUPTS
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vCoRoutineSchedule
</UL>

<P><STRONG><a name="[3a5]"></a>usTaskCheckFreeStackSpace</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm_rtos.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetStackHighWaterMark
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTaskWithinSingleList
</UL>

<P><STRONG><a name="[3ac]"></a>prvSwitchTimerLists</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[3b0]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[3af]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[3b3]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, wm_rtos.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListRemove
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[3cb]"></a>free_socket</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = free_socket &rArr; netbuf_delete &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[ed]"></a>err_tcp</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = err_tcp &rArr; sys_mbox_trypost &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[e9]"></a>ipfrag_free_pbuf_custom</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ipfrag_free_pbuf_custom &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_frag_free_pbuf_custom_ref
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[e8]"></a>pbuf_free_ooseq_callback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = pbuf_free_ooseq_callback &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[3dc]"></a>pbuf_pool_is_empty</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>

<P><STRONG><a name="[3e1]"></a>pbuf_header_impl</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pbuf_header_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header_force
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
</UL>

<P><STRONG><a name="[3e9]"></a>tcp_output_segment</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_chksum_pseudo
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>

<P><STRONG><a name="[3ea]"></a>tcp_output_alloc_header</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = tcp_output_alloc_header &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_zero_window_probe
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_keepalive
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
</UL>

<P><STRONG><a name="[3ed]"></a>tcp_create_segment</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tcp_create_segment &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[3ee]"></a>tcp_pbuf_prealloc</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = tcp_pbuf_prealloc &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
</UL>

<P><STRONG><a name="[3f1]"></a>lwip_netconn_do_writemore</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lwip_netconn_do_writemore &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_write
</UL>

<P><STRONG><a name="[ec]"></a>poll_tcp</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = poll_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[eb]"></a>sent_tcp</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = sent_tcp &rArr; lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close_internal
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_writemore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[3fb]"></a>tcp_close_shutdown_fin</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_fin
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_backlog_accepted
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_fasttmr
</UL>

<P><STRONG><a name="[ea]"></a>tcpip_tcp_timer</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = tcpip_tcp_timer &rArr; tcp_tmr &rArr; tcp_fasttmr &rArr; tcp_process_refused_data &rArr; tcp_recv_null &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_p
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_tmr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[402]"></a>tcp_close_shutdown</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close_shutdown_fin
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_trigger_input_pcb_close
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>

<P><STRONG><a name="[3f2]"></a>lwip_netconn_do_close_internal</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = lwip_netconn_do_close_internal &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sent_tcp
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;poll_tcp
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</UL>

<P><STRONG><a name="[40f]"></a>netconn_drain</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600 + In Cycle
<LI>Call Chain = netconn_drain &rArr;  netconn_drain (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_drain
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_close
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_delconn
</UL>

<P><STRONG><a name="[418]"></a>alloc_socket</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = alloc_socket &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[41b]"></a>get_socket</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_unregister_membership
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_drop_registered_memberships
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_callback
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getaddrname
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendmsg
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_fcntl
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_ioctl
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_send
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_sendto
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_listen
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_connect
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_shutdown
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_bind
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_accept
</UL>

<P><STRONG><a name="[422]"></a>tcp_new_port</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tcp_new_port
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
</UL>

<P><STRONG><a name="[42b]"></a>igmp_send</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = igmp_send &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if_opt
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_tmr
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup_netif
</UL>

<P><STRONG><a name="[42f]"></a>igmp_lookup_group</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = igmp_lookup_group &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_lookfor_group
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
</UL>

<P><STRONG><a name="[ee]"></a>recv_tcp</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = recv_tcp &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[437]"></a>setup_tcp</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pcb_new
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accept_function
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connected
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_connect
</UL>

<P><STRONG><a name="[ef]"></a>lwip_netconn_do_connected</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lwip_netconn_do_connected &rArr; sys_sem_signal &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[443]"></a>lwip_getaddrname</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getpeername
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockname
</UL>

<P><STRONG><a name="[448]"></a>lwip_setsockopt_impl</STRONG> (Thumb, 524 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lwip_setsockopt_impl &rArr; igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_socket_unregister_membership
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_leavegroup
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_callback
</UL>

<P><STRONG><a name="[f0]"></a>lwip_setsockopt_callback</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = lwip_setsockopt_callback &rArr; lwip_setsockopt_impl &rArr; igmp_leavegroup &rArr; igmp_leavegroup_netif &rArr; igmp_send &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[44d]"></a>lwip_getsockopt_impl</STRONG> (Thumb, 516 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lwip_getsockopt_impl
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;err_to_errno
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_callback
</UL>

<P><STRONG><a name="[f1]"></a>lwip_getsockopt_callback</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lwip_getsockopt_callback &rArr; sys_sem_signal &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_impl
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[f3]"></a>accept_function</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = accept_function &rArr; sys_mbox_trypost &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_alloc
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_backlog_delayed
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_free
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[f2]"></a>tcp_accept_null</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = tcp_accept_null &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[f5]"></a>event_callback</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = event_callback &rArr; sys_sem_signal &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_recvfrom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[45a]"></a>netconn_recv_data</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_tcp_pbuf
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv
</UL>

<P><STRONG><a name="[472]"></a>tcp_kill_state</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = tcp_kill_state &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[473]"></a>tcp_kill_timewait</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>

<P><STRONG><a name="[119]"></a>recv_udp</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = recv_udp &rArr; sys_mbox_trypost &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[118]"></a>recv_raw</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = recv_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_valid
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mbox_trypost
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netbuf_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[47e]"></a>lwip_selscan</STRONG> (Thumb, 356 bytes, Stack size 80 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lwip_selscan &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tryget_socket
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[f6]"></a>lwip_netconn_do_dns_found</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lwip_netconn_do_dns_found &rArr; sys_sem_signal &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[488]"></a>dns_call_found</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
</UL>

<P><STRONG><a name="[489]"></a>dns_send</STRONG> (Thumb, 256 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_put_at
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take_at
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
</UL>

<P><STRONG><a name="[48a]"></a>dns_check_entry</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_send
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_tmr
</UL>

<P><STRONG><a name="[11a]"></a>dns_recv</STRONG> (Thumb, 472 bytes, Stack size 72 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = dns_recv &rArr; dns_call_found &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_compare_name
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_call_found
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[48e]"></a>dns_enqueue</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = dns_enqueue &rArr; dns_check_entry &rArr; dns_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_alloc_pcb
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_check_entry
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_strnicmp
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_gethostbyname_addrtype
</UL>

<P><STRONG><a name="[505]"></a>compare_ether_addr</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_gre_proc
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_icmp_proc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[498]"></a>net_free_socket</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_create
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_connect
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_create_connect
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close_connect
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_poll_cb
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_err_cb
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_alloc_socket
</UL>

<P><STRONG><a name="[49b]"></a>net_alloc_socket</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = net_alloc_socket &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_new
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_create
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_accept_cb
</UL>

<P><STRONG><a name="[f8]"></a>net_tcp_err_cb</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = net_tcp_err_cb &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send_event_to_hostif
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_recv_cb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[f7]"></a>net_tcp_poll_cb</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = net_tcp_poll_cb &rArr; net_tcp_close_connect &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send_event_to_hostif
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close_connect
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_conn
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[49d]"></a>net_tcp_close_connect</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = net_tcp_close_connect &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_shutdown
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_close_connect
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_poll_cb
</UL>

<P><STRONG><a name="[f9]"></a>raw_sk_free_pbuf_custom_fn</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = raw_sk_free_pbuf_custom_fn &rArr; tcp_recved &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sk_free_pbuf_custom
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recved
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[fa]"></a>net_tcp_recv_cb</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = net_tcp_recv_cb &rArr; net_tcp_err_cb &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sk_free_pbuf_custom
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_err_cb
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_conn
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloced_custom
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[fb]"></a>net_tcp_connect_cb</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = net_tcp_connect_cb &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send_event_to_hostif
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[fc]"></a>net_tcp_accept_cb</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = net_tcp_accept_cb &rArr; net_alloc_socket &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send_event_to_hostif
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_alloc_socket
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[fd]"></a>net_udp_recv_cb</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = net_udp_recv_cb &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[4a2]"></a>net_tcp_start</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = net_tcp_start &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_new
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_with_backlog
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_connect
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_bind
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_create_connect
</UL>

<P><STRONG><a name="[100]"></a>net_do_send</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = net_do_send &rArr; udp_sendto &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_send
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[101]"></a>net_do_write</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = net_do_write &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_conn
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_write
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[fe]"></a>do_create_connect</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = do_create_connect &rArr; net_tcp_start &rArr; tcp_new &rArr; tcp_alloc &rArr; tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send_event_to_hostif
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_start
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[ff]"></a>do_close_connect</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = do_close_connect &rArr; net_tcp_close_connect &rArr; net_free_socket &rArr; tcp_close &rArr; tcp_close_shutdown &rArr; tcp_close_shutdown_fin &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_close_connect
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[4a4]"></a>netconn_msg</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = netconn_msg &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_net_get_socket
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_sem_wait
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_callback_with_block
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_send
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_socket_udp_sendto
</UL>

<P><STRONG><a name="[102]"></a>alg_timer</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = alg_timer &rArr; sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_p
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_event_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[103]"></a>cyclic_timer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = cyclic_timer &rArr; sys_timeout_p &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeout_p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[4b6]"></a>icmp_send_response</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_route
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_output_if
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_dest_unreach
</UL>

<P><STRONG><a name="[4bd]"></a>tcp_input_delayed_close</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = tcp_input_delayed_close &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_remove
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[4bf]"></a>tcp_oos_insert_segment</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tcp_oos_insert_segment &rArr; tcp_segs_free &rArr; tcp_seg_free &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_segs_free
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
</UL>

<P><STRONG><a name="[4c2]"></a>tcp_receive</STRONG> (Thumb, 1592 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = tcp_receive &rArr; tcp_send_empty_ack &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_oos_insert_segment
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_fast
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_copy
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_update_rcv_ann_wnd
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_empty_ack
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_header
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_cat
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[4c4]"></a>tcp_getoptbyte</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tcp_getoptbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
</UL>

<P><STRONG><a name="[4c3]"></a>tcp_parseopt</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tcp_parseopt &rArr; tcp_getoptbyte
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_getoptbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_listen_input
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_process
</UL>

<P><STRONG><a name="[4c5]"></a>tcp_process</STRONG> (Thumb, 866 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = tcp_process &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_receive
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rexmit_rto
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_pcb_purge
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_backlog_accepted
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_seg_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[4c6]"></a>tcp_listen_input</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = tcp_listen_input &rArr; tcp_alloc &rArr; tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_parseopt
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_next_iss
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_timer_needed
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_enqueue_flags
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abandon
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_eff_send_mss_impl
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[4cb]"></a>ip_reass_chain_frag_into_datagram_and_validate</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ip_reass_chain_frag_into_datagram_and_validate &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[4cd]"></a>ip_reass_free_complete_datagram</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_dequeue_datagram
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icmp_time_exceeded
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_clen
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_remove_oldest_datagram
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_tmr
</UL>

<P><STRONG><a name="[4cf]"></a>ip_reass_remove_oldest_datagram</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ip_reass_remove_oldest_datagram &rArr; ip_reass_free_complete_datagram &rArr; icmp_time_exceeded &rArr; icmp_send_response &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[4d2]"></a>etharp_raw</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_input
</UL>

<P><STRONG><a name="[4d3]"></a>etharp_free_entry</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_entry
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_tmr
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_cleanup_netif
</UL>

<P><STRONG><a name="[4d4]"></a>etharp_find_entry</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = etharp_find_entry &rArr; etharp_free_entry &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_free_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_update_arp_entry
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_query
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_find_addr
</UL>

<P><STRONG><a name="[4db]"></a>netif_issue_reports</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = netif_issue_reports &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
</UL>
<BR>[Called By]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_link_up
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_up
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_ipaddr
</UL>

<P><STRONG><a name="[4ee]"></a>dhcp_option_trailer</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[4e8]"></a>dhcp_create_msg</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dhcp_create_msg &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[4eb]"></a>dhcp_discover</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = dhcp_discover &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
</UL>

<P><STRONG><a name="[4f1]"></a>dhcp_option_long</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_long
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
</UL>

<P><STRONG><a name="[4f0]"></a>dhcp_reboot</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_network_changed
</UL>

<P><STRONG><a name="[50d]"></a>alg_napt_port_alloc</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = alg_napt_port_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
</UL>

<P><STRONG><a name="[502]"></a>alg_tcpudphdr_chksum</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = alg_tcpudphdr_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_hdr_16bitsum
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
</UL>

<P><STRONG><a name="[504]"></a>alg_output</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = alg_output &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_take
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_gre_proc
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_icmp_proc
</UL>

<P><STRONG><a name="[507]"></a>alg_icmp_proc</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = alg_icmp_proc &rArr; alg_deliver2lwip &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_deliver2lwip
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_iphdr_chksum
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_insert_4ic
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_output
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_input
</UL>

<P><STRONG><a name="[50b]"></a>alg_tcp_proc</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = alg_tcp_proc &rArr; alg_deliver2lwip &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_deliver2lwip
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_iphdr_chksum
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_is_full
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_output
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcpudphdr_chksum
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_port_alloc
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_mac
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_input
</UL>

<P><STRONG><a name="[50e]"></a>alg_udp_proc</STRONG> (Thumb, 508 bytes, Stack size 64 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = alg_udp_proc &rArr; alg_deliver2lwip &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_deliver2lwip
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_iphdr_chksum
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_is_full
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_output
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcpudphdr_chksum
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_port_alloc
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_mac
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_getserver
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_input
</UL>

<P><STRONG><a name="[50f]"></a>alg_gre_proc</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = alg_gre_proc &rArr; alg_output &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_iphdr_chksum
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_output
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_mac
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_input
</UL>

<P><STRONG><a name="[513]"></a>dhcp_select</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = dhcp_select &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_long
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if_src
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_fine_tmr
</UL>

<P><STRONG><a name="[514]"></a>dhcp_bind</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = dhcp_bind &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[515]"></a>dhcp_handle_ack</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dhcp_handle_ack
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_setserver
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[517]"></a>dhcp_parse_reply</STRONG> (Thumb, 562 bytes, Stack size 64 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dhcp_parse_reply &rArr; pbuf_copy_partial &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_copy_partial
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
</UL>

<P><STRONG><a name="[104]"></a>dhcp_recv</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = dhcp_recv &rArr; dhcp_bind &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_parse_reply
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_handle_ack
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[518]"></a>dhcp_inc_pcb_refcount</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dhcp_inc_pcb_refcount &rArr; udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
</UL>

<P><STRONG><a name="[519]"></a>dhcp_dec_pcb_refcount</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = dhcp_dec_pcb_refcount &rArr; udp_remove &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_start
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
</UL>

<P><STRONG><a name="[524]"></a>etharp_output_to_arp_index</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = etharp_output_to_arp_index &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request_dst
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernet_output
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
</UL>

<P><STRONG><a name="[105]"></a>low_level_output</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = low_level_output &rArr; tls_wifi_buffer_release &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_release
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_acquire
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[106]"></a>ethernetif_igmp_mac_filter</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ethernetif_igmp_mac_filter &rArr; tls_hw_set_multicast_key &rArr; hed_hw_set_multicast_key &rArr; hed_sec_set_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hw_set_multicast_key
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_hw_del_multicast_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[110]"></a>netif_status_changed</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netif_status_changed
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_oneshot_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[10e]"></a>netif_status_changed2</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = netif_status_changed2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[111]"></a>wifi_status_changed</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wifi_status_changed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[107]"></a>netifapi_do_netif_common</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = netifapi_do_netif_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[10a]"></a>netifapi_do_netif_add</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = netifapi_do_netif_add &rArr; netif_add &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[10b]"></a>tcpip_thread</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = tcpip_thread &rArr; etharp_output &rArr; etharp_query &rArr; etharp_request &rArr; etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_timeouts_mbox_fetch_p
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sem_signal
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[112]"></a>netifapi_do_netif_set_addr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = netifapi_do_netif_set_addr &rArr; netif_set_addr &rArr; netif_set_ipaddr &rArr; tcp_netif_ip_addr_changed &rArr; tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netif_set_addr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[115]"></a>pbuf_free_int</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pbuf_free_int &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lwip2.0.3.o(.text)
</UL>
<P><STRONG><a name="[3c9]"></a>do_memp_free_pool</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free_pool
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>

<P><STRONG><a name="[3d4]"></a>ip_frag_free_pbuf_custom_ref</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ip_frag_free_pbuf_custom_ref &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipfrag_free_pbuf_custom
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_frag
</UL>

<P><STRONG><a name="[3d8]"></a>do_memp_malloc_pool</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc_pool
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_malloc
</UL>

<P><STRONG><a name="[415]"></a>netconn_apimsg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcpip_send_msg_wait_sem
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close_shutdown
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_new_with_proto_and_callback
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_send
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_write_partly
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_listen_with_backlog
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_disconnect
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_connect
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_bind
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_accept
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_getaddr
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_delete
</UL>

<P><STRONG><a name="[428]"></a>netconn_close_shutdown</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_apimsg
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_recv_data
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_close
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_shutdown
</UL>

<P><STRONG><a name="[431]"></a>igmp_start_timer</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = igmp_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_delaying_member
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_joingroup_netif
</UL>

<P><STRONG><a name="[436]"></a>lwip_socket_drop_registered_memberships</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;netconn_join_leave_group
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_close
</UL>

<P><STRONG><a name="[44a]"></a>lwip_socket_unregister_membership</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lwip_socket_unregister_membership &rArr; get_socket
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
</UL>

<P><STRONG><a name="[449]"></a>tryget_socket</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_selscan
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_getsockopt_impl
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_setsockopt_impl
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_select
</UL>

<P><STRONG><a name="[47b]"></a>pcb_new</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = pcb_new &rArr; tcp_alloc &rArr; tcp_kill_timewait &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_tcp
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_new
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_netconn_do_newconn
</UL>

<P><STRONG><a name="[485]"></a>pbuf_skip_const</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_skip
</UL>

<P><STRONG><a name="[48d]"></a>dns_compare_name</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = dns_compare_name &rArr; pbuf_try_get_at
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_try_get_at
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_recv
</UL>

<P><STRONG><a name="[490]"></a>dns_alloc_pcb</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dns_alloc_pcb &rArr; udp_new &rArr; memp_malloc &rArr; do_memp_malloc_pool &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_remove
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_new
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_bind
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dns_enqueue
</UL>

<P><STRONG><a name="[49f]"></a>dl_list_add_tail</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_add_status_event
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_accept_cb
</UL>

<P><STRONG><a name="[49a]"></a>dl_list_del</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_remove_status_event
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_free_socket
</UL>

<P><STRONG><a name="[497]"></a>dl_list_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_remove_status_event
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_server_conn
</UL>

<P><STRONG><a name="[49c]"></a>net_send_event_to_hostif</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_create_connect
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_accept_cb
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_connect_cb
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_poll_cb
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_err_cb
</UL>

<P><STRONG><a name="[49e]"></a>raw_sk_free_pbuf_custom</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = raw_sk_free_pbuf_custom &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_tcp_recv_cb
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sk_free_pbuf_custom_fn
</UL>

<P><STRONG><a name="[4ac]"></a>alg_napt_table_check_4ic</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = alg_napt_table_check_4ic &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_event_handle
</UL>

<P><STRONG><a name="[4ab]"></a>alg_napt_table_check_4udp</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = alg_napt_table_check_4udp &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_event_handle
</UL>

<P><STRONG><a name="[4aa]"></a>alg_napt_table_check_4tcp</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = alg_napt_table_check_4tcp &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_event_handle
</UL>

<P><STRONG><a name="[4ba]"></a>igmp_delaying_member</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = igmp_delaying_member &rArr; igmp_start_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_report_groups
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;igmp_input
</UL>

<P><STRONG><a name="[4c8]"></a>tcp_timewait_input</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = tcp_timewait_input &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_rst
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_output
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_input
</UL>

<P><STRONG><a name="[4ce]"></a>ip_reass_dequeue_datagram</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ip_reass_dequeue_datagram &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_reass_free_complete_datagram
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4_reass
</UL>

<P><STRONG><a name="[4da]"></a>etharp_request_dst</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = etharp_request_dst &rArr; etharp_raw &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_raw
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_output_to_arp_index
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;etharp_request
</UL>

<P><STRONG><a name="[4dd]"></a>tcp_netif_ip_addr_changed_pcblist</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = tcp_netif_ip_addr_changed_pcblist &rArr; tcp_abort &rArr; tcp_abandon &rArr; tcp_pcb_remove &rArr; tcp_output &rArr; tcp_output_segment &rArr; ip4_output_if &rArr; ip4_output_if_opt &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_netif_ip_addr_changed
</UL>

<P><STRONG><a name="[4ef]"></a>dhcp_delete_msg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dhcp_delete_msg &rArr; pbuf_free &rArr; memp_free &rArr; do_memp_free_pool &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[4ea]"></a>dhcp_option_byte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[4e9]"></a>dhcp_option</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[4ed]"></a>dhcp_option_short</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dhcp_option_short
</UL>
<BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[4ec]"></a>dhcp_set_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_rebind
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_recv
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_bind
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_select
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_reboot
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_discover
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_inform
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_stop
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_release
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_renew
</UL>

<P><STRONG><a name="[4fd]"></a>inet_cksum_pseudo_partial_base</STRONG> (Thumb, 126 bytes, Stack size 28 bytes, lwip2.0.3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lwip_standard_chksum
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_chksum_pseudo_partial
</UL>

<P><STRONG><a name="[50c]"></a>alg_napt_table_is_full</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_insert_4ic
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
</UL>

<P><STRONG><a name="[508]"></a>alg_napt_table_insert_4ic</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = alg_napt_table_insert_4ic &rArr; mem_malloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_napt_table_is_full
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_icmp_proc
</UL>

<P><STRONG><a name="[503]"></a>alg_hdr_16bitsum</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_iphdr_chksum
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcpudphdr_chksum
</UL>

<P><STRONG><a name="[509]"></a>alg_iphdr_chksum</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = alg_iphdr_chksum
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_hdr_16bitsum
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_gre_proc
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_icmp_proc
</UL>

<P><STRONG><a name="[506]"></a>low_level_input</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_alloc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>

<P><STRONG><a name="[50a]"></a>alg_deliver2lwip</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = alg_deliver2lwip &rArr; ethernetif_input &rArr; low_level_input &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ethernetif_input
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_udp_proc
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_tcp_proc
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alg_icmp_proc
</UL>

<P><STRONG><a name="[51d]"></a>dhcp_rebind</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, lwip2.0.3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = dhcp_rebind &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbuf_realloc
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_set_state
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_short
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_byte
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_delete_msg
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_create_msg
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_option_trailer
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;udp_sendto_if
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_coarse_tmr
</UL>

<P><STRONG><a name="[576]"></a>tls_auto_reconnect_softap</STRONG> (Thumb, 180 bytes, Stack size 144 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = tls_auto_reconnect_softap &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_net_status_changed
</UL>

<P><STRONG><a name="[11d]"></a>sys_net_status_changed</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = sys_net_status_changed &rArr; tls_auto_reconnect_softap &rArr; tls_wifi_softap_create &rArr; wpa_update_key_4_ap2 &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_get_state
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_send_msg
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_auto_reconnect_softap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_sys.o(.text)
</UL>
<P><STRONG><a name="[579]"></a>sys_net_up</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, tls_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = sys_net_up &rArr; tls_netif_set_up &rArr; netif_set_link_up &rArr; dhcp_network_changed &rArr; dhcp_reboot &rArr; udp_sendto_if &rArr; udp_sendto_if_src &rArr; ip4_output_if_src &rArr; ip4_output_if_opt_src &rArr; ip4_frag &rArr; pbuf_alloc &rArr; pbuf_pool_is_empty &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_set_addr
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcp_stop
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dhcp_start
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_set_up
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_netif_dns_setserver
</UL>
<BR>[Called By]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_task
</UL>

<P><STRONG><a name="[57d]"></a>tls_uart_tx_chars</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = tls_uart_tx_chars &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_fc_status
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_handle_cts_change
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[587]"></a>uart_handle_cts_change</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = uart_handle_cts_change &rArr; tls_uart_tx_chars &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_enable
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[11e]"></a>uart_tx_finish_callback</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_tx_finish_callback &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.text)
</UL>
<P><STRONG><a name="[58f]"></a>timer_irq_callback</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_irq_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_IRQHandler
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM0_IRQHandler
</UL>

<P><STRONG><a name="[5a1]"></a>spi_set_mode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_start_transfer
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
</UL>

<P><STRONG><a name="[591]"></a>SpiMasterInit</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SpiMasterInit
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_setup
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_trans_type
</UL>

<P><STRONG><a name="[596]"></a>SpiDmaBlockWrite</STRONG> (Thumb, 408 bytes, Stack size 88 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SpiDmaBlockWrite &rArr; tls_dma_wait_complt &rArr; tls_os_time_delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_wait_complt
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_free
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWaitIdle
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_request
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write_with_cmd
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
</UL>

<P><STRONG><a name="[598]"></a>SpiDmaBlockRead</STRONG> (Thumb, 372 bytes, Stack size 80 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SpiDmaBlockRead &rArr; tls_dma_wait_complt &rArr; tls_os_time_delay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_wait_complt
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_free
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWaitIdle
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_request
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
</UL>

<P><STRONG><a name="[11f]"></a>spi_complete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = spi_complete &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.text)
</UL>
<P><STRONG><a name="[59b]"></a>spi_fill_txfifo</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spi_fill_txfifo &rArr; spi_get_status
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_scheduler
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
</UL>

<P><STRONG><a name="[59d]"></a>spi_get_rxfifo</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = spi_get_rxfifo &rArr; spi_get_status
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
</UL>

<P><STRONG><a name="[59e]"></a>spi_next_message</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_next_message &rArr; spi_next_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_next_transfer
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_scheduler
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
</UL>

<P><STRONG><a name="[5a0]"></a>spi_start_transfer</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = spi_start_transfer &rArr; spi_set_sclk
</UL>
<BR>[Calls]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_sclk
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_chipselect_mode
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_scheduler
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
</UL>

<P><STRONG><a name="[5a4]"></a>spi_continue_transfer</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = spi_continue_transfer &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_next_transfer
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_chipselect_mode
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_start_transfer
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_next_message
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_rxfifo
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_fill_txfifo
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_set
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_scheduler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_LS_IRQHandler
</UL>

<P><STRONG><a name="[120]"></a>spi_scheduler</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = spi_scheduler &rArr; spi_continue_transfer &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_receive
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_start_transfer
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_next_message
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_fill_txfifo
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.text)
</UL>
<P><STRONG><a name="[5db]"></a>programPage</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = programPage
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_flush_sector
</UL>

<P><STRONG><a name="[5e8]"></a>dma_irq_proc</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_irq_proc
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_dma_irq_clr
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Channel4_7_IRQHandler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Channel3_IRQHandler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Channel2_IRQHandler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Channel1_IRQHandler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Channel0_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>adc_dma_isr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.text)
</UL>
<P><STRONG><a name="[61a]"></a>tls_fls_flush_sector</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_fls_flush_sector &rArr; tls_fls_erase &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;programPage
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_fast_write
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_fast_write_destroy
</UL>

<P><STRONG><a name="[6a]"></a>tls_spifls_drv_read</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = tls_spifls_drv_read &rArr; tls_spi_read_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>tls_spifls_drv_fast_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>tls_spifls_drv_page_write</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = tls_spifls_drv_page_write &rArr; tls_spifls_drv_wait_flash_ready &rArr; tls_spi_read_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write_with_cmd
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_wait_flash_ready
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_wait_write_enable
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_write_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>tls_spifls_drv_erase</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = tls_spifls_drv_erase &rArr; tls_spifls_drv_wait_flash_ready &rArr; tls_spi_read_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_time_delay
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_wait_flash_ready
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_wait_write_enable
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_write_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.data)
</UL>
<P><STRONG><a name="[6e]"></a>tls_spifls_drv_chip_erase</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = tls_spifls_drv_chip_erase &rArr; tls_spifls_drv_wait_flash_ready &rArr; tls_spi_read_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_wait_flash_ready
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_wait_write_enable
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_write_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>tls_spifls_drv_probe</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>tls_spifls_drv_remove</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wm_driver.o(.data)
</UL>
<P><STRONG><a name="[5f4]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_nonblock
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_block
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_port_init
</UL>

<P><STRONG><a name="[5f2]"></a>tls_bitband_write</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tls_bitband_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart1_rx_config
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart0_rx_config
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_uart2_rx_config
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_deactive
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_colreset
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_rx_retry_times
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_sc_tx_retry_times
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lcd_init
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lcd_seg_set
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_callback
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma_callback
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma_callback
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma_config
<LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma_config
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_nonblock
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_nonblock
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_block
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_config
</UL>

<P><STRONG><a name="[5f0]"></a>tls_bitband_read</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tls_bitband_read
</UL>
<BR>[Called By]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lcd_seg_set
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_lcd_fresh_ratio
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma_callback
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_IRQHandler
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wm_i2s_set_freq_exclk
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_set_freq
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_fill_txfifo
</UL>

<P><STRONG><a name="[580]"></a>dl_list_add_tail</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars_start
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_fill_buf
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_register
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write_with_cmd
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_async
</UL>

<P><STRONG><a name="[57f]"></a>dl_list_del</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars_start
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_free_tx_sent_data
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars
</UL>

<P><STRONG><a name="[57e]"></a>dl_list_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars_start
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_free_tx_sent_data
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_next_transfer
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_next_message
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_tx_chars
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_async
</UL>

<P><STRONG><a name="[582]"></a>tls_uart_tx_enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_uart_set_fc_status
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_handle_cts_change
</UL>

<P><STRONG><a name="[59a]"></a>spi_set_endian</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_trans_type
</UL>

<P><STRONG><a name="[5a2]"></a>spi_set_chipselect_mode</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_start_transfer
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
</UL>

<P><STRONG><a name="[5a3]"></a>spi_set_sclk</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = spi_set_sclk
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_clk_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_start_transfer
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_init
</UL>

<P><STRONG><a name="[59c]"></a>spi_get_status</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_get_rxfifo
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_fill_txfifo
</UL>

<P><STRONG><a name="[5a9]"></a>spi_message_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_message_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write_with_cmd
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
</UL>

<P><STRONG><a name="[59f]"></a>spi_next_transfer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_next_transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_continue_transfer
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_next_message
</UL>

<P><STRONG><a name="[5d4]"></a>getFlashDensity</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_get_param
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_chip_erase
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_fast_write
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_erase
</UL>

<P><STRONG><a name="[5dc]"></a>writeEnable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;programPage
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eraseSector
</UL>

<P><STRONG><a name="[5dd]"></a>eraseSector</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eraseSector
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_chip_erase
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_erase
</UL>

<P><STRONG><a name="[5fc]"></a>tls_i2s_set_rxth</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma_config
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_nonblock
</UL>

<P><STRONG><a name="[5f9]"></a>tls_i2s_set_txth</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wm_driver.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma_config
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_nonblock
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_block
</UL>

<P><STRONG><a name="[5f7]"></a>tls_i2s_int_config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_dma_config
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_dma_config
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_rx_nonblock
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_nonblock
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_i2s_tx_block
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_IRQHandler
</UL>

<P><STRONG><a name="[5f6]"></a>tls_i2s_fill_txfifo</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = tls_i2s_fill_txfifo &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_bitband_read
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_IRQHandler
</UL>

<P><STRONG><a name="[628]"></a>tls_spifls_drv_write_enable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = tls_spifls_drv_write_enable &rArr; tls_spi_write &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_chip_erase
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_erase
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_page_write
</UL>

<P><STRONG><a name="[629]"></a>tls_spifls_drv_wait_write_enable</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = tls_spifls_drv_wait_write_enable &rArr; tls_spi_read_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_chip_erase
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_erase
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_page_write
</UL>

<P><STRONG><a name="[62a]"></a>tls_spifls_drv_wait_flash_ready</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wm_driver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = tls_spifls_drv_wait_flash_ready &rArr; tls_spi_read_with_cmd &rArr; tls_spi_sync &rArr; tls_spi_async &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spi_read_with_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_chip_erase
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_erase
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_spifls_drv_page_write
</UL>

<P><STRONG><a name="[647]"></a>img_header_check</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = img_header_check &rArr; tls_crypto_crc_update &rArr; Reflect
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_update
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_update_header
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
</UL>

<P><STRONG><a name="[122]"></a>fwup_scheduler</STRONG> (Thumb, 640 bytes, Stack size 72 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = fwup_scheduler &rArr; tls_wifi_auto_connect_flag &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_set_oneshot_flag
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_auto_connect_flag
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_receive
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_watchdog_clr
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_sys_reset
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_update_header
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_header_check
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_update
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_fast_write
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_fast_write_destroy
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_common.o(.text)
</UL>
<P><STRONG><a name="[123]"></a>task_thread</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = task_thread &rArr; tls_timeouts_mbox_fetch_p &rArr; tls_arch_mbox_fetch &rArr; tls_os_queue_receive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timeouts_mbox_fetch_p
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_timeout_p
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_untimeout_p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_common.o(.text)
</UL>
<P><STRONG><a name="[65e]"></a>_cal_crc32</STRONG> (Thumb, 1318 bytes, Stack size 252 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = _cal_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc32
</UL>

<P><STRONG><a name="[674]"></a>hd_sha1_compress</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hd_sha1_compress
</UL>
<BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_final
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_sha1_update
</UL>

<P><STRONG><a name="[677]"></a>hd_md5_compress</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hd_md5_compress
</UL>
<BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_final
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_md5_update
</UL>

<P><STRONG><a name="[679]"></a>rsaMulModRead</STRONG> (Thumb, 108 bytes, Stack size 272 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = rsaMulModRead &rArr; mp_read_unsigned_bin &rArr; mp_mul_2d &rArr; mp_copy &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reverse
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_read_unsigned_bin
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
</UL>

<P><STRONG><a name="[67d]"></a>rsaMulModWrite</STRONG> (Thumb, 76 bytes, Stack size 272 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = rsaMulModWrite &rArr; mp_to_unsigned_bin_nr &rArr; mp_div_2d &rArr; mp_mod_2d &rArr; mp_copy &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_to_unsigned_bin_nr
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
</UL>

<P><STRONG><a name="[6aa]"></a>parseGeneralNames</STRONG> (Thumb, 592 bytes, Stack size 48 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
</UL>

<P><STRONG><a name="[6ac]"></a>getImplicitBitString</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
</UL>

<P><STRONG><a name="[6ad]"></a>getTimeValidity</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
</UL>

<P><STRONG><a name="[6b2]"></a>x509ConfirmSignature</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnAlgorithmIdentifier
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnSequence
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnLength
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psError
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
</UL>

<P><STRONG><a name="[6c1]"></a>deskey</STRONG> (Thumb, 246 bytes, Stack size 288 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cookey
</UL>
<BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDesInitKey
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDes3InitKey
</UL>

<P><STRONG><a name="[6c5]"></a>desfunc</STRONG> (Thumb, 536 bytes, Stack size 36 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDesDecryptBlock
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDesEncryptBlock
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDes3DecryptBlock
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psDes3EncryptBlock
</UL>

<P><STRONG><a name="[6cb]"></a>param_to_flash</STRONG> (Thumb, 790 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_crc32
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_default
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_init
</UL>

<P><STRONG><a name="[64a]"></a>dl_list_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_async
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
</UL>

<P><STRONG><a name="[64b]"></a>img_update_header</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = img_update_header &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_write
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fls_read
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;img_header_check
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_crc_update
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwup_scheduler
</UL>

<P><STRONG><a name="[64f]"></a>tls_fwup_request_async</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, wm_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = tls_fwup_request_async &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_fwup_request_sync
</UL>

<P><STRONG><a name="[689]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_init
</UL>

<P><STRONG><a name="[688]"></a>rsaMonMulAB</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
</UL>

<P><STRONG><a name="[686]"></a>rsaMonMulBD</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wm_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_crypto_exptmod
</UL>

<P><STRONG><a name="[68b]"></a>_psError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psNewPubKey
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509AuthenticateCert
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509ParseCert
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getExplicitExtensions
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetDNAttributes
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSerialNum
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psX509GetSignature
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnRsaPubKey
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAsnConstructedOctetString
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Init
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Update
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha2Final
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Init
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Update
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacSha1Final
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Init
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Update
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psHmacMd5Final
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x509ConfirmSignature
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTimeValidity
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getImplicitBitString
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseGeneralNames
</UL>

<P><STRONG><a name="[6c2]"></a>cookey</STRONG> (Thumb, 132 bytes, Stack size 152 bytes, wm_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deskey
</UL>

<P><STRONG><a name="[6d0]"></a>HTTPIntrnSessionReset</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HTTPIntrnSessionReset &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetUpTime
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSetVerb
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientReset
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersReceive
</UL>

<P><STRONG><a name="[6d4]"></a>HTTPIntrnHeadersAdd</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HTTPIntrnHeadersAdd &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientAddRequestHeaders
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersSend
</UL>

<P><STRONG><a name="[6d7]"></a>HTTPIntrnSend</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = HTTPIntrnSend &rArr; send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetSocketError
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionEvalTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientWriteData
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersSend
</UL>

<P><STRONG><a name="[6dc]"></a>HTTPIntrnHeadersFind</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HTTPIntrnHeadersFind &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrCaseStr
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientGetNextHeader
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersParse
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersRemove
</UL>

<P><STRONG><a name="[6dd]"></a>HTTPIntrnHeadersRemove</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HTTPIntrnHeadersRemove &rArr; HTTPIntrnHeadersFind &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersFind
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersSend
</UL>

<P><STRONG><a name="[6de]"></a>HTTPIntrnHeadersSend</STRONG> (Thumb, 420 bytes, Stack size 80 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = HTTPIntrnHeadersSend &rArr; HTTPIntrnSend &rArr; send &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperItoa
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSetVerb
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersRemove
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSend
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersAdd
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
</UL>

<P><STRONG><a name="[6e2]"></a>HTTPIntrnConnectionOpen</STRONG> (Thumb, 354 bytes, Stack size 56 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = HTTPIntrnConnectionOpen &rArr; HTTPWrapperGetHostByName &rArr; gethostbyname &rArr; lwip_gethostbyname &rArr; netconn_gethostbyname &rArr; tcpip_callback_with_block &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bind
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetHostByName
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrExtract
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetSocketError
</UL>
<BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
</UL>

<P><STRONG><a name="[6e5]"></a>HTTPIntrnSetURL</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HTTPIntrnSetURL &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrSearch
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrInsensitiveCompare
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
</UL>

<P><STRONG><a name="[6e8]"></a>HTTPIntrnHeadersParse</STRONG> (Thumb, 664 bytes, Stack size 48 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTTPIntrnHeadersParse &rArr; HTTPIntrnHeadersFind &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrGetToken
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrInsensitiveCompare
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersFind
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersReceive
</UL>

<P><STRONG><a name="[6e9]"></a>HTTPIntrnRecv</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = HTTPIntrnRecv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetSocketError
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionEvalTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientReadData
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnGetRemoteChunkLength
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnGetRemoteHeaders
</UL>

<P><STRONG><a name="[6ea]"></a>HTTPIntrnHeadersReceive</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = HTTPIntrnHeadersReceive &rArr; HTTPIntrnGetRemoteHeaders &rArr; HTTPIntrnRecv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnGetRemoteHeaders
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersParse
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSessionReset
</UL>
<BR>[Called By]<UL><LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientWriteData
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientRecvResponse
</UL>

<P><STRONG><a name="[710]"></a>http_snd_req</STRONG> (Thumb, 306 bytes, Stack size 104 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = http_snd_req &rArr; tls_http_client_read_data &rArr; HTTPClientReadData &rArr; HTTPIntrnGetRemoteChunkLength &rArr; HTTPIntrnRecv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_find_first_header
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_read_data
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_recv_response
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_send_request
<LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_http_client_set_verb
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientFindCloseHeader
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientCloseRequest
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_client_rx
</UL>

<P><STRONG><a name="[124]"></a>http_client_rx</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = http_client_rx &rArr; http_snd_req &rArr; tls_http_client_read_data &rArr; HTTPClientReadData &rArr; HTTPIntrnGetRemoteChunkLength &rArr; HTTPIntrnRecv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_arch_mbox_fetch
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_snd_req
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wm_http_compile.o(.text)
</UL>
<P><STRONG><a name="[6d8]"></a>HTTPIntrnSessionEvalTimeout</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HTTPIntrnSessionEvalTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPWrapperGetUpTime
</UL>
<BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientSendRequest
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnRecv
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnSend
</UL>

<P><STRONG><a name="[6eb]"></a>HTTPIntrnGetRemoteHeaders</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = HTTPIntrnGetRemoteHeaders &rArr; HTTPIntrnRecv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnRecv
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnHeadersReceive
</UL>

<P><STRONG><a name="[6f2]"></a>HTTPIntrnGetRemoteChunkLength</STRONG> (Thumb, 136 bytes, Stack size 96 bytes, wm_http_compile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = HTTPIntrnGetRemoteChunkLength &rArr; HTTPIntrnRecv &rArr; recv &rArr; lwip_recv &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPStrHToL
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPIntrnRecv
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTPClientReadData
</UL>

<P><STRONG><a name="[712]"></a>ping_test_unpack</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ping_test_unpack &rArr; ip4addr_ntoa &rArr; ip4addr_ntoa_r
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_recv
</UL>

<P><STRONG><a name="[713]"></a>ping_test_init</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ping_test_init &rArr; closesocket &rArr; lwip_close &rArr; lwip_socket_drop_registered_memberships &rArr; netconn_join_leave_group &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip4addr_ntoa
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gethostbyname
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ipaddr_addr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_run
</UL>

<P><STRONG><a name="[714]"></a>ping_test_stat</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ping_test_stat &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_run
</UL>

<P><STRONG><a name="[125]"></a>ping_test_task</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = ping_test_task &rArr; ping_test_run &rArr; ping_test_recv &rArr; recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_receive
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ping.o(.text)
</UL>
<P><STRONG><a name="[126]"></a>ping_test_stop_timeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ping_test_stop_timeout &rArr; ping_test_stop &rArr; tls_os_timer_start &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ping.o(.text)
</UL>
<P><STRONG><a name="[127]"></a>ping_test_abort_timeout</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ping.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> ping.o(.text)
</UL>
<P><STRONG><a name="[718]"></a>ping_test_run</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ping_test_run &rArr; ping_test_recv &rArr; recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closesocket
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_send
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_recv
<LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_stat
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_init
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_task
</UL>

<P><STRONG><a name="[71a]"></a>ping_test_recv</STRONG> (Thumb, 156 bytes, Stack size 136 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ping_test_recv &rArr; recvfrom &rArr; lwip_recvfrom &rArr; netconn_recv &rArr; netconn_recv_data &rArr; netconn_close_shutdown &rArr; netconn_apimsg &rArr; tcpip_send_msg_wait_sem &rArr; sys_mbox_post &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recvfrom
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_unpack
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_run
</UL>

<P><STRONG><a name="[719]"></a>ping_test_send</STRONG> (Thumb, 88 bytes, Stack size 96 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ping_test_send &rArr; sendto &rArr; lwip_sendto &rArr; lwip_send &rArr;  lwip_sendto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_start
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendto
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_pack
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_run
</UL>

<P><STRONG><a name="[71b]"></a>ping_test_pack</STRONG> (Thumb, 520 bytes, Stack size 24 bytes, ping.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ping_test_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_test_send
</UL>

<P><STRONG><a name="[720]"></a>free_current_pack</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wm_socket_fwup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = free_current_pack &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_recv
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_fwup_err
</UL>

<P><STRONG><a name="[721]"></a>__airkiss_recv_guide_field</STRONG> (Thumb, 410 bytes, Stack size 48 bytes, airkiss_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __airkiss_recv_guide_field &rArr; __airkiss_crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__airkiss_crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__airkiss_recv
</UL>

<P><STRONG><a name="[723]"></a>__airkiss_recv</STRONG> (Thumb, 1488 bytes, Stack size 80 bytes, airkiss_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __airkiss_recv &rArr; __airkiss_recv_guide_field &rArr; __airkiss_crc8
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__airkiss_complete
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__airkiss_crc8
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__airkiss_recv_guide_field
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_recv
</UL>

<P><STRONG><a name="[722]"></a>__airkiss_crc8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, airkiss_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __airkiss_crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__airkiss_recv
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__airkiss_recv_guide_field
</UL>

<P><STRONG><a name="[724]"></a>__airkiss_complete</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, airkiss_log.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __airkiss_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__airkiss_recv
</UL>

<P><STRONG><a name="[725]"></a>__airkiss_lan_pack</STRONG> (Thumb, 314 bytes, Stack size 56 bytes, airlink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __airkiss_lan_pack
</UL>
<BR>[Calls]<UL><LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__airkiss_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_lan_pack
</UL>

<P><STRONG><a name="[726]"></a>__airkiss_strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, airlink.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__airkiss_lan_pack
</UL>

<P><STRONG><a name="[727]"></a>__airkiss_lan_recv</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, airlink.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __airkiss_lan_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;airkiss_lan_recv
</UL>

<P><STRONG><a name="[728]"></a>hostapd_alloc_ps_pkt</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = hostapd_alloc_ps_pkt &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ps_rx
</UL>

<P><STRONG><a name="[72f]"></a>hostapd_ap_destroy</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = hostapd_ap_destroy &rArr; hostapd_interface_deinit &rArr; hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; ap_free_sta &rArr; hostapd_drv_sta_remove &rArr; tls_wl_if_sta_remove &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_deinit_ap
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_interface_free
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_interface_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_create_ap
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_create_softap
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_init
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
</UL>

<P><STRONG><a name="[733]"></a>hostapd_config_defaults</STRONG> (Thumb, 330 bytes, Stack size 144 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = hostapd_config_defaults &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_init
</UL>

<P><STRONG><a name="[72c]"></a>dl_list_del</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_proc_beacon_done
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_check_ps_pkt
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_pkt2sta
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_all_pkt2sta
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_clean_ps_multicast
</UL>

<P><STRONG><a name="[73f]"></a>hostapd_send_all_pkt2sta</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = hostapd_send_all_pkt2sta &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_xmit
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_sta_flags
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_clear_unicast_ps_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
</UL>

<P><STRONG><a name="[740]"></a>hostapd_send_pkt2sta</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = hostapd_send_pkt2sta &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_xmit
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_sta_flags
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_clear_unicast_ps_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
</UL>

<P><STRONG><a name="[73b]"></a>hostapd_check_ps_pkt</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = hostapd_check_ps_pkt &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_clear_multicast_ps_bit
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_clear_unicast_ps_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
</UL>

<P><STRONG><a name="[73d]"></a>hostapd_proc_beacon_done</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = hostapd_proc_beacon_done &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_clear_multicast_ps_bit
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_empty
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_xmit
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
</UL>

<P><STRONG><a name="[73c]"></a>hostapd_ps_rx</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = hostapd_ps_rx &rArr; hostapd_alloc_ps_pkt &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_alloc_ps_pkt
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_tim_ie
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
</UL>

<P><STRONG><a name="[744]"></a>hostapd_create_softap</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = hostapd_create_softap &rArr; hostapd_create_ap &rArr; hostapd_setup_interface &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init_gmk_and_counter &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_create_ap
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ap_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_event_handle
</UL>

<P><STRONG><a name="[74b]"></a>dl_list_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_proc_beacon_done
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_check_ps_pkt
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_pkt2sta
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_send_all_pkt2sta
</UL>

<P><STRONG><a name="[74e]"></a>hostapd_clear_multicast_ps_bit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hostapd_clear_multicast_ps_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_tim_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_proc_beacon_done
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_check_ps_pkt
</UL>

<P><STRONG><a name="[74f]"></a>hostapd_create_ap</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, ap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = hostapd_create_ap &rArr; hostapd_setup_interface &rArr; hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init_gmk_and_counter &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_ap_destroy
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_mode
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_alloc_bss_data
</UL>
<BR>[Called By]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_create_softap
</UL>

<P><STRONG><a name="[754]"></a>s_mp_add</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = s_mp_add &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_mul
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_sqr
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
</UL>

<P><STRONG><a name="[755]"></a>s_mp_sub</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = s_mp_sub &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_mul
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_sqr
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sub
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_add
</UL>

<P><STRONG><a name="[75a]"></a>fast_s_mp_mul_digs</STRONG> (Thumb, 222 bytes, Stack size 2104 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2224<LI>Call Chain = fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
</UL>

<P><STRONG><a name="[75b]"></a>s_mp_mul_digs</STRONG> (Thumb, 206 bytes, Stack size 72 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2296<LI>Call Chain = s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_s_mp_mul_digs
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
</UL>

<P><STRONG><a name="[75d]"></a>mp_mul</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2312<LI>Call Chain = mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_mul_digs
</UL>
<BR>[Called By]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mulmod
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_karatsuba_mul
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_l
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mp_exptmod
</UL>

<P><STRONG><a name="[769]"></a>s_mp_sqr</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = s_mp_sqr &rArr; mp_init_size &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
</UL>
<BR>[Called By]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqr
</UL>

<P><STRONG><a name="[773]"></a>s_mp_exptmod</STRONG> (Thumb, 676 bytes, Stack size 480 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2792<LI>Call Chain = s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_set
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_count_bits
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_copy
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_setup
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce_2k_setup_l
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_sqr
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mod
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exptmod
</UL>

<P><STRONG><a name="[770]"></a>s_mp_mul_high_digs</STRONG> (Thumb, 172 bytes, Stack size 72 bytes, libtommath.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = s_mp_mul_high_digs &rArr; mp_init_size &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clear
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_clamp
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_init_size
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_exch
</UL>
<BR>[Called By]<UL><LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mp_reduce
</UL>

<P><STRONG><a name="[779]"></a>MD5Transform</STRONG> (Thumb, 1580 bytes, Stack size 92 bytes, md5.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Update
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MD5Final
</UL>

<P><STRONG><a name="[77f]"></a>random_mix_pool</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = random_mix_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_extract
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_add_randomness
</UL>

<P><STRONG><a name="[77e]"></a>random_extract</STRONG> (Thumb, 102 bytes, Stack size 104 bytes, random.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_mix_pool
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
</UL>

<P><STRONG><a name="[794]"></a>supplicant_event_disassoc_callback</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = supplicant_event_disassoc_callback &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_timeout
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
</UL>

<P><STRONG><a name="[797]"></a>wpa_supplicant_clear_connection</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1092<LI>Call Chain = wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; eapol_sm_notify_portValid &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_stop
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_mark_disassoc
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_config
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_config
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_clear_keys
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deauthenticate
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_disassociate
</UL>

<P><STRONG><a name="[77]"></a>supplicant_event_beacon_done</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = supplicant_event_beacon_done &rArr; tls_os_queue_send &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_queue_send
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_tim_ie
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>supplicant_event_sta_active</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = supplicant_event_sta_active &rArr; supplicant_send_event &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>supplicant_event_rx_pspoll</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = supplicant_event_rx_pspoll &rArr; supplicant_send_event &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>supplicant_event_rx_ps</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = supplicant_event_rx_ps &rArr; supplicant_send_event &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_send_event
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_supplicant.o(.data)
</UL>
<P><STRONG><a name="[7d4]"></a>supplicant_connect_network</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1116<LI>Call Chain = supplicant_connect_network &rArr; wpa_supplicant_init_eapol &rArr; eapol_sm_init &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_start_pin
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_start_pbc
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_init
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_wpa
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_init_eapol
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_own_addr
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_portValid
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_portEnabled
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_reload_configs
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_connect_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_sta_event_handle
</UL>

<P><STRONG><a name="[7de]"></a>tls_supplicant_sta_event_handle</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1412<LI>Call Chain = tls_supplicant_sta_event_handle &rArr; wpa_supplicant_event_assoc &rArr; wpa_supplicant_rx_eapol &rArr; wpa_sm_rx_eapol &rArr; wpa_supplicant_process_3_of_4 &rArr; wpa_supplicant_pairwise_gtk &rArr; wpa_supplicant_key_neg_complete &rArr; eapol_sm_notify_eap_success &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_scan_results
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_disassoc
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_disconnect
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cleanup
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_rx_eapol
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_timeout
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_handle_timeout
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_connect_network
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supplicant_event_disassoc_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_task
</UL>

<P><STRONG><a name="[7e5]"></a>dl_list_del</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_task
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_remove_timeout
</UL>

<P><STRONG><a name="[78f]"></a>dl_list_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_supplicant_task
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_handle_timeout
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>

<P><STRONG><a name="[79c]"></a>is_zero_ether_addr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wpa_supplicant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_deauthenticate
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_timeout
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_disassociate
</UL>

<P><STRONG><a name="[78e]"></a>eloop_remove_timeout</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wpa_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eloop_remove_timeout &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_handle_timeout
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>

<P><STRONG><a name="[7eb]"></a>tls_wl_init_ifdata</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, tls_wl_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tls_wl_init_ifdata &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_get_rate_table
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_init
</UL>

<P><STRONG><a name="[7e9]"></a>dl_list_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tls_wl_core.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mgmt_tx_isr
</UL>

<P><STRONG><a name="[80b]"></a>hed_get_key_table_idx</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hed_get_key_table_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_multicast_key
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_ccmp_key
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_tkip_key
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_wep_key
</UL>

<P><STRONG><a name="[812]"></a>hed_sec_set_bd_key_tbl</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hed_sec_set_bd_key_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_ccmp_key
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_tkip_key
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_wep_key
</UL>

<P><STRONG><a name="[811]"></a>hed_sec_set_key_info</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hed_sec_set_key_info
</UL>
<BR>[Called By]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_ccmp_key
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_tkip_key
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_wep_key
</UL>

<P><STRONG><a name="[813]"></a>hed_sec_set_ctrl_reg</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hed_sec_set_ctrl_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_ccmp_key
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_tkip_key
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_wep_key
</UL>

<P><STRONG><a name="[810]"></a>hed_hw_set_wep_key</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hed_hw_set_wep_key &rArr; hed_sec_set_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_mac_addr
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_ctrl_reg
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_key_info
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_bd_key_tbl
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_get_key_table_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_set_key
</UL>

<P><STRONG><a name="[815]"></a>hed_hw_set_tkip_key</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hed_hw_set_tkip_key &rArr; hed_sec_set_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_mac_addr
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_uni_key_tbl
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_ctrl_reg
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_key_info
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_bd_key_tbl
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_get_key_table_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_set_key
</UL>

<P><STRONG><a name="[816]"></a>hed_hw_set_ccmp_key</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, tls_wl_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hed_hw_set_ccmp_key &rArr; hed_sec_set_mac_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_mac_addr
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_uni_key_tbl
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_ctrl_reg
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_key_info
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_sec_set_bd_key_tbl
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_get_key_table_idx
</UL>
<BR>[Called By]<UL><LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_set_key
</UL>

<P><STRONG><a name="[818]"></a>hed_sec_set_uni_key_tbl</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tls_wl_hw.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_ccmp_key
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_hw_set_tkip_key
</UL>

<P><STRONG><a name="[820]"></a>set_sta_flags</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tls_wl_if.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_sta_flags &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_sta_flags
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_sta_add
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_add_key
</UL>

<P><STRONG><a name="[854]"></a>compare_ether_addr</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tls_wl_tx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
</UL>

<P><STRONG><a name="[852]"></a>tls_wl_set_rates</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tls_wl_set_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_send_ampdu
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_tx_start
</UL>

<P><STRONG><a name="[850]"></a>hed_tx_start</STRONG> (Thumb, 438 bytes, Stack size 32 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = hed_tx_start &rArr; ieee80211_tx_encrypt_add_iv &rArr; ieee80211_wep_get_iv
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx_encrypt_add_iv
<LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_send_ampdu
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_is_ht
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
</UL>

<P><STRONG><a name="[853]"></a>ieee80211_tx</STRONG> (Thumb, 1612 bytes, Stack size 88 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_bssid
<LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx_michael_mic_add
<LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx_rate_ctrl
<LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_qos_hdr
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_ap_rx_ps
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_is_ht
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_qos_ctl
<LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_data_qos
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_tx_start
<LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_buffer_release
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_tx
</UL>

<P><STRONG><a name="[84e]"></a>ieee80211_has_a4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_tx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx_michael_mic_add
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_qos_ctl
</UL>

<P><STRONG><a name="[856]"></a>ieee80211_is_data_qos</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_tx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
</UL>

<P><STRONG><a name="[847]"></a>ieee80211_get_qos_ctl</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ieee80211_get_qos_ctl
</UL>
<BR>[Calls]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_has_a4
</UL>
<BR>[Called By]<UL><LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_qos_hdr
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
</UL>

<P><STRONG><a name="[84c]"></a>conf_is_ht</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tls_wl_tx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx_rate_ctrl
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_tx_start
</UL>

<P><STRONG><a name="[849]"></a>ieee80211_wep_get_iv</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ieee80211_wep_get_iv
</UL>
<BR>[Called By]<UL><LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx_encrypt_add_iv
</UL>

<P><STRONG><a name="[851]"></a>tx_send_ampdu</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tx_send_ampdu &rArr; tls_wl_set_rates
</UL>
<BR>[Calls]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_set_rates
</UL>
<BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hed_tx_start
</UL>

<P><STRONG><a name="[855]"></a>ieee80211_ap_rx_ps</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tls_wl_tx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ieee80211_ap_rx_ps
</UL>
<BR>[Called By]<UL><LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_tx
</UL>

<P><STRONG><a name="[866]"></a>__wpa_update_mode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wm_wifi_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = __wpa_update_mode &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_softap_create
<LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_update_mode
</UL>

<P><STRONG><a name="[87f]"></a>tls_wifi_clear_1shot_info</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, wm_wifi_oneshot_api.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = tls_wifi_clear_1shot_info &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_decode_new_oneshot_data
<LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pbreq_recv
<LI><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_oneshotinfo_resolve_probereq
</UL>

<P><STRONG><a name="[890]"></a>wpa_supplicant_event_associnfo</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wpa_supplicant_event_associnfo &rArr; wpa_sm_set_assoc_wpa_ie &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_assoc_wpa_ie
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_wpa_ie
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_ap_rsn_ie
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>

<P><STRONG><a name="[896]"></a>wpa_config_validate_network_test</STRONG> (Thumb, 130 bytes, Stack size 64 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = wpa_config_validate_network_test &rArr; wpa_config_update_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_update_psk
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
</UL>

<P><STRONG><a name="[898]"></a>wpa_supplicant_update_cfg</STRONG> (Thumb, 746 bytes, Stack size 160 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = wpa_supplicant_update_cfg &rArr; wpa_config_validate_network_test &rArr; wpa_config_update_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_to_flash
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
<LI><a href="#[86f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_cipher2host
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_ie
<LI><a href="#[897]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wpa
<LI><a href="#[894]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_wep
<LI><a href="#[89b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_key_open
<LI><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_validate_network_test
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
</UL>

<P><STRONG><a name="[89c]"></a>wpa_supplicant_ssid_bss_match</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = wpa_supplicant_ssid_bss_match &rArr; wpa_parse_wpa_ie &rArr; wpa_parse_wpa_ie_wpa
</UL>
<BR>[Calls]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_ie
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa
</UL>
<BR>[Called By]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
</UL>

<P><STRONG><a name="[89e]"></a>wpa_scan_res_match</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = wpa_scan_res_match &rArr; wpa_supplicant_update_cfg &rArr; wpa_config_validate_network_test &rArr; wpa_config_update_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[89f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_ssid_wildcard_ok
<LI><a href="#[8a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_ssid_bss_match
<LI><a href="#[89a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie
<LI><a href="#[899]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_ie
<LI><a href="#[89d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ssid_bss_match
<LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
</UL>

<P><STRONG><a name="[89d]"></a>wpa_key_mgmt_wpa</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, events.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
<LI><a href="#[89c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_ssid_bss_match
</UL>

<P><STRONG><a name="[891]"></a>wpa_supplicant_select_config</STRONG> (Thumb, 110 bytes, Stack size 104 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1172<LI>Call Chain = wpa_supplicant_select_config &rArr; eapol_sm_notify_eap_success &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_config
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_suites
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_non_wpa_policy
<LI><a href="#[8a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_portControl
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_eap_success
<LI><a href="#[8a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_eap_fail
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_assoc
</UL>

<P><STRONG><a name="[89b]"></a>wpa_supplicant_update_key_open</STRONG> (Thumb, 108 bytes, Stack size 152 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = wpa_supplicant_update_key_open &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[898]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_update_cfg
</UL>

<P><STRONG><a name="[8a1]"></a>wpa_supplicant_select_bss</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = wpa_supplicant_select_bss &rArr; wpa_scan_res_match &rArr; wpa_supplicant_update_cfg &rArr; wpa_config_validate_network_test &rArr; wpa_config_update_psk &rArr; pbkdf2_sha1 &rArr; pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[8a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_res
<LI><a href="#[89e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_res_match
<LI><a href="#[889]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_add
<LI><a href="#[888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_event_scan_results
</UL>

<P><STRONG><a name="[8a4]"></a>wpa_scan_get_res</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, events.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = wpa_scan_get_res &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_select_bss
</UL>

<P><STRONG><a name="[8a6]"></a>hostapd_setup_bss</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, hostapd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = hostapd_setup_bss &rArr; hostapd_setup_wpa &rArr; wpa_init &rArr; wpa_group_init_gmk_and_counter &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init_keys
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_remove_key
<LI><a href="#[8aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa
<LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_key
<LI><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_wpa_psk
<LI><a href="#[8a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_flush_old_stations
</UL>
<BR>[Called By]<UL><LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_interface
</UL>

<P><STRONG><a name="[8a7]"></a>hostapd_flush_old_stations</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, hostapd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = hostapd_flush_old_stations &rArr; hostapd_free_stas &rArr; ap_free_sta &rArr; hostapd_drv_sta_remove &rArr; tls_wl_if_sta_remove &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_free_stas
<LI><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_flush
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_deauth
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_interface_deinit
<LI><a href="#[8a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_setup_bss
</UL>

<P><STRONG><a name="[8c4]"></a>handle_auth</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = handle_auth &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_authenticate_indication
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_send_mlme
<LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
</UL>

<P><STRONG><a name="[8c7]"></a>check_assoc_ies</STRONG> (Thumb, 352 bytes, Stack size 232 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = check_assoc_ies &rArr; wpa_validate_wpa_ie &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_validate_wpa_ie
<LI><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_no_wpa
<LI><a href="#[8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_init
<LI><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_parse_elems
<LI><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_wmm_valid
<LI><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_print_ssid
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc
</UL>

<P><STRONG><a name="[8cb]"></a>send_assoc_resp</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = send_assoc_resp &rArr; hostapd_drv_send_mlme &rArr; tls_wl_if_send_mlme &rArr; ieee80211_send_mgmt &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[8cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_wmm
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_send_mlme
<LI><a href="#[8cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_own_capab_info
<LI><a href="#[8ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_ext_supp_rates
<LI><a href="#[8cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_eid_supp_rates
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc
</UL>

<P><STRONG><a name="[8d0]"></a>handle_assoc</STRONG> (Thumb, 582 bytes, Stack size 72 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = handle_assoc &rArr; handle_assoc_cb &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_send_mlme
<LI><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_notif_assoc
<LI><a href="#[8d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc_cb
<LI><a href="#[8cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_assoc_resp
<LI><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_assoc_ies
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_mgmt
</UL>

<P><STRONG><a name="[8d1]"></a>handle_assoc_cb</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, ieee802_11.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = handle_assoc_cb &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[8d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_reassociate_indication
<LI><a href="#[8d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_associate_indication
<LI><a href="#[8db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_set_sta_flags
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_remove
<LI><a href="#[8d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_add
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_assoc
</UL>

<P><STRONG><a name="[8e2]"></a>wpabuf_put_data</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpabuf_put_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_scan_get_vendor_ie_multi
<LI><a href="#[8df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_extra_ies
</UL>

<P><STRONG><a name="[8df]"></a>wpa_supplicant_extra_ies</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, scan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = wpa_supplicant_extra_ies &rArr; wps_build_probe_req_ie &rArr; wps_ie_encapsulate &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_get_req_type
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[8e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_probe_req_ie
<LI><a href="#[8e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_resize
<LI><a href="#[8e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
</UL>
<BR>[Called By]<UL><LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_scan
</UL>

<P><STRONG><a name="[8e6]"></a>pbkdf2_sha1_f</STRONG> (Thumb, 162 bytes, Stack size 104 bytes, sha1-pbkdf2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = pbkdf2_sha1_f &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha1_vector
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pbkdf2_sha1
</UL>

<P><STRONG><a name="[8e7]"></a>ap_sta_clear_pspkt</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ap_sta_clear_pspkt &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_clear_unicast_ps_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[8bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_add
<LI><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_free_sta
</UL>

<P><STRONG><a name="[132]"></a>ap_sta_disassoc_cb_timeout</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ap_sta_disassoc_cb_timeout &rArr; ap_sta_remove &rArr; hostapd_drv_sta_remove &rArr; tls_wl_if_sta_remove &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_remove
<LI><a href="#[8d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mlme_disassociate_indication
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hostapd_sta_info.o(.text)
</UL>
<P><STRONG><a name="[8e8]"></a>ap_sta_remove</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hostapd_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = ap_sta_remove &rArr; hostapd_drv_sta_remove &rArr; tls_wl_if_sta_remove &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disassoc_cb_timeout
<LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
</UL>

<P><STRONG><a name="[133]"></a>ieee80211_tkip_countermeasures_stop</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tkip_countermeasures.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_countermeasures
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tkip_countermeasures.o(.text)
</UL>
<P><STRONG><a name="[8f1]"></a>ieee80211_tkip_countermeasures_start</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tkip_countermeasures.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = ieee80211_tkip_countermeasures_start &rArr; wpa_gtk_rekey &rArr; wpa_gtk_update &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_deauth
<LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_rekey
<LI><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_countermeasures_start
<LI><a href="#[8ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_countermeasures
<LI><a href="#[8d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_sta_remove
<LI><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_set_authorized
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;michael_mic_failure
</UL>

<P><STRONG><a name="[8fc]"></a>wpa_supplicant_process_1_of_4</STRONG> (Thumb, 226 bytes, Stack size 152 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1276<LI>Call Chain = wpa_supplicant_process_1_of_4 &rArr; wpa_sm_deauthenticate &rArr; wpa_supplicant_deauthenticate &rArr; wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; eapol_sm_notify_portValid &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_parse_ies
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deauthenticate
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pmk_to_ptk
<LI><a href="#[8fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_4
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
</UL>

<P><STRONG><a name="[900]"></a>wpa_supplicant_key_neg_complete</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1084<LI>Call Chain = wpa_supplicant_key_neg_complete &rArr; eapol_sm_notify_eap_success &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_portValid
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_eap_success
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_cancel_auth_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[134]"></a>wpa_sm_rekey_ptk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = wpa_sm_rekey_ptk &rArr; wpa_sm_key_request &rArr; wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[8f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_key_request
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa.o(.text)
</UL>
<P><STRONG><a name="[90c]"></a>wpa_supplicant_check_group_cipher</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wpa_supplicant_check_group_cipher
</UL>
<BR>[Called By]<UL><LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
</UL>

<P><STRONG><a name="[902]"></a>wpa_supplicant_install_gtk</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wpa_supplicant_install_gtk &rArr; wpa_sm_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
<LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[904]"></a>wpa_supplicant_validate_ie</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1156<LI>Call Chain = wpa_supplicant_validate_ie &rArr; wpa_report_ie_mismatch &rArr; wpa_sm_disassociate &rArr; wpa_supplicant_disassociate &rArr; wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; eapol_sm_notify_portValid &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_compare_rsn_ie
<LI><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_report_ie_mismatch
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
</UL>

<P><STRONG><a name="[908]"></a>wpa_supplicant_process_3_of_4</STRONG> (Thumb, 236 bytes, Stack size 136 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1308<LI>Call Chain = wpa_supplicant_process_3_of_4 &rArr; wpa_supplicant_pairwise_gtk &rArr; wpa_supplicant_key_neg_complete &rArr; eapol_sm_notify_eap_success &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_portValid
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_parse_ies
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deauthenticate
<LI><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_4_of_4
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
<LI><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_ptk
<LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_validate_ie
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
</UL>

<P><STRONG><a name="[90b]"></a>wpa_supplicant_process_1_of_2_wpa</STRONG> (Thumb, 312 bytes, Stack size 80 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = wpa_supplicant_process_1_of_2_wpa &rArr; aes_unwrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc4_skip
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_unwrap
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_gtk_tx_bit_workaround
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_check_group_cipher
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[910]"></a>wpa_supplicant_process_1_of_2</STRONG> (Thumb, 216 bytes, Stack size 96 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1220<LI>Call Chain = wpa_supplicant_process_1_of_2 &rArr; wpa_sm_deauthenticate &rArr; wpa_supplicant_deauthenticate &rArr; wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; eapol_sm_notify_portValid &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_get_state
<LI><a href="#[8ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_deauthenticate
<LI><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_cancel_auth_timeout
<LI><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_send_2_of_2
<LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_gtk
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
</UL>

<P><STRONG><a name="[8f5]"></a>is_zero_ether_addr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wpa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
</UL>

<P><STRONG><a name="[914]"></a>wpa_supplicant_verify_eapol_key_mic</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = wpa_supplicant_verify_eapol_key_mic &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
</UL>

<P><STRONG><a name="[909]"></a>wpa_supplicant_install_ptk</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = wpa_supplicant_install_ptk &rArr; wpa_sm_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
</UL>

<P><STRONG><a name="[90f]"></a>wpa_supplicant_gtk_tx_bit_workaround</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wpa.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_rsn
<LI><a href="#[90a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_pairwise_gtk
<LI><a href="#[90b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2_wpa
</UL>

<P><STRONG><a name="[90a]"></a>wpa_supplicant_pairwise_gtk</STRONG> (Thumb, 144 bytes, Stack size 88 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1172<LI>Call Chain = wpa_supplicant_pairwise_gtk &rArr; wpa_supplicant_key_neg_complete &rArr; eapol_sm_notify_eap_success &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_gtk_tx_bit_workaround
<LI><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_install_gtk
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_check_group_cipher
<LI><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_key_neg_complete
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_3_of_4
</UL>

<P><STRONG><a name="[906]"></a>wpa_report_ie_mismatch</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1124<LI>Call Chain = wpa_report_ie_mismatch &rArr; wpa_sm_disassociate &rArr; wpa_supplicant_disassociate &rArr; wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; eapol_sm_notify_portValid &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_disassociate
</UL>
<BR>[Called By]<UL><LI><a href="#[904]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_validate_ie
</UL>

<P><STRONG><a name="[912]"></a>wpa_supplicant_process_1_of_2_rsn</STRONG> (Thumb, 126 bytes, Stack size 120 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = wpa_supplicant_process_1_of_2_rsn &rArr; wpa_supplicant_parse_ies &rArr; wpa_parse_generic
</UL>
<BR>[Calls]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_parse_ies
<LI><a href="#[90f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_gtk_tx_bit_workaround
<LI><a href="#[90c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_check_group_cipher
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[913]"></a>wpa_supplicant_send_2_of_2</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = wpa_supplicant_send_2_of_2 &rArr; wpa_eapol_key_send &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[8f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_alloc_eapol
<LI><a href="#[8f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_send
</UL>
<BR>[Called By]<UL><LI><a href="#[910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_process_1_of_2
</UL>

<P><STRONG><a name="[915]"></a>wpa_supplicant_decrypt_key_data</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, wpa.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = wpa_supplicant_decrypt_key_data &rArr; aes_unwrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc4_skip
<LI><a href="#[90e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_unwrap
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_rx_eapol
</UL>

<P><STRONG><a name="[926]"></a>is_broadcast_ether_addr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wpa_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
<LI><a href="#[8a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_remove_key
</UL>

<P><STRONG><a name="[924]"></a>cipher2drv</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, wpa_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_associate
</UL>

<P><STRONG><a name="[929]"></a>wpa_gen_wpa_ie_wpa</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, wpa_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_gen_wpa_ie_wpa
</UL>
<BR>[Called By]<UL><LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gen_wpa_ie
</UL>

<P><STRONG><a name="[92a]"></a>wpa_gen_wpa_ie_rsn</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, wpa_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wpa_gen_wpa_ie_rsn
</UL>
<BR>[Called By]<UL><LI><a href="#[917]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gen_wpa_ie
</UL>

<P><STRONG><a name="[92b]"></a>wpa_parse_generic</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, wpa_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wpa_parse_generic
</UL>
<BR>[Called By]<UL><LI><a href="#[8fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_parse_ies
</UL>

<P><STRONG><a name="[92d]"></a>wpabuf_put_data</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wpabuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpabuf_put_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc_copy
<LI><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_zeropad
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
</UL>

<P><STRONG><a name="[136]"></a>wpa_supplicant_eapol_send</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, wpas_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = wpa_supplicant_eapol_send &rArr; wpa_drv_send_eapol &rArr; tls_wl_if_send_eapol &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[925]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_send_eapol
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpas_glue.o(.text)
</UL>
<P><STRONG><a name="[137]"></a>wpa_eapol_set_wep_key</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, wpas_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = wpa_eapol_set_wep_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpas_glue.o(.text)
</UL>
<P><STRONG><a name="[139]"></a>wpa_supplicant_eapol_cb</STRONG> (Thumb, 118 bytes, Stack size 64 bytes, wpas_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1196<LI>Call Chain = wpa_supplicant_eapol_cb &rArr; wpas_wps_eapol_cb &rArr; wpa_supplicant_deauthenticate &rArr; wpa_supplicant_clear_connection &rArr; wpa_supplicant_mark_disassoc &rArr; eapol_sm_notify_portValid &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_scan
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_drv_set_key
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_auth_timeout
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_auth_timeout
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_eapol_cb
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_get_key
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_ieee8021x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpas_glue.o(.text)
</UL>
<P><STRONG><a name="[135]"></a>wpa_supplicant_notify_eapol_done</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wpas_glue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wpa_supplicant_notify_eapol_done &rArr; wpa_supplicant_set_state &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_set_state
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_cancel_auth_timeout
<LI><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_wpa_ieee8021x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpas_glue.o(.text)
</UL>
<P><STRONG><a name="[138]"></a>wpa_supplicant_port_cb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wpas_glue.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> wpas_glue.o(.text)
</UL>
<P><STRONG><a name="[930]"></a>wpa_key_mgmt_wpa_ieee8021x</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wpas_glue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_notify_eapol_done
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_eapol_cb
</UL>

<P><STRONG><a name="[13a]"></a>wpas_wps_timeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, wps_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = wpas_wps_timeout &rArr; wpas_clear_wps &rArr; eloop_cancel_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_clear_wps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wps_supplicant.o(.text)
</UL>
<P><STRONG><a name="[933]"></a>wpas_clear_wps</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, wps_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wpas_clear_wps &rArr; eloop_cancel_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_set_config
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_config
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_start_pin
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_start_pbc
<LI><a href="#[93a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_cancel
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_wps_event
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_timeout
<LI><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_eapol_cb
</UL>

<P><STRONG><a name="[13b]"></a>wpa_supplicant_wps_cred</STRONG> (Thumb, 678 bytes, Stack size 248 bytes, wps_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = wpa_supplicant_wps_cred &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_set
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_config_set_network_defaults
<LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2bin
<LI><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_security_workaround
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wps_supplicant.o(.text)
</UL>
<P><STRONG><a name="[13c]"></a>wpa_supplicant_wps_event</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wps_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = wpa_supplicant_wps_event &rArr; wpas_clear_wps &rArr; eloop_cancel_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_clear_wps
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wps_supplicant.o(.text)
</UL>
<P><STRONG><a name="[93b]"></a>wpas_wps_set_uuid</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, wps_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wpas_wps_set_uuid &rArr; uuid_gen_mac_addr &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uuid_gen_mac_addr
<LI><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_nil_uuid
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_update_config
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_init
</UL>

<P><STRONG><a name="[937]"></a>wpas_wps_security_workaround</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, wps_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wpas_wps_security_workaround &rArr; wpa_parse_wpa_ie &rArr; wpa_parse_wpa_ie_wpa
</UL>
<BR>[Calls]<UL><LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_vendor_ie
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_bss_get_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_wps_cred
</UL>

<P><STRONG><a name="[939]"></a>wpas_wps_reassoc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wps_supplicant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = wpas_wps_reassoc &rArr; wpa_supplicant_req_scan &rArr; tls_os_timer_change &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_supplicant_req_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_start_pin
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpas_wps_start_pbc
</UL>

<P><STRONG><a name="[942]"></a>eap_wsc_new_ap_settings</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, eap_wsc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = eap_wsc_new_ap_settings &rArr; hexstr2bin &rArr; hex2byte
</UL>
<BR>[Calls]<UL><LI><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr2bin
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_init
</UL>

<P><STRONG><a name="[13d]"></a>eap_wsc_init</STRONG> (Thumb, 270 bytes, Stack size 200 bytes, eap_wsc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = eap_wsc_init &rArr; wps_init &rArr; os_strdup &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_new_ap_settings
<LI><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_init
<LI><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_config_phase1
<LI><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_config_identity
<LI><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_config_fragment_size
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eap_wsc.o(.text)
</UL>
<P><STRONG><a name="[13e]"></a>eap_wsc_deinit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, eap_wsc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = eap_wsc_deinit &rArr; wps_deinit &rArr; wps_device_data_free &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_deinit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eap_wsc.o(.text)
</UL>
<P><STRONG><a name="[948]"></a>eap_wsc_build_msg</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, eap_wsc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = eap_wsc_build_msg &rArr; eap_msg_alloc &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process
</UL>

<P><STRONG><a name="[13f]"></a>eap_wsc_process</STRONG> (Thumb, 584 bytes, Stack size 88 bytes, eap_wsc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4368<LI>Call Chain = eap_wsc_process &rArr; wps_process_msg &rArr; wps_enrollee_process_msg &rArr; wps_process_wsc_msg &rArr; wps_process_m2 &rArr; wps_derive_keys &rArr; dh5_derive_shared &rArr; dh_derive_shared &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; tls_crypto_exptmod &rArr; mp_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process_fragment
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_build_msg
<LI><a href="#[94f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_msg
<LI><a href="#[950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_get_msg
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_hdr_validate
<LI><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eap_wsc.o(.text)
</UL>
<P><STRONG><a name="[94a]"></a>wpabuf_put_u8</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, eap_wsc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpabuf_put_u8
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_build_msg
</UL>

<P><STRONG><a name="[94b]"></a>wpabuf_put_data</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, eap_wsc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpabuf_put_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[94e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process_fragment
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process
<LI><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_build_msg
</UL>

<P><STRONG><a name="[94e]"></a>eap_wsc_process_fragment</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, eap_wsc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = eap_wsc_process_fragment &rArr; eap_msg_alloc &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_msg_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_wsc_process
</UL>

<P><STRONG><a name="[140]"></a>eapol_sm_step_timeout</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = eapol_sm_step_timeout &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eapol_supp_sm.o(.text)
</UL>
<P><STRONG><a name="[955]"></a>sm_SUPP_BE_SUCCESS_Enter</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sm_SUPP_BE_SUCCESS_Enter
</UL>
<BR>[Calls]<UL><LI><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_key_available
</UL>
<BR>[Called By]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_BE_Step
</UL>

<P><STRONG><a name="[957]"></a>sm_SUPP_BE_RECEIVE_Enter</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sm_SUPP_BE_RECEIVE_Enter &rArr; eapol_enable_timer_tick &rArr; eloop_cancel_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_enable_timer_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_BE_Step
</UL>

<P><STRONG><a name="[959]"></a>sm_SUPP_BE_Step</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = sm_SUPP_BE_Step &rArr; sm_SUPP_BE_RECEIVE_Enter &rArr; eapol_enable_timer_tick &rArr; eloop_cancel_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[95a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_abort
<LI><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_BE_RESPONSE_Enter
<LI><a href="#[95c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_BE_IDLE_Enter
<LI><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_BE_REQUEST_Enter
<LI><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_BE_FAIL_Enter
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_BE_RECEIVE_Enter
<LI><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_BE_SUCCESS_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step
</UL>

<P><STRONG><a name="[962]"></a>eapol_sm_processKey</STRONG> (Thumb, 420 bytes, Stack size 200 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1028<LI>Call Chain = eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_md5
<LI><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_get_key
<LI><a href="#[90d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc4_skip
<LI><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_lower_layer_success
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_KEY_RX_KEY_RECEIVE_Enter
</UL>

<P><STRONG><a name="[96d]"></a>sm_SUPP_PAE_AUTHENTICATING_Enter</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_PAE_Step
</UL>

<P><STRONG><a name="[963]"></a>sm_SUPP_PAE_DISCONNECTED_Enter</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sm_SUPP_PAE_DISCONNECTED_Enter
</UL>
<BR>[Calls]<UL><LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_set_port_unauthorized
</UL>
<BR>[Called By]<UL><LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_PAE_Step
</UL>

<P><STRONG><a name="[965]"></a>sm_SUPP_PAE_CONNECTING_Enter</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = sm_SUPP_PAE_CONNECTING_Enter &rArr; eapol_enable_timer_tick &rArr; eloop_cancel_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_txStart
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_enable_timer_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_PAE_Step
</UL>

<P><STRONG><a name="[967]"></a>sm_SUPP_PAE_HELD_Enter</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sm_SUPP_PAE_HELD_Enter &rArr; eapol_enable_timer_tick &rArr; eloop_cancel_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_set_port_unauthorized
<LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_enable_timer_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_PAE_Step
</UL>

<P><STRONG><a name="[968]"></a>sm_SUPP_PAE_Step</STRONG> (Thumb, 432 bytes, Stack size 24 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = sm_SUPP_PAE_Step &rArr; sm_SUPP_PAE_CONNECTING_Enter &rArr; eapol_enable_timer_tick &rArr; eloop_cancel_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_txLogoff
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_PAE_AUTHENTICATED_Enter
<LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_set_port_authorized
<LI><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_PAE_RESTART_Enter
<LI><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_set_port_unauthorized
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_PAE_HELD_Enter
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_PAE_CONNECTING_Enter
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_PAE_DISCONNECTED_Enter
<LI><a href="#[96d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_PAE_AUTHENTICATING_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step
</UL>

<P><STRONG><a name="[141]"></a>eapol_port_timers_tick</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1068<LI>Call Chain = eapol_port_timers_tick &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eapol_supp_sm.o(.text)
</UL>
<P><STRONG><a name="[7f]"></a>eapol_sm_get_config</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> eapol_supp_sm.o(.data)
</UL>
<P><STRONG><a name="[84]"></a>eapol_sm_get_eapReqData</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> eapol_supp_sm.o(.data)
</UL>
<P><STRONG><a name="[80]"></a>eapol_sm_get_bool</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> eapol_supp_sm.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>eapol_sm_set_bool</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> eapol_supp_sm.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>eapol_sm_get_int</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> eapol_supp_sm.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>eapol_sm_set_int</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = eapol_sm_set_int &rArr; eapol_enable_timer_tick &rArr; eloop_cancel_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_enable_timer_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eapol_supp_sm.o(.data)
</UL>
<P><STRONG><a name="[85]"></a>eapol_sm_set_config_blob</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> eapol_supp_sm.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>eapol_sm_get_config_blob</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> eapol_supp_sm.o(.data)
</UL>
<P><STRONG><a name="[87]"></a>eapol_sm_notify_pending</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1060<LI>Call Chain = eapol_sm_notify_pending &rArr; eapol_sm_step &rArr; sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eapol_supp_sm.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>eapol_sm_notify_cert</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eapol_sm_notify_cert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eapol_supp_sm.o(.data)
</UL>
<P><STRONG><a name="[95e]"></a>sm_SUPP_BE_FAIL_Enter</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_BE_Step
</UL>

<P><STRONG><a name="[95d]"></a>sm_SUPP_BE_REQUEST_Enter</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_BE_Step
</UL>

<P><STRONG><a name="[95c]"></a>sm_SUPP_BE_IDLE_Enter</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_BE_Step
</UL>

<P><STRONG><a name="[958]"></a>eapol_enable_timer_tick</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = eapol_enable_timer_tick &rArr; eloop_cancel_timeout &rArr; tls_os_timer_stop &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_rx_eapol
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_set_int
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_PAE_HELD_Enter
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_PAE_CONNECTING_Enter
<LI><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_BE_RECEIVE_Enter
</UL>

<P><STRONG><a name="[95b]"></a>sm_SUPP_BE_RESPONSE_Enter</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sm_SUPP_BE_RESPONSE_Enter &rArr; wpabuf_free &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[97f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_eapRespData
</UL>
<BR>[Called By]<UL><LI><a href="#[959]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_BE_Step
</UL>

<P><STRONG><a name="[96e]"></a>sm_KEY_RX_KEY_RECEIVE_Enter</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036<LI>Call Chain = sm_KEY_RX_KEY_RECEIVE_Enter &rArr; eapol_sm_processKey &rArr; rc4_skip &rArr; Arc4_skip
</UL>
<BR>[Calls]<UL><LI><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_processKey
</UL>
<BR>[Called By]<UL><LI><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_step
</UL>

<P><STRONG><a name="[964]"></a>eapol_sm_set_port_unauthorized</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_rx_eapol
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_PAE_Step
<LI><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_PAE_HELD_Enter
<LI><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_PAE_DISCONNECTED_Enter
</UL>

<P><STRONG><a name="[96c]"></a>sm_SUPP_PAE_RESTART_Enter</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_PAE_Step
</UL>

<P><STRONG><a name="[966]"></a>eapol_sm_txStart</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eapol_sm_txStart
</UL>
<BR>[Called By]<UL><LI><a href="#[97a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_request_reauth
<LI><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_PAE_CONNECTING_Enter
</UL>

<P><STRONG><a name="[96a]"></a>eapol_sm_set_port_authorized</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[977]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_notify_cached
<LI><a href="#[96b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_PAE_AUTHENTICATED_Enter
<LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_PAE_Step
</UL>

<P><STRONG><a name="[96b]"></a>sm_SUPP_PAE_AUTHENTICATED_Enter</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sm_SUPP_PAE_AUTHENTICATED_Enter
</UL>
<BR>[Calls]<UL><LI><a href="#[96a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_sm_set_port_authorized
</UL>
<BR>[Called By]<UL><LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_PAE_Step
</UL>

<P><STRONG><a name="[969]"></a>eapol_sm_txLogoff</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, eapol_supp_sm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = eapol_sm_txLogoff
</UL>
<BR>[Called By]<UL><LI><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_SUPP_PAE_Step
</UL>

<P><STRONG><a name="[98a]"></a>wpabuf_put_be32</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wps.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpabuf_put_be32
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_assoc_req_ie
<LI><a href="#[98e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_assoc_resp_ie
</UL>

<P><STRONG><a name="[986]"></a>is_selected_pin_registrar</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, wps.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_is_addr_authorized
<LI><a href="#[985]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_is_selected_pin_registrar
</UL>

<P><STRONG><a name="[142]"></a>bss_release</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tls_wl_bss.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bss_release &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_wl_bss.o(.text)
</UL>
<P><STRONG><a name="[9ba]"></a>__ieee80211_key_replace</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tls_wl_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ieee80211_key_replace
</UL>
<BR>[Called By]<UL><LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_link
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_key_free
</UL>

<P><STRONG><a name="[9bb]"></a>__ieee80211_key_destroy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tls_wl_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __ieee80211_key_destroy &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_del_key
</UL>
<BR>[Called By]<UL><LI><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_link
<LI><a href="#[9bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_key_free
</UL>

<P><STRONG><a name="[9bd]"></a>__ieee80211_key_free</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tls_wl_key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __ieee80211_key_free &rArr; __ieee80211_key_destroy &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_key_destroy
<LI><a href="#[9ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee80211_key_replace
</UL>
<BR>[Called By]<UL><LI><a href="#[9be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_free_keys
<LI><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_key_free
</UL>

<P><STRONG><a name="[9c0]"></a>tls_wl_set_mac_txbd</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tls_wl_set_mac_txbd &rArr; hw_set_tx_rate_and_power
</UL>
<BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_set_tx_rate_and_power
</UL>
<BR>[Called By]<UL><LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_deauth_disassoc
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_pspoll
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_nullfunc
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_rsp
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_auth
</UL>

<P><STRONG><a name="[9c1]"></a>tls_wl_enable_tx_mgmt_frm</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tls_wl_mgmt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = tls_wl_enable_tx_mgmt_frm &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt_by_rate
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_deauth_disassoc
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_pspoll
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_nullfunc
<LI><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_rsp
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_auth
</UL>

<P><STRONG><a name="[9c8]"></a>tls_wl_set_mac_txbd4power</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, tls_wl_mgmt.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_set_tx_rate_and_power2
</UL>
<BR>[Called By]<UL><LI><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_mgmt_by_rate
</UL>

<P><STRONG><a name="[9d6]"></a>ieee80211_sta_wmm_params</STRONG> (Thumb, 592 bytes, Stack size 36 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ieee80211_sta_wmm_params
</UL>
<BR>[Called By]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
</UL>

<P><STRONG><a name="[9cd]"></a>ieee80211_handle_bss_capability</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ieee80211_handle_bss_capability
</UL>
<BR>[Called By]<UL><LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
</UL>

<P><STRONG><a name="[9cc]"></a>ieee80211_set_associated</STRONG> (Thumb, 392 bytes, Stack size 64 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ieee80211_set_associated &rArr; ieee80211_bss_info_change_notify &rArr; tls_wl_hw_bss_info_changed &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_acquire
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_set_key
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_change_notify
<LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hw_config
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sta_flags
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_handle_bss_capability
<LI><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_get
<LI><a href="#[9ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_put
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
</UL>

<P><STRONG><a name="[9cf]"></a>ieee80211_associated</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = ieee80211_associated &rArr; ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_probe_req
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
<LI><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sta_flags
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_nullfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_task
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
</UL>

<P><STRONG><a name="[9d0]"></a>ieee80211_associate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ieee80211_associate &rArr; ieee80211_send_assoc &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_send_apinfo
<LI><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_assoc
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_task
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_auth_completed
</UL>

<P><STRONG><a name="[9d2]"></a>ieee80211_rx_bss_info</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = ieee80211_rx_bss_info &rArr; ieee80211_bss_info_update &rArr; wpa_update_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_channel_to_frequency
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_channel
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
</UL>
<BR>[Called By]<UL><LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_probe_resp
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
</UL>

<P><STRONG><a name="[9d4]"></a>ieee80211_rx_mgmt_beacon</STRONG> (Thumb, 434 bytes, Stack size 208 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 732<LI>Call Chain = ieee80211_rx_mgmt_beacon &rArr; ieee80211_rx_bss_info &rArr; ieee80211_bss_info_update &rArr; wpa_update_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_power_save
<LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_change_notify
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_channel_to_frequency
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_elems
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_channel
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_bss_info
<LI><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_handle_bss_capability
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_wmm_params
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_pspoll
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_nullfunc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
</UL>

<P><STRONG><a name="[9df]"></a>ieee80211_send_addba_resp</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ieee80211_send_addba_resp &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_set_tx_rate_and_power
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_hw_wake_up
<LI><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_get_mgmt_txbuf
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_process_addba_request
</UL>

<P><STRONG><a name="[9e3]"></a>ieee80211_rx_mgmt_assoc_resp</STRONG> (Thumb, 596 bytes, Stack size 224 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = ieee80211_rx_mgmt_assoc_resp &rArr; ieee80211_associated &rArr; ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_add_with_mode
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rate_control_init
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_elems
<LI><a href="#[9de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_enable_ht
<LI><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_ht_cap_ie_to_sta_ht_cap
<LI><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sta_flags
<LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
<LI><a href="#[9d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_wmm_params
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
</UL>

<P><STRONG><a name="[9e5]"></a>ieee80211_sta_rx_queued_mgmt</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = ieee80211_sta_rx_queued_mgmt &rArr; ieee80211_rx_mgmt_assoc_resp &rArr; ieee80211_associated &rArr; ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_free_rxbuf
<LI><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_action
<LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_auth
<LI><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_deauth
<LI><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_probe_resp
<LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
<LI><a href="#[9d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_beacon
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_task
</UL>

<P><STRONG><a name="[9ec]"></a>set_bit</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_bit &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_req_auth
<LI><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_timer
<LI><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_config_auth
</UL>

<P><STRONG><a name="[9f2]"></a>test_and_clear_bit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = test_and_clear_bit &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_task
</UL>

<P><STRONG><a name="[9f1]"></a>dl_list_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_task
</UL>

<P><STRONG><a name="[9ce]"></a>get_sta_flags</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_sta_flags &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associated
<LI><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_associated
</UL>

<P><STRONG><a name="[9e4]"></a>set_sta_flags</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = set_sta_flags &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_assoc_resp
</UL>

<P><STRONG><a name="[9ca]"></a>ieee80211_sta_send_apinfo</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ieee80211_sta_send_apinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
<LI><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_authenticate
<LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associate
</UL>

<P><STRONG><a name="[9f3]"></a>ieee80211_authenticate</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = ieee80211_authenticate &rArr; ieee80211_send_auth &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_sem_release
<LI><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_send_apinfo
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_auth
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_mlme_task
</UL>

<P><STRONG><a name="[9e6]"></a>ieee80211_rx_mgmt_probe_resp</STRONG> (Thumb, 156 bytes, Stack size 200 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = ieee80211_rx_mgmt_probe_resp &rArr; ieee80211_rx_bss_info &rArr; ieee80211_bss_info_update &rArr; wpa_update_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_channel_to_frequency
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_elems
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_channel
<LI><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_bss_info
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
</UL>

<P><STRONG><a name="[9e8]"></a>ieee80211_rx_mgmt_deauth</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = ieee80211_rx_mgmt_deauth &rArr; ieee80211_set_disassoc &rArr; sta_info_flush &rArr; sta_info_free &rArr; ieee80211_sta_tear_down_BA_sessions &rArr; __ieee80211_stop_tx_ba_session &rArr; ___ieee80211_stop_tx_ba_session &rArr; ieee80211_stop_tx_ba_cb &rArr; ieee80211_send_delba &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_timer_change
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_disassoc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
</UL>

<P><STRONG><a name="[9e7]"></a>ieee80211_rx_mgmt_auth</STRONG> (Thumb, 182 bytes, Stack size 200 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = ieee80211_rx_mgmt_auth &rArr; ieee80211_auth_completed &rArr; ieee80211_associate &rArr; ieee80211_send_assoc &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_if_set_errno
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_elems
<LI><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_auth_completed
<LI><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_auth
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
</UL>

<P><STRONG><a name="[9e9]"></a>ieee80211_rx_mgmt_action</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = ieee80211_rx_mgmt_action &rArr; ieee80211_process_addba_request &rArr; ieee80211_send_addba_resp &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[9e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_process_chanswitch
<LI><a href="#[9e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_process_delba
<LI><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_process_addba_request
</UL>
<BR>[Called By]<UL><LI><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_queued_mgmt
</UL>

<P><STRONG><a name="[9f4]"></a>ieee80211_auth_completed</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_mlme.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ieee80211_auth_completed &rArr; ieee80211_associate &rArr; ieee80211_send_assoc &rArr; tls_wl_get_mgmt_txbuf &rArr; tls_wl_mem_reinit &rArr; tls_wl_hw_init &rArr; wm_rf_init &rArr; tls_set_tx_lo &rArr; tls_ft_param_set &rArr; tls_fls_write &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_associate
</UL>
<BR>[Called By]<UL><LI><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_auth
</UL>

<P><STRONG><a name="[9f6]"></a>rc_valid_phyrate</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, tls_wl_rc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_setvalid_htrates
<LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_init
</UL>

<P><STRONG><a name="[9f5]"></a>rc_init</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rc_init &rArr; rc_wl_select_max_rate &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_wl_select_max_rate
<LI><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_setvalid_htrates
<LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_valid_phyrate
</UL>
<BR>[Called By]<UL><LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rate_control_init
</UL>

<P><STRONG><a name="[9fc]"></a>rc_get_highest_rix</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rc_get_highest_rix
</UL>
<BR>[Called By]<UL><LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_set_rate
</UL>

<P><STRONG><a name="[9fd]"></a>rc_rate_set_series</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rc_rate_set_series
</UL>
<BR>[Called By]<UL><LI><a href="#[9fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_set_rate
</UL>

<P><STRONG><a name="[9fb]"></a>rc_set_rate</STRONG> (Thumb, 432 bytes, Stack size 64 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rate_control_send_low
<LI><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_rate_set_series
<LI><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_get_highest_rix
</UL>
<BR>[Called By]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_set_rate
</UL>

<P><STRONG><a name="[9f7]"></a>rc_setvalid_htrates</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rc_setvalid_htrates
</UL>
<BR>[Calls]<UL><LI><a href="#[9f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_valid_phyrate
</UL>
<BR>[Called By]<UL><LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_init
</UL>

<P><STRONG><a name="[9f8]"></a>rc_wl_select_max_rate</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, tls_wl_rc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rc_wl_select_max_rate &rArr; tls_param_get &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_param_get
</UL>
<BR>[Called By]<UL><LI><a href="#[9f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_init
</UL>

<P><STRONG><a name="[a01]"></a>compare_ether_addr</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tls_wl_rx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_deliver_frame
<LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_mgmt_filter
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_data_to_8023
<LI><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_reassemble_find
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_check_frame
<LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_h_amsdu
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_michael_mic_verify
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_for_handlers
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_frame_allowed
</UL>

<P><STRONG><a name="[a00]"></a>ieee80211_frame_allowed</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ieee80211_frame_allowed &rArr; test_sta_flags &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sta_flags
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_h_amsdu
</UL>

<P><STRONG><a name="[a03]"></a>prepare_for_handlers</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prepare_for_handlers &rArr; ieee80211_get_bssid
</UL>
<BR>[Calls]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_bssid
<LI><a href="#[a02]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_sta_flags
<LI><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_pspoll
<LI><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_data
<LI><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_mgmt
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
</UL>

<P><STRONG><a name="[a08]"></a>ieee80211_rx_michael_mic_verify</STRONG> (Thumb, 426 bytes, Stack size 72 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ieee80211_rx_michael_mic_verify &rArr; ieee80211_get_bssid
</UL>
<BR>[Calls]<UL><LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mic_block
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_bssid
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_DA
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_SA
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
</UL>

<P><STRONG><a name="[a0b]"></a>ieee80211_rx_h_amsdu</STRONG> (Thumb, 602 bytes, Stack size 136 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = ieee80211_rx_h_amsdu &rArr; ieee80211_deliver_frame &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hdrlen
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_deliver_frame
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_frame_allowed
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
</UL>

<P><STRONG><a name="[a0c]"></a>ieee80211_rx_mgmt_handle</STRONG> (Thumb, 294 bytes, Stack size 208 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 692<LI>Call Chain = ieee80211_rx_mgmt_handle &rArr; ieee80211_bss_info_update &rArr; wpa_update_ssid &rArr; tls_param_set &rArr; param_to_flash &rArr; get_crc32 &rArr; _cal_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_channel_to_frequency
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_beacon
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_probe_resp
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[9d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_parse_elems
<LI><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_channel
<LI><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_mgmt
<LI><a href="#[9b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_bss_info_update
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
</UL>

<P><STRONG><a name="[a0f]"></a>ieee80211_rx_data_handle</STRONG> (Thumb, 442 bytes, Stack size 40 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = ieee80211_rx_data_handle &rArr; ieee80211_rx_h_amsdu &rArr; ieee80211_deliver_frame &rArr; tls_wl_if_xmit &rArr; tls_wl_if_tx &rArr; ieee80211_tx &rArr; ieee80211_tx_rate_ctrl &rArr; ieee80211_set_rate &rArr; rc_set_rate &rArr; rate_control_send_low
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_put
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sta_info_get
<LI><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_deliver_frame
<LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_data_to_8023
<LI><a href="#[a0b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_h_amsdu
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_michael_mic_verify
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_frame_allowed
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_sta_rx_notify
<LI><a href="#[9c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_pspoll
<LI><a href="#[9c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_send_nullfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
</UL>

<P><STRONG><a name="[a11]"></a>ieee80211_check_frame</STRONG> (Thumb, 230 bytes, Stack size 56 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ieee80211_check_frame &rArr; tls_wifi_pbreq_recv &rArr; tls_wifi_oneshot_resolve_info &rArr; tls_wifi_oneshotinfo_resolve_probereq &rArr; decode_data &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[885]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_pbreq_recv
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hdrlen
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_DA
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_SA
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
</UL>

<P><STRONG><a name="[a13]"></a>atomic_sub_return</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = atomic_sub_return &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
</UL>

<P><STRONG><a name="[a12]"></a>dl_list_empty</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tls_wl_rx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
</UL>

<P><STRONG><a name="[a15]"></a>ieee80211_has_a4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_rx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_SA
</UL>

<P><STRONG><a name="[a04]"></a>ieee80211_is_mgmt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tls_wl_rx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_for_handlers
</UL>

<P><STRONG><a name="[a05]"></a>ieee80211_is_data</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_rx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_for_handlers
</UL>

<P><STRONG><a name="[a0d]"></a>ieee80211_is_probe_resp</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_rx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_mgmt_filter
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
</UL>

<P><STRONG><a name="[a0e]"></a>ieee80211_is_beacon</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_rx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_mgmt_filter
<LI><a href="#[a0c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_mgmt_handle
</UL>

<P><STRONG><a name="[a06]"></a>ieee80211_is_pspoll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_rx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
<LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_for_handlers
</UL>

<P><STRONG><a name="[a0a]"></a>ieee80211_get_SA</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ieee80211_get_SA
</UL>
<BR>[Calls]<UL><LI><a href="#[a15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_has_a4
</UL>
<BR>[Called By]<UL><LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_data_to_8023
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_check_frame
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_michael_mic_verify
</UL>

<P><STRONG><a name="[a09]"></a>ieee80211_get_DA</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tls_wl_rx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_data_to_8023
<LI><a href="#[a11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_check_frame
<LI><a href="#[a08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_michael_mic_verify
</UL>

<P><STRONG><a name="[a02]"></a>test_sta_flags</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = test_sta_flags &rArr; tls_os_set_critical &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_set_critical
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_release_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_for_handlers
<LI><a href="#[a00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_frame_allowed
</UL>

<P><STRONG><a name="[9ff]"></a>ieee80211_reassemble_find</STRONG> (Thumb, 150 bytes, Stack size 56 bytes, tls_wl_rx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_os_get_time
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_free_rxbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_defragment
</UL>

<P><STRONG><a name="[a10]"></a>ieee80211_data_to_8023</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ieee80211_data_to_8023 &rArr; ieee80211_hdrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hdrlen
<LI><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_DA
<LI><a href="#[a0a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_SA
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_rx_data_handle
</UL>

<P><STRONG><a name="[a14]"></a>ieee80211_mgmt_filter</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, tls_wl_rx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ieee80211_mgmt_filter &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[a16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wifi_get_listen_mode
<LI><a href="#[a0e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_beacon
<LI><a href="#[a0d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_is_probe_resp
<LI><a href="#[a01]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_ether_addr
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tls_wl_rx_task
</UL>

<P><STRONG><a name="[143]"></a>sta_info_release</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tls_wl_sta_info.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sta_info_release &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tls_wl_sta_info.o(.text)
</UL>
<P><STRONG><a name="[a1a]"></a>ieee80211_has_a4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hdrlen
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_bssid
</UL>

<P><STRONG><a name="[a1b]"></a>ieee80211_is_ctl</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tls_wl_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hdrlen
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_bssid
</UL>

<P><STRONG><a name="[a19]"></a>ieee80211_is_data</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tls_wl_util.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_hdrlen
<LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee80211_get_bssid
</UL>

<P><STRONG><a name="[a31]"></a>ieee802_11_erp_info</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, beacon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
</UL>

<P><STRONG><a name="[a2f]"></a>hostapd_eid_ds_params</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, beacon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
</UL>

<P><STRONG><a name="[a30]"></a>hostapd_eid_wpa</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, beacon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hostapd_eid_wpa &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_get_wpa_ie
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_11_set_beacon
<LI><a href="#[8d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_probe_req
</UL>

<P><STRONG><a name="[a36]"></a>hex2num</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex2byte
</UL>

<P><STRONG><a name="[a3b]"></a>wpa_auth_set_eapol</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wpa_auth_set_eapol &rArr; ieee802_1x_set_sta_authorized &rArr; ap_sta_set_authorized &rArr; hostapd_client_event
</UL>
<BR>[Calls]<UL><LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_get_sta
<LI><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ieee802_1x_set_sta_authorized
</UL>
<BR>[Called By]<UL><LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
<LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_INITIALIZE_Enter
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITDONE_Enter
</UL>

<P><STRONG><a name="[a3c]"></a>wpa_auth_set_key</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_config_group_keys
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITDONE_Enter
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_remove_ptk
</UL>

<P><STRONG><a name="[144]"></a>wpa_rekey_gmk</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = wpa_rekey_gmk &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth.o(.text)
</UL>
<P><STRONG><a name="[a3d]"></a>wpa_free_sta_sm</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = wpa_free_sta_sm &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
</UL>
<BR>[Called By]<UL><LI><a href="#[8eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_deinit
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
</UL>

<P><STRONG><a name="[145]"></a>wpa_send_eapol_timeout</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = wpa_send_eapol_timeout &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth.o(.text)
</UL>
<P><STRONG><a name="[a43]"></a>wpa_send_eapol</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[a3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__wpa_send_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKSTART_Enter
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter
</UL>

<P><STRONG><a name="[a44]"></a>sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_add_kde
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_seqnum
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_Step
</UL>

<P><STRONG><a name="[a47]"></a>sm_WPA_PTK_GROUP_Step</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = sm_WPA_PTK_GROUP_Step &rArr; sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_IDLE_Enter
<LI><a href="#[a44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_REKEYNEGOTIATING_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
</UL>

<P><STRONG><a name="[a49]"></a>sm_WPA_PTK_PTKINITNEGOTIATING_Enter</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096<LI>Call Chain = sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[a46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_add_kde
<LI><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_get_seqnum
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[146]"></a>wpa_rekey_ptk</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = wpa_rekey_ptk &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_request_new_ptk
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth.o(.text)
</UL>
<P><STRONG><a name="[a4b]"></a>sm_WPA_PTK_PTKINITDONE_Enter</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + In Cycle
<LI>Call Chain = sm_WPA_PTK_PTKINITDONE_Enter &rArr;  wpa_sta_disconnect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sta_disconnect
<LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_key
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[a4d]"></a>sm_WPA_PTK_PTKSTART_Enter</STRONG> (Thumb, 178 bytes, Stack size 64 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088<LI>Call Chain = sm_WPA_PTK_PTKSTART_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rsn_pmkid
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_sha256
<LI><a href="#[a43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[a50]"></a>wpa_verify_key_mic</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = wpa_verify_key_mic &rArr; wpa_eapol_key_mic &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[8f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_eapol_key_mic
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKCALCNEGOTIATING_Enter
</UL>

<P><STRONG><a name="[a51]"></a>sm_WPA_PTK_PTKCALCNEGOTIATING_Enter</STRONG> (Thumb, 206 bytes, Stack size 112 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = sm_WPA_PTK_PTKCALCNEGOTIATING_Enter &rArr; wpa_pmk_to_ptk &rArr; sha1_prf &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_cancel_timeout
<LI><a href="#[8fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_pmk_to_ptk
<LI><a href="#[a4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_key_mgmt_sha256
<LI><a href="#[a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_verify_key_mic
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[a52]"></a>wpa_group_config_group_keys</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = wpa_group_config_group_keys &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_rekey
<LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_setkeysdone
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_AUTHENTICATION2_Enter
</UL>

<P><STRONG><a name="[a53]"></a>wpa_gtk_update</STRONG> (Thumb, 146 bytes, Stack size 112 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = wpa_gtk_update &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf
<LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_byte_array
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_ntp_timestamp
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_rekey
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
<LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_setkeys
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_AUTHENTICATION2_Enter
</UL>

<P><STRONG><a name="[a54]"></a>wpa_group_init_gmk_and_counter</STRONG> (Thumb, 102 bytes, Stack size 80 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = wpa_group_init_gmk_and_counter &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha1_prf
<LI><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_get_ntp_timestamp
</UL>
<BR>[Called By]<UL><LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_AUTHENTICATION2_Enter
</UL>

<P><STRONG><a name="[a55]"></a>sm_WPA_PTK_AUTHENTICATION2_Enter</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = sm_WPA_PTK_AUTHENTICATION2_Enter &rArr; wpa_gtk_update &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[8fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_byte_array
<LI><a href="#[a54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_init_gmk_and_counter
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
<LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_config_group_keys
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[a56]"></a>sm_WPA_PTK_INITIALIZE_Enter</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = sm_WPA_PTK_INITIALIZE_Enter &rArr; wpa_remove_ptk &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_eapol
<LI><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_remove_ptk
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[a57]"></a>sm_WPA_PTK_Step</STRONG> (Thumb, 490 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_DISCONNECTED_Enter
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_DISCONNECT_Enter
<LI><a href="#[a56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_INITIALIZE_Enter
<LI><a href="#[a55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_AUTHENTICATION2_Enter
<LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKCALCNEGOTIATING_Enter
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKSTART_Enter
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITDONE_Enter
<LI><a href="#[a49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITNEGOTIATING_Enter
<LI><a href="#[a3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_set_eapol
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
</UL>

<P><STRONG><a name="[a3e]"></a>wpa_sm_step</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
<LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
<LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_Step
<LI><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_free_sta_sm
</UL>
<BR>[Called By]<UL><LI><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sta_associated
<LI><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_sm_event
<LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_update_sta
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_ptk
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_send_eapol_timeout
</UL>

<P><STRONG><a name="[147]"></a>wpa_group_update_sta</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = wpa_group_update_sta &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth.o(.text)
</UL>
<P><STRONG><a name="[a5b]"></a>wpa_group_setkeys</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = wpa_group_setkeys &rArr; wpa_gtk_update &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[a5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_for_each_sta
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
</UL>
<BR>[Called By]<UL><LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
</UL>

<P><STRONG><a name="[a5a]"></a>wpa_group_sm_step</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[a5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_setkeysdone
<LI><a href="#[a5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_setkeys
<LI><a href="#[a53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_gtk_update
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init_keys
<LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_reconfig
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_gtk
<LI><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sm_step
</UL>

<P><STRONG><a name="[148]"></a>wpa_rekey_gtk</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = wpa_rekey_gtk &rArr; wpa_group_sm_step &rArr; wpa_group_setkeys &rArr; wpa_gtk_update &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eloop_register_timeout
<LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wpa_auth.o(.text)
</UL>
<P><STRONG><a name="[a4e]"></a>wpa_key_mgmt_sha256</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKCALCNEGOTIATING_Enter
<LI><a href="#[a4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKSTART_Enter
</UL>

<P><STRONG><a name="[a4c]"></a>wpa_sta_disconnect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = wpa_sta_disconnect &rArr; ap_sta_disconnect &rArr; wpa_auth_sm_event &rArr; wpa_sm_step &rArr; sm_WPA_PTK_Step &rArr; sm_WPA_PTK_PTKINITNEGOTIATING_Enter &rArr; wpa_send_eapol &rArr; __wpa_send_eapol &rArr; aes_wrap &rArr; tls_crypto_aes_encrypt_decrypt &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ap_sta_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[a58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_DISCONNECT_Enter
<LI><a href="#[a4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_PTKINITDONE_Enter
</UL>

<P><STRONG><a name="[a48]"></a>sm_WPA_PTK_GROUP_IDLE_Enter</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_GROUP_Step
</UL>

<P><STRONG><a name="[a58]"></a>sm_WPA_PTK_DISCONNECT_Enter</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_sta_disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[a4a]"></a>wpa_request_new_ptk</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
<LI><a href="#[a64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive_error_report
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_rekey_ptk
</UL>

<P><STRONG><a name="[a59]"></a>sm_WPA_PTK_DISCONNECTED_Enter</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_WPA_PTK_Step
</UL>

<P><STRONG><a name="[a5d]"></a>wpa_group_setkeysdone</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = wpa_group_setkeysdone &rArr; wpa_group_config_group_keys &rArr; wpa_auth_set_key &rArr; hostapd_drv_set_key &rArr; wpa_drv_set_key &rArr; tls_wl_if_add_key &rArr; tls_wl_if_remove_key &rArr; ieee80211_del_key &rArr; ieee80211_key_free &rArr; tls_os_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_config_group_keys
</UL>
<BR>[Called By]<UL><LI><a href="#[a5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_group_sm_step
</UL>

<P><STRONG><a name="[a60]"></a>wpa_group_set_key_len</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, wpa_auth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_reconfig
<LI><a href="#[a5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_init
</UL>

<P><STRONG><a name="[a64]"></a>wpa_receive_error_report</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, wpa_auth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = wpa_receive_error_report &rArr; michael_mic_failure &rArr; ieee80211_tkip_countermeasures_start &rArr; wpa_gtk_rekey &rArr; wpa_gtk_update &rArr; random_get_bytes &rArr; random_extract &rArr; hmac_sha1 &rArr; hmac_sha1_vector &rArr; sha1_vector &rArr; tls_crypto_sha1_final &rArr; hd_sha1_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;michael_mic_failure
<LI><a href="#[a4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_request_new_ptk
</UL>
<BR>[Called By]<UL><LI><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_receive
</UL>

<P><STRONG><a name="[a66]"></a>wpa_write_wpa_ie</STRONG> (Thumb, 300 bytes, Stack size 36 bytes, wpa_auth_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = wpa_write_wpa_ie
</UL>
<BR>[Called By]<UL><LI><a href="#[a5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_auth_gen_wpa_ie
</UL>

<P><STRONG><a name="[a67]"></a>wpa_parse_generic</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, wpa_auth_ie.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wpa_parse_generic
</UL>
<BR>[Called By]<UL><LI><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_kde_ies
</UL>

<P><STRONG><a name="[a68]"></a>rsn_selector_to_bitfield</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, wpa_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_rsn
</UL>

<P><STRONG><a name="[a69]"></a>wpa_selector_to_bitfield</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, wpa_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpa_parse_wpa_ie_wpa
</UL>

<P><STRONG><a name="[a6a]"></a>cipher2drv</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, hostapd_wpa_driver.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hostapd_drv_set_ap
</UL>

<P><STRONG><a name="[a72]"></a>sm_EAP_INITIALIZE_Enter</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sm_EAP_INITIALIZE_Enter &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_set_bool
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_deinit_prev_method
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_local
</UL>

<P><STRONG><a name="[a76]"></a>eap_sm_parseEapReq</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = eap_sm_parseEapReq &rArr; md5_vector &rArr; tls_crypto_md5_final &rArr; hd_md5_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;md5_vector
</UL>
<BR>[Called By]<UL><LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_idle
</UL>

<P><STRONG><a name="[a77]"></a>sm_EAP_GET_METHOD_Enter</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = sm_EAP_GET_METHOD_Enter &rArr; eap_sm_buildNak &rArr; eap_sm_build_expanded_nak &rArr; eap_msg_alloc &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_get_eap_method
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_allowed_method
<LI><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_get_config
<LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildNak
<LI><a href="#[a73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_deinit_prev_method
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_received
</UL>

<P><STRONG><a name="[a7a]"></a>sm_EAP_METHOD_Enter</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sm_EAP_METHOD_Enter &rArr; wpabuf_free &rArr; mem_free_debug &rArr; vPortFree &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_get_eapReqData
</UL>
<BR>[Called By]<UL><LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_local
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_received
</UL>

<P><STRONG><a name="[a7c]"></a>sm_EAP_SEND_RESPONSE_Enter</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = sm_EAP_SEND_RESPONSE_Enter &rArr; wpabuf_dup &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
<LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_set_bool
<LI><a href="#[a74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_set_int
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_local
</UL>

<P><STRONG><a name="[a7e]"></a>sm_EAP_SUCCESS_Enter</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sm_EAP_SUCCESS_Enter &rArr; eapol_set_bool
</UL>
<BR>[Calls]<UL><LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_set_bool
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_received
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_idle
</UL>

<P><STRONG><a name="[a7f]"></a>sm_EAP_FAILURE_Enter</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sm_EAP_FAILURE_Enter &rArr; eapol_set_bool
</UL>
<BR>[Calls]<UL><LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_set_bool
</UL>
<BR>[Called By]<UL><LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_received
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_idle
</UL>

<P><STRONG><a name="[a80]"></a>eap_peer_sm_step_idle</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = eap_peer_sm_step_idle &rArr; eap_sm_parseEapReq &rArr; md5_vector &rArr; tls_crypto_md5_final &rArr; hd_md5_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_get_eapReqData
<LI><a href="#[a82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_get_int
<LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_get_bool
<LI><a href="#[a7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_FAILURE_Enter
<LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SUCCESS_Enter
<LI><a href="#[a76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_parseEapReq
</UL>
<BR>[Called By]<UL><LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_local
</UL>

<P><STRONG><a name="[a83]"></a>eap_peer_sm_step_received</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = eap_peer_sm_step_received &rArr; sm_EAP_GET_METHOD_Enter &rArr; eap_sm_buildNak &rArr; eap_sm_build_expanded_nak &rArr; eap_msg_alloc &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
<LI><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildIdentity
<LI><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_req_is_duplicate
<LI><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_success_workaround
<LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_NOTIFICATION_Enter
<LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_DISCARD_Enter
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_get_eapReqData
<LI><a href="#[a7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_FAILURE_Enter
<LI><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SUCCESS_Enter
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_METHOD_Enter
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_GET_METHOD_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_local
</UL>

<P><STRONG><a name="[a88]"></a>eap_peer_sm_step_local</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = eap_peer_sm_step_local &rArr; eap_peer_sm_step_received &rArr; sm_EAP_GET_METHOD_Enter &rArr; eap_sm_buildNak &rArr; eap_sm_build_expanded_nak &rArr; eap_msg_alloc &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_DISCARD_Enter
<LI><a href="#[a89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_IDLE_Enter
<LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_get_bool
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_received
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_idle
<LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SEND_RESPONSE_Enter
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_METHOD_Enter
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_INITIALIZE_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
</UL>

<P><STRONG><a name="[a81]"></a>eapol_get_bool</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[961]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_notify_lower_layer_success
<LI><a href="#[a8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_Step
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_local
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_idle
</UL>

<P><STRONG><a name="[a82]"></a>eapol_get_int</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_idle
</UL>

<P><STRONG><a name="[a74]"></a>eapol_set_int</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eapol_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[a7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_SEND_RESPONSE_Enter
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_INITIALIZE_Enter
</UL>

<P><STRONG><a name="[a7b]"></a>eapol_get_eapReqData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, eap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_NOTIFICATION_Enter
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_received
<LI><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_idle
<LI><a href="#[a7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_METHOD_Enter
</UL>

<P><STRONG><a name="[a73]"></a>eap_deinit_prev_method</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = eap_deinit_prev_method
</UL>
<BR>[Called By]<UL><LI><a href="#[97e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_deinit
<LI><a href="#[97c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_invalidate_cached_session
<LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_GET_METHOD_Enter
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_INITIALIZE_Enter
</UL>

<P><STRONG><a name="[a89]"></a>sm_EAP_IDLE_Enter</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, eap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_local
</UL>

<P><STRONG><a name="[a79]"></a>eap_sm_buildNak</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = eap_sm_buildNak &rArr; eap_sm_build_expanded_nak &rArr; eap_msg_alloc &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_msg_alloc
<LI><a href="#[a8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_get_methods
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_allowed_method
<LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_build_expanded_nak
<LI><a href="#[a8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_u8
<LI><a href="#[a8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_update_len
</UL>
<BR>[Called By]<UL><LI><a href="#[a77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_GET_METHOD_Enter
</UL>

<P><STRONG><a name="[a87]"></a>sm_EAP_DISCARD_Enter</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sm_EAP_DISCARD_Enter &rArr; eapol_set_bool
</UL>
<BR>[Calls]<UL><LI><a href="#[a75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_set_bool
</UL>
<BR>[Called By]<UL><LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_local
<LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_received
</UL>

<P><STRONG><a name="[a86]"></a>sm_EAP_NOTIFICATION_Enter</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sm_EAP_NOTIFICATION_Enter &rArr; eap_msg_alloc &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free_debug
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_debug
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_msg_alloc
<LI><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_hdr_validate
<LI><a href="#[a7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_get_eapReqData
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_received
</UL>

<P><STRONG><a name="[a85]"></a>eap_success_workaround</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, eap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_received
</UL>

<P><STRONG><a name="[a84]"></a>eap_peer_req_is_duplicate</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = eap_peer_req_is_duplicate &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_received
</UL>

<P><STRONG><a name="[a8a]"></a>sm_EAP_Step</STRONG> (Thumb, 192 bytes, Stack size 8 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sm_EAP_Step &rArr; eap_peer_sm_step_local &rArr; eap_peer_sm_step_received &rArr; sm_EAP_GET_METHOD_Enter &rArr; eap_sm_buildNak &rArr; eap_sm_build_expanded_nak &rArr; eap_msg_alloc &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eapol_get_bool
<LI><a href="#[a88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step_local
<LI><a href="#[a7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_FAILURE_Enter
<LI><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sm_EAP_INITIALIZE_Enter
</UL>
<BR>[Called By]<UL><LI><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_peer_sm_step
</UL>

<P><STRONG><a name="[a8e]"></a>wpabuf_put_u8</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpabuf_put_u8
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildNak
</UL>

<P><STRONG><a name="[a8d]"></a>eap_sm_build_expanded_nak</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = eap_sm_build_expanded_nak &rArr; eap_msg_alloc &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_msg_alloc
<LI><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_allowed_method
<LI><a href="#[a91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be32
<LI><a href="#[a90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be24
<LI><a href="#[a8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_update_len
</UL>
<BR>[Called By]<UL><LI><a href="#[a79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_buildNak
</UL>

<P><STRONG><a name="[a90]"></a>wpabuf_put_be24</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpabuf_put_be24
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_build_expanded_nak
</UL>

<P><STRONG><a name="[a91]"></a>wpabuf_put_be32</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, eap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpabuf_put_be32
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[a8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eap_sm_build_expanded_nak
</UL>

<P><STRONG><a name="[a99]"></a>wpabuf_head</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wps_attr_build.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_ie_encapsulate
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_key_wrap_auth
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_authenticator
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_buf
</UL>

<P><STRONG><a name="[a9f]"></a>wpabuf_put_u8</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wps_attr_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpabuf_put_u8
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_ie_encapsulate
</UL>

<P><STRONG><a name="[a95]"></a>wpabuf_put_be16</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wps_attr_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpabuf_put_be16
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_registrar_nonce
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_msg_type
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_enrollee_nonce
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_version
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_uuid_e
<LI><a href="#[98f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_resp_type
<LI><a href="#[98c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_req_type
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_dev_password_id
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_config_methods
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_config_error
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_assoc_state
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_encr_settings
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_key_wrap_auth
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_conn_type_flags
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_encr_type_flags
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_auth_type_flags
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_authenticator
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_public_key
</UL>

<P><STRONG><a name="[a97]"></a>wpabuf_put_data</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wps_attr_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpabuf_put_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_registrar_nonce
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_enrollee_nonce
<LI><a href="#[99a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_ie_encapsulate
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_uuid_e
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_key_wrap_auth
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_authenticator
<LI><a href="#[a96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_buf
</UL>

<P><STRONG><a name="[a96]"></a>wpabuf_put_buf</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, wps_attr_build.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wpabuf_put_buf &rArr; wpabuf_put_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[a97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_encr_settings
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_public_key
</UL>

<P><STRONG><a name="[aa0]"></a>wps_set_attr</STRONG> (Thumb, 748 bytes, Stack size 16 bytes, wps_attr_parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wps_set_attr &rArr; wps_parse_vendor_ext_wfa
</UL>
<BR>[Calls]<UL><LI><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_vendor_ext_wfa
</UL>
<BR>[Called By]<UL><LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
</UL>

<P><STRONG><a name="[aa1]"></a>wps_parse_vendor_ext_wfa</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, wps_attr_parse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = wps_parse_vendor_ext_wfa
</UL>
<BR>[Called By]<UL><LI><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_set_attr
</UL>

<P><STRONG><a name="[aa9]"></a>wpabuf_put_u8</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wps_dev_attr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpabuf_put_u8
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_rf_bands
</UL>

<P><STRONG><a name="[aa3]"></a>wpabuf_put_be16</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wps_dev_attr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpabuf_put_be16
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_secondary_dev_type
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_rf_bands
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_req_dev_type
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_primary_dev_type
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_dev_name
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_vendor_ext
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_os_version
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_device_attrs
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_model_number
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_model_name
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_manufacturer
</UL>

<P><STRONG><a name="[aa4]"></a>wpabuf_put_data</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wps_dev_attr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpabuf_put_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_secondary_dev_type
<LI><a href="#[997]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_req_dev_type
<LI><a href="#[992]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_primary_dev_type
<LI><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_dev_name
<LI><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_vendor_ext
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_device_attrs
<LI><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_model_number
<LI><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_model_name
<LI><a href="#[aa2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_manufacturer
</UL>

<P><STRONG><a name="[aad]"></a>wps_build_m1</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3048<LI>Call Chain = wps_build_m1 &rArr; wps_build_public_key &rArr; dh5_init &rArr; dh_init &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; tls_crypto_exptmod &rArr; mp_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_msg_type
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_enrollee_nonce
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wfa_ext
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_version
<LI><a href="#[991]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_uuid_e
<LI><a href="#[993]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_rf_bands
<LI><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_dev_password_id
<LI><a href="#[990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_config_methods
<LI><a href="#[995]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_config_error
<LI><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_assoc_state
<LI><a href="#[aa8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_os_version
<LI><a href="#[aa7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_device_attrs
<LI><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_conn_type_flags
<LI><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_encr_type_flags
<LI><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_auth_type_flags
<LI><a href="#[a94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_public_key
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_get_msg
</UL>

<P><STRONG><a name="[ab0]"></a>wps_build_ap_settings</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wps_build_ap_settings &rArr; wpabuf_put_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
</UL>

<P><STRONG><a name="[ab1]"></a>wps_build_m7</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = wps_build_m7 &rArr; wps_build_encr_settings &rArr; aes_128_cbc_encrypt &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_registrar_nonce
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_msg_type
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wfa_ext
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_version
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_encr_settings
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_key_wrap_auth
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_authenticator
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_ap_settings
</UL>
<BR>[Called By]<UL><LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_get_msg
</UL>

<P><STRONG><a name="[ab5]"></a>wps_process_m2</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3256<LI>Call Chain = wps_process_m2 &rArr; wps_derive_keys &rArr; dh5_derive_shared &rArr; dh_derive_shared &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; tls_crypto_exptmod &rArr; mp_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc_copy
<LI><a href="#[99c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_keys
<LI><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_device_attrs
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_authenticator
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_enrollee_nonce
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
</UL>

<P><STRONG><a name="[ab8]"></a>wps_process_m4</STRONG> (Thumb, 156 bytes, Stack size 512 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = wps_process_m4 &rArr; wps_decrypt_encr_settings &rArr; aes_128_cbc_decrypt &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_decrypt_encr_settings
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_key_wrap_auth
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_authenticator
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce1
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_enrollee_nonce
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
</UL>

<P><STRONG><a name="[abb]"></a>wps_process_m6</STRONG> (Thumb, 140 bytes, Stack size 512 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440<LI>Call Chain = wps_process_m6 &rArr; wps_decrypt_encr_settings &rArr; aes_128_cbc_decrypt &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_decrypt_encr_settings
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_key_wrap_auth
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_authenticator
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce2
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_enrollee_nonce
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
</UL>

<P><STRONG><a name="[abd]"></a>wps_process_m8</STRONG> (Thumb, 288 bytes, Stack size 656 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = wps_process_m8 &rArr; wps_decrypt_encr_settings &rArr; aes_128_cbc_decrypt &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_decrypt_encr_settings
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ab9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_key_wrap_auth
<LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_authenticator
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_ap_settings
<LI><a href="#[abe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred_e
<LI><a href="#[ab6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_enrollee_nonce
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
</UL>

<P><STRONG><a name="[ac1]"></a>wps_process_wsc_msg</STRONG> (Thumb, 248 bytes, Stack size 512 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3768<LI>Call Chain = wps_process_wsc_msg &rArr; wps_process_m2 &rArr; wps_derive_keys &rArr; dh5_derive_shared &rArr; dh_derive_shared &rArr; crypto_mod_exp &rArr; bignum_exptmod &rArr; tls_crypto_exptmod &rArr; mp_exptmod &rArr; s_mp_exptmod &rArr; mp_mul &rArr; s_mp_mul_digs &rArr; fast_s_mp_mul_digs &rArr; mp_grow &rArr; os_realloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_dup
<LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_fail_event
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ac2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2d
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
</UL>
<BR>[Called By]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_process_msg
</UL>

<P><STRONG><a name="[ac0]"></a>wpabuf_head</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wps_enrollee.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_e_hash
<LI><a href="#[abc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce2
<LI><a href="#[aba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_r_snonce1
<LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
</UL>

<P><STRONG><a name="[aae]"></a>wpabuf_put_be16</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wpabuf_put_be16
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
</UL>
<BR>[Called By]<UL><LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_e_hash
<LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
<LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_ap_settings
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[aaf]"></a>wpabuf_put_data</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wpabuf_put_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m5
<LI><a href="#[ab1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m7
<LI><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_ap_settings
<LI><a href="#[aad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m1
</UL>

<P><STRONG><a name="[ab2]"></a>wps_build_m3</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 788<LI>Call Chain = wps_build_m3 &rArr; wps_derive_psk &rArr; hmac_sha256 &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_registrar_nonce
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_msg_type
<LI><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_derive_psk
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wfa_ext
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_version
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_authenticator
<LI><a href="#[ac5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_e_hash
</UL>
<BR>[Called By]<UL><LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_get_msg
</UL>

<P><STRONG><a name="[ab3]"></a>wps_build_m5</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = wps_build_m5 &rArr; wps_build_encr_settings &rArr; aes_128_cbc_encrypt &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_registrar_nonce
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_msg_type
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wfa_ext
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_version
<LI><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_encr_settings
<LI><a href="#[a9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_key_wrap_auth
<LI><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_authenticator
<LI><a href="#[aaf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_data
<LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
</UL>
<BR>[Called By]<UL><LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_get_msg
</UL>

<P><STRONG><a name="[ab4]"></a>wps_build_wsc_done</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = wps_build_wsc_done &rArr; wpabuf_alloc &rArr; os_zalloc &rArr; mem_alloc_debug &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; vTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_free
<LI><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_alloc
<LI><a href="#[9aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_registrar_nonce
<LI><a href="#[9a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_msg_type
<LI><a href="#[9a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_enrollee_nonce
<LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_success_event
<LI><a href="#[98d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_wfa_ext
<LI><a href="#[98b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_version
</UL>
<BR>[Called By]<UL><LI><a href="#[984]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_get_msg
</UL>

<P><STRONG><a name="[ab6]"></a>wps_process_enrollee_nonce</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = wps_process_enrollee_nonce &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
<LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
<LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
<LI><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m2
</UL>

<P><STRONG><a name="[aba]"></a>wps_process_r_snonce1</STRONG> (Thumb, 124 bytes, Stack size 88 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = wps_process_r_snonce1 &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_pwd_auth_fail_event
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m4
</UL>

<P><STRONG><a name="[abc]"></a>wps_process_r_snonce2</STRONG> (Thumb, 122 bytes, Stack size 88 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = wps_process_r_snonce2 &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[9a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_pwd_auth_fail_event
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m6
</UL>

<P><STRONG><a name="[abe]"></a>wps_process_cred_e</STRONG> (Thumb, 118 bytes, Stack size 528 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = wps_process_cred_e &rArr; wps_parse_msg &rArr; wps_set_attr &rArr; wps_parse_vendor_ext_wfa
</UL>
<BR>[Calls]<UL><LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred
</UL>
<BR>[Called By]<UL><LI><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_m8
</UL>

<P><STRONG><a name="[ac2]"></a>wps_process_m2d</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wps_process_m2d
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_wsc_msg
</UL>

<P><STRONG><a name="[ac3]"></a>wps_process_wsc_ack</STRONG> (Thumb, 94 bytes, Stack size 504 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = wps_process_wsc_ack &rArr; wps_parse_msg &rArr; wps_set_attr &rArr; wps_parse_vendor_ext_wfa
</UL>
<BR>[Calls]<UL><LI><a href="#[ac6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_success_event
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_process_msg
</UL>

<P><STRONG><a name="[ac4]"></a>wps_process_wsc_nack</STRONG> (Thumb, 130 bytes, Stack size 504 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = wps_process_wsc_nack &rArr; wps_fail_event
</UL>
<BR>[Calls]<UL><LI><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_fail_event
<LI><a href="#[980]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_parse_msg
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[983]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_enrollee_process_msg
</UL>

<P><STRONG><a name="[ac5]"></a>wps_build_e_hash</STRONG> (Thumb, 210 bytes, Stack size 64 bytes, wps_enrollee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 740<LI>Call Chain = wps_build_e_hash &rArr; hmac_sha256_vector &rArr; sha256_vector &rArr; sha256_process &rArr; sha256_compress
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;random_get_bytes
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hmac_sha256_vector
<LI><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put
<LI><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_put_be16
<LI><a href="#[ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wpabuf_head
</UL>
<BR>[Called By]<UL><LI><a href="#[ab2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_build_m3
</UL>

<P><STRONG><a name="[ad2]"></a>wpabuf_head</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dh_groups.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_init
<LI><a href="#[a6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dh_derive_shared
</UL>

<P><STRONG><a name="[ad3]"></a>wpabuf_head</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wps_attr_process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_authenticator
</UL>

<P><STRONG><a name="[ad4]"></a>wps_process_cred_ssid</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wps_attr_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wps_process_cred_ssid &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_ap_settings
</UL>

<P><STRONG><a name="[ad5]"></a>wps_process_cred_auth_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wps_attr_process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_ap_settings
</UL>

<P><STRONG><a name="[ad6]"></a>wps_process_cred_encr_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wps_attr_process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_ap_settings
</UL>

<P><STRONG><a name="[ad7]"></a>wps_process_cred_network_key_idx</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, wps_attr_process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_ap_settings
</UL>

<P><STRONG><a name="[ad8]"></a>wps_process_cred_network_key</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wps_attr_process.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = wps_process_cred_network_key &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_ap_settings
</UL>

<P><STRONG><a name="[ad9]"></a>wps_process_cred_mac_addr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wps_attr_process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_ap_settings
</UL>

<P><STRONG><a name="[ada]"></a>wps_workaround_cred_key</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, wps_attr_process.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_cred
<LI><a href="#[abf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wps_process_ap_settings
</UL>

<P><STRONG><a name="[af2]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[af3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[aeb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[aef]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[af6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[af4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[af5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[af2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[af1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[aee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[af5]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[af4]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[aef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[14f]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[14e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[af0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[14b]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
